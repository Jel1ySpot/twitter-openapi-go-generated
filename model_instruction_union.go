/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// InstructionUnion - struct for InstructionUnion
type InstructionUnion struct {
	TimelineAddEntries        *TimelineAddEntries
	TimelineAddToModule       *TimelineAddToModule
	TimelineClearCache        *TimelineClearCache
	TimelinePinEntry          *TimelinePinEntry
	TimelineReplaceEntry      *TimelineReplaceEntry
	TimelineShowAlert         *TimelineShowAlert
	TimelineShowCover         *TimelineShowCover
	TimelineTerminateTimeline *TimelineTerminateTimeline
}

// TimelineAddEntriesAsInstructionUnion is a convenience function that returns TimelineAddEntries wrapped in InstructionUnion
func TimelineAddEntriesAsInstructionUnion(v *TimelineAddEntries) InstructionUnion {
	return InstructionUnion{
		TimelineAddEntries: v,
	}
}

// TimelineAddToModuleAsInstructionUnion is a convenience function that returns TimelineAddToModule wrapped in InstructionUnion
func TimelineAddToModuleAsInstructionUnion(v *TimelineAddToModule) InstructionUnion {
	return InstructionUnion{
		TimelineAddToModule: v,
	}
}

// TimelineClearCacheAsInstructionUnion is a convenience function that returns TimelineClearCache wrapped in InstructionUnion
func TimelineClearCacheAsInstructionUnion(v *TimelineClearCache) InstructionUnion {
	return InstructionUnion{
		TimelineClearCache: v,
	}
}

// TimelinePinEntryAsInstructionUnion is a convenience function that returns TimelinePinEntry wrapped in InstructionUnion
func TimelinePinEntryAsInstructionUnion(v *TimelinePinEntry) InstructionUnion {
	return InstructionUnion{
		TimelinePinEntry: v,
	}
}

// TimelineReplaceEntryAsInstructionUnion is a convenience function that returns TimelineReplaceEntry wrapped in InstructionUnion
func TimelineReplaceEntryAsInstructionUnion(v *TimelineReplaceEntry) InstructionUnion {
	return InstructionUnion{
		TimelineReplaceEntry: v,
	}
}

// TimelineShowAlertAsInstructionUnion is a convenience function that returns TimelineShowAlert wrapped in InstructionUnion
func TimelineShowAlertAsInstructionUnion(v *TimelineShowAlert) InstructionUnion {
	return InstructionUnion{
		TimelineShowAlert: v,
	}
}

// TimelineShowCoverAsInstructionUnion is a convenience function that returns TimelineShowCover wrapped in InstructionUnion
func TimelineShowCoverAsInstructionUnion(v *TimelineShowCover) InstructionUnion {
	return InstructionUnion{
		TimelineShowCover: v,
	}
}

// TimelineTerminateTimelineAsInstructionUnion is a convenience function that returns TimelineTerminateTimeline wrapped in InstructionUnion
func TimelineTerminateTimelineAsInstructionUnion(v *TimelineTerminateTimeline) InstructionUnion {
	return InstructionUnion{
		TimelineTerminateTimeline: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *InstructionUnion) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TimelineAddEntries
	err = newStrictDecoder(data).Decode(&dst.TimelineAddEntries)
	if err == nil {
		jsonTimelineAddEntries, _ := json.Marshal(dst.TimelineAddEntries)
		if string(jsonTimelineAddEntries) == "{}" { // empty struct
			dst.TimelineAddEntries = nil
		} else {
			if err = validator.Validate(dst.TimelineAddEntries); err != nil {
				dst.TimelineAddEntries = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelineAddEntries = nil
	}

	// try to unmarshal data into TimelineAddToModule
	err = newStrictDecoder(data).Decode(&dst.TimelineAddToModule)
	if err == nil {
		jsonTimelineAddToModule, _ := json.Marshal(dst.TimelineAddToModule)
		if string(jsonTimelineAddToModule) == "{}" { // empty struct
			dst.TimelineAddToModule = nil
		} else {
			if err = validator.Validate(dst.TimelineAddToModule); err != nil {
				dst.TimelineAddToModule = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelineAddToModule = nil
	}

	// try to unmarshal data into TimelineClearCache
	err = newStrictDecoder(data).Decode(&dst.TimelineClearCache)
	if err == nil {
		jsonTimelineClearCache, _ := json.Marshal(dst.TimelineClearCache)
		if string(jsonTimelineClearCache) == "{}" { // empty struct
			dst.TimelineClearCache = nil
		} else {
			if err = validator.Validate(dst.TimelineClearCache); err != nil {
				dst.TimelineClearCache = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelineClearCache = nil
	}

	// try to unmarshal data into TimelinePinEntry
	err = newStrictDecoder(data).Decode(&dst.TimelinePinEntry)
	if err == nil {
		jsonTimelinePinEntry, _ := json.Marshal(dst.TimelinePinEntry)
		if string(jsonTimelinePinEntry) == "{}" { // empty struct
			dst.TimelinePinEntry = nil
		} else {
			if err = validator.Validate(dst.TimelinePinEntry); err != nil {
				dst.TimelinePinEntry = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelinePinEntry = nil
	}

	// try to unmarshal data into TimelineReplaceEntry
	err = newStrictDecoder(data).Decode(&dst.TimelineReplaceEntry)
	if err == nil {
		jsonTimelineReplaceEntry, _ := json.Marshal(dst.TimelineReplaceEntry)
		if string(jsonTimelineReplaceEntry) == "{}" { // empty struct
			dst.TimelineReplaceEntry = nil
		} else {
			if err = validator.Validate(dst.TimelineReplaceEntry); err != nil {
				dst.TimelineReplaceEntry = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelineReplaceEntry = nil
	}

	// try to unmarshal data into TimelineShowAlert
	err = newStrictDecoder(data).Decode(&dst.TimelineShowAlert)
	if err == nil {
		jsonTimelineShowAlert, _ := json.Marshal(dst.TimelineShowAlert)
		if string(jsonTimelineShowAlert) == "{}" { // empty struct
			dst.TimelineShowAlert = nil
		} else {
			if err = validator.Validate(dst.TimelineShowAlert); err != nil {
				dst.TimelineShowAlert = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelineShowAlert = nil
	}

	// try to unmarshal data into TimelineShowCover
	err = newStrictDecoder(data).Decode(&dst.TimelineShowCover)
	if err == nil {
		jsonTimelineShowCover, _ := json.Marshal(dst.TimelineShowCover)
		if string(jsonTimelineShowCover) == "{}" { // empty struct
			dst.TimelineShowCover = nil
		} else {
			if err = validator.Validate(dst.TimelineShowCover); err != nil {
				dst.TimelineShowCover = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelineShowCover = nil
	}

	// try to unmarshal data into TimelineTerminateTimeline
	err = newStrictDecoder(data).Decode(&dst.TimelineTerminateTimeline)
	if err == nil {
		jsonTimelineTerminateTimeline, _ := json.Marshal(dst.TimelineTerminateTimeline)
		if string(jsonTimelineTerminateTimeline) == "{}" { // empty struct
			dst.TimelineTerminateTimeline = nil
		} else {
			if err = validator.Validate(dst.TimelineTerminateTimeline); err != nil {
				dst.TimelineTerminateTimeline = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelineTerminateTimeline = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TimelineAddEntries = nil
		dst.TimelineAddToModule = nil
		dst.TimelineClearCache = nil
		dst.TimelinePinEntry = nil
		dst.TimelineReplaceEntry = nil
		dst.TimelineShowAlert = nil
		dst.TimelineShowCover = nil
		dst.TimelineTerminateTimeline = nil

		return fmt.Errorf("data matches more than one schema in oneOf(InstructionUnion)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(InstructionUnion)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InstructionUnion) MarshalJSON() ([]byte, error) {
	if src.TimelineAddEntries != nil {
		return json.Marshal(&src.TimelineAddEntries)
	}

	if src.TimelineAddToModule != nil {
		return json.Marshal(&src.TimelineAddToModule)
	}

	if src.TimelineClearCache != nil {
		return json.Marshal(&src.TimelineClearCache)
	}

	if src.TimelinePinEntry != nil {
		return json.Marshal(&src.TimelinePinEntry)
	}

	if src.TimelineReplaceEntry != nil {
		return json.Marshal(&src.TimelineReplaceEntry)
	}

	if src.TimelineShowAlert != nil {
		return json.Marshal(&src.TimelineShowAlert)
	}

	if src.TimelineShowCover != nil {
		return json.Marshal(&src.TimelineShowCover)
	}

	if src.TimelineTerminateTimeline != nil {
		return json.Marshal(&src.TimelineTerminateTimeline)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *InstructionUnion) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TimelineAddEntries != nil {
		return obj.TimelineAddEntries
	}

	if obj.TimelineAddToModule != nil {
		return obj.TimelineAddToModule
	}

	if obj.TimelineClearCache != nil {
		return obj.TimelineClearCache
	}

	if obj.TimelinePinEntry != nil {
		return obj.TimelinePinEntry
	}

	if obj.TimelineReplaceEntry != nil {
		return obj.TimelineReplaceEntry
	}

	if obj.TimelineShowAlert != nil {
		return obj.TimelineShowAlert
	}

	if obj.TimelineShowCover != nil {
		return obj.TimelineShowCover
	}

	if obj.TimelineTerminateTimeline != nil {
		return obj.TimelineTerminateTimeline
	}

	// all schemas are nil
	return nil
}

type NullableInstructionUnion struct {
	value *InstructionUnion
	isSet bool
}

func (v NullableInstructionUnion) Get() *InstructionUnion {
	return v.value
}

func (v *NullableInstructionUnion) Set(val *InstructionUnion) {
	v.value = val
	v.isSet = true
}

func (v NullableInstructionUnion) IsSet() bool {
	return v.isSet
}

func (v *NullableInstructionUnion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstructionUnion(val *InstructionUnion) *NullableInstructionUnion {
	return &NullableInstructionUnion{value: val, isSet: true}
}

func (v NullableInstructionUnion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstructionUnion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
