/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SocialContextUnion - struct for SocialContextUnion
type SocialContextUnion struct {
	TimelineGeneralContext *TimelineGeneralContext
	TimelineTopicContext   *TimelineTopicContext
}

// TimelineGeneralContextAsSocialContextUnion is a convenience function that returns TimelineGeneralContext wrapped in SocialContextUnion
func TimelineGeneralContextAsSocialContextUnion(v *TimelineGeneralContext) SocialContextUnion {
	return SocialContextUnion{
		TimelineGeneralContext: v,
	}
}

// TimelineTopicContextAsSocialContextUnion is a convenience function that returns TimelineTopicContext wrapped in SocialContextUnion
func TimelineTopicContextAsSocialContextUnion(v *TimelineTopicContext) SocialContextUnion {
	return SocialContextUnion{
		TimelineTopicContext: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *SocialContextUnion) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TimelineGeneralContext
	err = newStrictDecoder(data).Decode(&dst.TimelineGeneralContext)
	if err == nil {
		jsonTimelineGeneralContext, _ := json.Marshal(dst.TimelineGeneralContext)
		if string(jsonTimelineGeneralContext) == "{}" { // empty struct
			dst.TimelineGeneralContext = nil
		} else {
			if err = validator.Validate(dst.TimelineGeneralContext); err != nil {
				dst.TimelineGeneralContext = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelineGeneralContext = nil
	}

	// try to unmarshal data into TimelineTopicContext
	err = newStrictDecoder(data).Decode(&dst.TimelineTopicContext)
	if err == nil {
		jsonTimelineTopicContext, _ := json.Marshal(dst.TimelineTopicContext)
		if string(jsonTimelineTopicContext) == "{}" { // empty struct
			dst.TimelineTopicContext = nil
		} else {
			if err = validator.Validate(dst.TimelineTopicContext); err != nil {
				dst.TimelineTopicContext = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelineTopicContext = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TimelineGeneralContext = nil
		dst.TimelineTopicContext = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SocialContextUnion)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SocialContextUnion)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SocialContextUnion) MarshalJSON() ([]byte, error) {
	if src.TimelineGeneralContext != nil {
		return json.Marshal(&src.TimelineGeneralContext)
	}

	if src.TimelineTopicContext != nil {
		return json.Marshal(&src.TimelineTopicContext)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SocialContextUnion) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.TimelineGeneralContext != nil {
		return obj.TimelineGeneralContext
	}

	if obj.TimelineTopicContext != nil {
		return obj.TimelineTopicContext
	}

	// all schemas are nil
	return nil
}

type NullableSocialContextUnion struct {
	value *SocialContextUnion
	isSet bool
}

func (v NullableSocialContextUnion) Get() *SocialContextUnion {
	return v.value
}

func (v *NullableSocialContextUnion) Set(val *SocialContextUnion) {
	v.value = val
	v.isSet = true
}

func (v NullableSocialContextUnion) IsSet() bool {
	return v.isSet
}

func (v *NullableSocialContextUnion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSocialContextUnion(val *SocialContextUnion) *NullableSocialContextUnion {
	return &NullableSocialContextUnion{value: val, isSet: true}
}

func (v NullableSocialContextUnion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSocialContextUnion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
