/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AuthorCommunityRelationship type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorCommunityRelationship{}

// AuthorCommunityRelationship struct for AuthorCommunityRelationship
type AuthorCommunityRelationship struct {
	CommunityResults Community    `json:"community_results"`
	Role             *string      `json:"role,omitempty"`
	UserResults      *UserResults `json:"user_results,omitempty"`
}

type _AuthorCommunityRelationship AuthorCommunityRelationship

// NewAuthorCommunityRelationship instantiates a new AuthorCommunityRelationship object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorCommunityRelationship(communityResults Community) *AuthorCommunityRelationship {
	this := AuthorCommunityRelationship{}
	this.CommunityResults = communityResults
	return &this
}

// NewAuthorCommunityRelationshipWithDefaults instantiates a new AuthorCommunityRelationship object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorCommunityRelationshipWithDefaults() *AuthorCommunityRelationship {
	this := AuthorCommunityRelationship{}
	return &this
}

// GetCommunityResults returns the CommunityResults field value
func (o *AuthorCommunityRelationship) GetCommunityResults() Community {
	if o == nil {
		var ret Community
		return ret
	}

	return o.CommunityResults
}

// GetCommunityResultsOk returns a tuple with the CommunityResults field value
// and a boolean to check if the value has been set.
func (o *AuthorCommunityRelationship) GetCommunityResultsOk() (*Community, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommunityResults, true
}

// SetCommunityResults sets field value
func (o *AuthorCommunityRelationship) SetCommunityResults(v Community) {
	o.CommunityResults = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *AuthorCommunityRelationship) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorCommunityRelationship) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *AuthorCommunityRelationship) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *AuthorCommunityRelationship) SetRole(v string) {
	o.Role = &v
}

// GetUserResults returns the UserResults field value if set, zero value otherwise.
func (o *AuthorCommunityRelationship) GetUserResults() UserResults {
	if o == nil || IsNil(o.UserResults) {
		var ret UserResults
		return ret
	}
	return *o.UserResults
}

// GetUserResultsOk returns a tuple with the UserResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorCommunityRelationship) GetUserResultsOk() (*UserResults, bool) {
	if o == nil || IsNil(o.UserResults) {
		return nil, false
	}
	return o.UserResults, true
}

// HasUserResults returns a boolean if a field has been set.
func (o *AuthorCommunityRelationship) HasUserResults() bool {
	if o != nil && !IsNil(o.UserResults) {
		return true
	}

	return false
}

// SetUserResults gets a reference to the given UserResults and assigns it to the UserResults field.
func (o *AuthorCommunityRelationship) SetUserResults(v UserResults) {
	o.UserResults = &v
}

func (o AuthorCommunityRelationship) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorCommunityRelationship) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["community_results"] = o.CommunityResults
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.UserResults) {
		toSerialize["user_results"] = o.UserResults
	}
	return toSerialize, nil
}

func (o *AuthorCommunityRelationship) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"community_results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthorCommunityRelationship := _AuthorCommunityRelationship{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuthorCommunityRelationship)

	if err != nil {
		return err
	}

	*o = AuthorCommunityRelationship(varAuthorCommunityRelationship)

	return err
}

type NullableAuthorCommunityRelationship struct {
	value *AuthorCommunityRelationship
	isSet bool
}

func (v NullableAuthorCommunityRelationship) Get() *AuthorCommunityRelationship {
	return v.value
}

func (v *NullableAuthorCommunityRelationship) Set(val *AuthorCommunityRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorCommunityRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorCommunityRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorCommunityRelationship(val *AuthorCommunityRelationship) *NullableAuthorCommunityRelationship {
	return &NullableAuthorCommunityRelationship{value: val, isSet: true}
}

func (v NullableAuthorCommunityRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorCommunityRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
