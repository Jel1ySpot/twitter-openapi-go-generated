/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TweetTombstone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TweetTombstone{}

// TweetTombstone struct for TweetTombstone
type TweetTombstone struct {
	Typename             *TypeName `json:"__typename,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TweetTombstone TweetTombstone

// NewTweetTombstone instantiates a new TweetTombstone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTweetTombstone() *TweetTombstone {
	this := TweetTombstone{}
	return &this
}

// NewTweetTombstoneWithDefaults instantiates a new TweetTombstone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTweetTombstoneWithDefaults() *TweetTombstone {
	this := TweetTombstone{}
	return &this
}

// GetTypename returns the Typename field value if set, zero value otherwise.
func (o *TweetTombstone) GetTypename() TypeName {
	if o == nil || IsNil(o.Typename) {
		var ret TypeName
		return ret
	}
	return *o.Typename
}

// GetTypenameOk returns a tuple with the Typename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TweetTombstone) GetTypenameOk() (*TypeName, bool) {
	if o == nil || IsNil(o.Typename) {
		return nil, false
	}
	return o.Typename, true
}

// HasTypename returns a boolean if a field has been set.
func (o *TweetTombstone) HasTypename() bool {
	if o != nil && !IsNil(o.Typename) {
		return true
	}

	return false
}

// SetTypename gets a reference to the given TypeName and assigns it to the Typename field.
func (o *TweetTombstone) SetTypename(v TypeName) {
	o.Typename = &v
}

func (o TweetTombstone) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TweetTombstone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Typename) {
		toSerialize["__typename"] = o.Typename
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TweetTombstone) UnmarshalJSON(data []byte) (err error) {
	varTweetTombstone := _TweetTombstone{}

	err = json.Unmarshal(data, &varTweetTombstone)

	if err != nil {
		return err
	}

	*o = TweetTombstone(varTweetTombstone)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "__typename")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTweetTombstone struct {
	value *TweetTombstone
	isSet bool
}

func (v NullableTweetTombstone) Get() *TweetTombstone {
	return v.value
}

func (v *NullableTweetTombstone) Set(val *TweetTombstone) {
	v.value = val
	v.isSet = true
}

func (v NullableTweetTombstone) IsSet() bool {
	return v.isSet
}

func (v *NullableTweetTombstone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTweetTombstone(val *TweetTombstone) *NullableTweetTombstone {
	return &NullableTweetTombstone{value: val, isSet: true}
}

func (v NullableTweetTombstone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTweetTombstone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
