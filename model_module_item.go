/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ModuleItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModuleItem{}

// ModuleItem struct for ModuleItem
type ModuleItem struct {
	EntryId string      `json:"entryId" validate:"regexp=^(([a-z]+|[0-9]+|[0-9a-f]+)(-|$))+"`
	Item    ModuleEntry `json:"item"`
}

type _ModuleItem ModuleItem

// NewModuleItem instantiates a new ModuleItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModuleItem(entryId string, item ModuleEntry) *ModuleItem {
	this := ModuleItem{}
	this.EntryId = entryId
	this.Item = item
	return &this
}

// NewModuleItemWithDefaults instantiates a new ModuleItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModuleItemWithDefaults() *ModuleItem {
	this := ModuleItem{}
	return &this
}

// GetEntryId returns the EntryId field value
func (o *ModuleItem) GetEntryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntryId
}

// GetEntryIdOk returns a tuple with the EntryId field value
// and a boolean to check if the value has been set.
func (o *ModuleItem) GetEntryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntryId, true
}

// SetEntryId sets field value
func (o *ModuleItem) SetEntryId(v string) {
	o.EntryId = v
}

// GetItem returns the Item field value
func (o *ModuleItem) GetItem() ModuleEntry {
	if o == nil {
		var ret ModuleEntry
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *ModuleItem) GetItemOk() (*ModuleEntry, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *ModuleItem) SetItem(v ModuleEntry) {
	o.Item = v
}

func (o ModuleItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModuleItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entryId"] = o.EntryId
	toSerialize["item"] = o.Item
	return toSerialize, nil
}

func (o *ModuleItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entryId",
		"item",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModuleItem := _ModuleItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModuleItem)

	if err != nil {
		return err
	}

	*o = ModuleItem(varModuleItem)

	return err
}

type NullableModuleItem struct {
	value *ModuleItem
	isSet bool
}

func (v NullableModuleItem) Get() *ModuleItem {
	return v.value
}

func (v *NullableModuleItem) Set(val *ModuleItem) {
	v.value = val
	v.isSet = true
}

func (v NullableModuleItem) IsSet() bool {
	return v.isSet
}

func (v *NullableModuleItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModuleItem(val *ModuleItem) *NullableModuleItem {
	return &NullableModuleItem{value: val, isSet: true}
}

func (v NullableModuleItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModuleItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
