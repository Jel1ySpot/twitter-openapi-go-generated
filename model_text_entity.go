/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TextEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextEntity{}

// TextEntity struct for TextEntity
type TextEntity struct {
	FromIndex int32 `json:"fromIndex"`
	Ref TextEntityRef `json:"ref"`
	ToIndex int32 `json:"toIndex"`
}

type _TextEntity TextEntity

// NewTextEntity instantiates a new TextEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextEntity(fromIndex int32, ref TextEntityRef, toIndex int32) *TextEntity {
	this := TextEntity{}
	this.FromIndex = fromIndex
	this.Ref = ref
	this.ToIndex = toIndex
	return &this
}

// NewTextEntityWithDefaults instantiates a new TextEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextEntityWithDefaults() *TextEntity {
	this := TextEntity{}
	return &this
}

// GetFromIndex returns the FromIndex field value
func (o *TextEntity) GetFromIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FromIndex
}

// GetFromIndexOk returns a tuple with the FromIndex field value
// and a boolean to check if the value has been set.
func (o *TextEntity) GetFromIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromIndex, true
}

// SetFromIndex sets field value
func (o *TextEntity) SetFromIndex(v int32) {
	o.FromIndex = v
}

// GetRef returns the Ref field value
func (o *TextEntity) GetRef() TextEntityRef {
	if o == nil {
		var ret TextEntityRef
		return ret
	}

	return o.Ref
}

// GetRefOk returns a tuple with the Ref field value
// and a boolean to check if the value has been set.
func (o *TextEntity) GetRefOk() (*TextEntityRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ref, true
}

// SetRef sets field value
func (o *TextEntity) SetRef(v TextEntityRef) {
	o.Ref = v
}

// GetToIndex returns the ToIndex field value
func (o *TextEntity) GetToIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ToIndex
}

// GetToIndexOk returns a tuple with the ToIndex field value
// and a boolean to check if the value has been set.
func (o *TextEntity) GetToIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToIndex, true
}

// SetToIndex sets field value
func (o *TextEntity) SetToIndex(v int32) {
	o.ToIndex = v
}

func (o TextEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fromIndex"] = o.FromIndex
	toSerialize["ref"] = o.Ref
	toSerialize["toIndex"] = o.ToIndex
	return toSerialize, nil
}

func (o *TextEntity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fromIndex",
		"ref",
		"toIndex",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTextEntity := _TextEntity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTextEntity)

	if err != nil {
		return err
	}

	*o = TextEntity(varTextEntity)

	return err
}

type NullableTextEntity struct {
	value *TextEntity
	isSet bool
}

func (v NullableTextEntity) Get() *TextEntity {
	return v.value
}

func (v *NullableTextEntity) Set(val *TextEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableTextEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableTextEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextEntity(val *TextEntity) *NullableTextEntity {
	return &NullableTextEntity{value: val, isSet: true}
}

func (v NullableTextEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


