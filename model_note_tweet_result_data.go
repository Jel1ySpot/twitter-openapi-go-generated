/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NoteTweetResultData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoteTweetResultData{}

// NoteTweetResultData struct for NoteTweetResultData
type NoteTweetResultData struct {
	EntitySet Entities `json:"entity_set"`
	Id string `json:"id" validate:"regexp=^([A-Za-z0-9+\\/]{4})*([A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{2}==)?$"`
	Media *NoteTweetResultMedia `json:"media,omitempty"`
	Richtext *NoteTweetResultRichText `json:"richtext,omitempty"`
	Text string `json:"text"`
}

type _NoteTweetResultData NoteTweetResultData

// NewNoteTweetResultData instantiates a new NoteTweetResultData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteTweetResultData(entitySet Entities, id string, text string) *NoteTweetResultData {
	this := NoteTweetResultData{}
	this.EntitySet = entitySet
	this.Id = id
	this.Text = text
	return &this
}

// NewNoteTweetResultDataWithDefaults instantiates a new NoteTweetResultData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteTweetResultDataWithDefaults() *NoteTweetResultData {
	this := NoteTweetResultData{}
	return &this
}

// GetEntitySet returns the EntitySet field value
func (o *NoteTweetResultData) GetEntitySet() Entities {
	if o == nil {
		var ret Entities
		return ret
	}

	return o.EntitySet
}

// GetEntitySetOk returns a tuple with the EntitySet field value
// and a boolean to check if the value has been set.
func (o *NoteTweetResultData) GetEntitySetOk() (*Entities, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntitySet, true
}

// SetEntitySet sets field value
func (o *NoteTweetResultData) SetEntitySet(v Entities) {
	o.EntitySet = v
}

// GetId returns the Id field value
func (o *NoteTweetResultData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NoteTweetResultData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NoteTweetResultData) SetId(v string) {
	o.Id = v
}

// GetMedia returns the Media field value if set, zero value otherwise.
func (o *NoteTweetResultData) GetMedia() NoteTweetResultMedia {
	if o == nil || IsNil(o.Media) {
		var ret NoteTweetResultMedia
		return ret
	}
	return *o.Media
}

// GetMediaOk returns a tuple with the Media field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTweetResultData) GetMediaOk() (*NoteTweetResultMedia, bool) {
	if o == nil || IsNil(o.Media) {
		return nil, false
	}
	return o.Media, true
}

// HasMedia returns a boolean if a field has been set.
func (o *NoteTweetResultData) HasMedia() bool {
	if o != nil && !IsNil(o.Media) {
		return true
	}

	return false
}

// SetMedia gets a reference to the given NoteTweetResultMedia and assigns it to the Media field.
func (o *NoteTweetResultData) SetMedia(v NoteTweetResultMedia) {
	o.Media = &v
}

// GetRichtext returns the Richtext field value if set, zero value otherwise.
func (o *NoteTweetResultData) GetRichtext() NoteTweetResultRichText {
	if o == nil || IsNil(o.Richtext) {
		var ret NoteTweetResultRichText
		return ret
	}
	return *o.Richtext
}

// GetRichtextOk returns a tuple with the Richtext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTweetResultData) GetRichtextOk() (*NoteTweetResultRichText, bool) {
	if o == nil || IsNil(o.Richtext) {
		return nil, false
	}
	return o.Richtext, true
}

// HasRichtext returns a boolean if a field has been set.
func (o *NoteTweetResultData) HasRichtext() bool {
	if o != nil && !IsNil(o.Richtext) {
		return true
	}

	return false
}

// SetRichtext gets a reference to the given NoteTweetResultRichText and assigns it to the Richtext field.
func (o *NoteTweetResultData) SetRichtext(v NoteTweetResultRichText) {
	o.Richtext = &v
}

// GetText returns the Text field value
func (o *NoteTweetResultData) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *NoteTweetResultData) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *NoteTweetResultData) SetText(v string) {
	o.Text = v
}

func (o NoteTweetResultData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoteTweetResultData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entity_set"] = o.EntitySet
	toSerialize["id"] = o.Id
	if !IsNil(o.Media) {
		toSerialize["media"] = o.Media
	}
	if !IsNil(o.Richtext) {
		toSerialize["richtext"] = o.Richtext
	}
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

func (o *NoteTweetResultData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entity_set",
		"id",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNoteTweetResultData := _NoteTweetResultData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNoteTweetResultData)

	if err != nil {
		return err
	}

	*o = NoteTweetResultData(varNoteTweetResultData)

	return err
}

type NullableNoteTweetResultData struct {
	value *NoteTweetResultData
	isSet bool
}

func (v NullableNoteTweetResultData) Get() *NoteTweetResultData {
	return v.value
}

func (v *NullableNoteTweetResultData) Set(val *NoteTweetResultData) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteTweetResultData) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteTweetResultData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteTweetResultData(val *NoteTweetResultData) *NullableNoteTweetResultData {
	return &NullableNoteTweetResultData{value: val, isSet: true}
}

func (v NullableNoteTweetResultData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteTweetResultData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


