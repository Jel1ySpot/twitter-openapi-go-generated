/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Media type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Media{}

// Media struct for Media
type Media struct {
	AdditionalMediaInfo *AdditionalMediaInfo `json:"additional_media_info,omitempty"`
	AllowDownloadStatus *AllowDownloadStatus `json:"allow_download_status,omitempty"`
	DisplayUrl string `json:"display_url"`
	ExpandedUrl string `json:"expanded_url"`
	ExtAltText *string `json:"ext_alt_text,omitempty"`
	ExtMediaAvailability ExtMediaAvailability `json:"ext_media_availability"`
	Features map[string]interface{} `json:"features,omitempty"`
	IdStr string `json:"id_str" validate:"regexp=^[0-9]+$"`
	Indices []int32 `json:"indices"`
	MediaKey string `json:"media_key"`
	MediaResults *MediaResults `json:"media_results,omitempty"`
	MediaUrlHttps string `json:"media_url_https"`
	OriginalInfo MediaOriginalInfo `json:"original_info"`
	SensitiveMediaWarning *SensitiveMediaWarning `json:"sensitive_media_warning,omitempty"`
	Sizes MediaSizes `json:"sizes"`
	SourceStatusIdStr *string `json:"source_status_id_str,omitempty" validate:"regexp=^[0-9]+$"`
	SourceUserIdStr *string `json:"source_user_id_str,omitempty" validate:"regexp=^[0-9]+$"`
	Type string `json:"type"`
	Url string `json:"url"`
	VideoInfo *MediaVideoInfo `json:"video_info,omitempty"`
}

type _Media Media

// NewMedia instantiates a new Media object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMedia(displayUrl string, expandedUrl string, extMediaAvailability ExtMediaAvailability, idStr string, indices []int32, mediaKey string, mediaUrlHttps string, originalInfo MediaOriginalInfo, sizes MediaSizes, type_ string, url string) *Media {
	this := Media{}
	this.DisplayUrl = displayUrl
	this.ExpandedUrl = expandedUrl
	this.ExtMediaAvailability = extMediaAvailability
	this.IdStr = idStr
	this.Indices = indices
	this.MediaKey = mediaKey
	this.MediaUrlHttps = mediaUrlHttps
	this.OriginalInfo = originalInfo
	this.Sizes = sizes
	this.Type = type_
	this.Url = url
	return &this
}

// NewMediaWithDefaults instantiates a new Media object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaWithDefaults() *Media {
	this := Media{}
	return &this
}

// GetAdditionalMediaInfo returns the AdditionalMediaInfo field value if set, zero value otherwise.
func (o *Media) GetAdditionalMediaInfo() AdditionalMediaInfo {
	if o == nil || IsNil(o.AdditionalMediaInfo) {
		var ret AdditionalMediaInfo
		return ret
	}
	return *o.AdditionalMediaInfo
}

// GetAdditionalMediaInfoOk returns a tuple with the AdditionalMediaInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Media) GetAdditionalMediaInfoOk() (*AdditionalMediaInfo, bool) {
	if o == nil || IsNil(o.AdditionalMediaInfo) {
		return nil, false
	}
	return o.AdditionalMediaInfo, true
}

// HasAdditionalMediaInfo returns a boolean if a field has been set.
func (o *Media) HasAdditionalMediaInfo() bool {
	if o != nil && !IsNil(o.AdditionalMediaInfo) {
		return true
	}

	return false
}

// SetAdditionalMediaInfo gets a reference to the given AdditionalMediaInfo and assigns it to the AdditionalMediaInfo field.
func (o *Media) SetAdditionalMediaInfo(v AdditionalMediaInfo) {
	o.AdditionalMediaInfo = &v
}

// GetAllowDownloadStatus returns the AllowDownloadStatus field value if set, zero value otherwise.
func (o *Media) GetAllowDownloadStatus() AllowDownloadStatus {
	if o == nil || IsNil(o.AllowDownloadStatus) {
		var ret AllowDownloadStatus
		return ret
	}
	return *o.AllowDownloadStatus
}

// GetAllowDownloadStatusOk returns a tuple with the AllowDownloadStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Media) GetAllowDownloadStatusOk() (*AllowDownloadStatus, bool) {
	if o == nil || IsNil(o.AllowDownloadStatus) {
		return nil, false
	}
	return o.AllowDownloadStatus, true
}

// HasAllowDownloadStatus returns a boolean if a field has been set.
func (o *Media) HasAllowDownloadStatus() bool {
	if o != nil && !IsNil(o.AllowDownloadStatus) {
		return true
	}

	return false
}

// SetAllowDownloadStatus gets a reference to the given AllowDownloadStatus and assigns it to the AllowDownloadStatus field.
func (o *Media) SetAllowDownloadStatus(v AllowDownloadStatus) {
	o.AllowDownloadStatus = &v
}

// GetDisplayUrl returns the DisplayUrl field value
func (o *Media) GetDisplayUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayUrl
}

// GetDisplayUrlOk returns a tuple with the DisplayUrl field value
// and a boolean to check if the value has been set.
func (o *Media) GetDisplayUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayUrl, true
}

// SetDisplayUrl sets field value
func (o *Media) SetDisplayUrl(v string) {
	o.DisplayUrl = v
}

// GetExpandedUrl returns the ExpandedUrl field value
func (o *Media) GetExpandedUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpandedUrl
}

// GetExpandedUrlOk returns a tuple with the ExpandedUrl field value
// and a boolean to check if the value has been set.
func (o *Media) GetExpandedUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpandedUrl, true
}

// SetExpandedUrl sets field value
func (o *Media) SetExpandedUrl(v string) {
	o.ExpandedUrl = v
}

// GetExtAltText returns the ExtAltText field value if set, zero value otherwise.
func (o *Media) GetExtAltText() string {
	if o == nil || IsNil(o.ExtAltText) {
		var ret string
		return ret
	}
	return *o.ExtAltText
}

// GetExtAltTextOk returns a tuple with the ExtAltText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Media) GetExtAltTextOk() (*string, bool) {
	if o == nil || IsNil(o.ExtAltText) {
		return nil, false
	}
	return o.ExtAltText, true
}

// HasExtAltText returns a boolean if a field has been set.
func (o *Media) HasExtAltText() bool {
	if o != nil && !IsNil(o.ExtAltText) {
		return true
	}

	return false
}

// SetExtAltText gets a reference to the given string and assigns it to the ExtAltText field.
func (o *Media) SetExtAltText(v string) {
	o.ExtAltText = &v
}

// GetExtMediaAvailability returns the ExtMediaAvailability field value
func (o *Media) GetExtMediaAvailability() ExtMediaAvailability {
	if o == nil {
		var ret ExtMediaAvailability
		return ret
	}

	return o.ExtMediaAvailability
}

// GetExtMediaAvailabilityOk returns a tuple with the ExtMediaAvailability field value
// and a boolean to check if the value has been set.
func (o *Media) GetExtMediaAvailabilityOk() (*ExtMediaAvailability, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtMediaAvailability, true
}

// SetExtMediaAvailability sets field value
func (o *Media) SetExtMediaAvailability(v ExtMediaAvailability) {
	o.ExtMediaAvailability = v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *Media) GetFeatures() map[string]interface{} {
	if o == nil || IsNil(o.Features) {
		var ret map[string]interface{}
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Media) GetFeaturesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Features) {
		return map[string]interface{}{}, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *Media) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given map[string]interface{} and assigns it to the Features field.
func (o *Media) SetFeatures(v map[string]interface{}) {
	o.Features = v
}

// GetIdStr returns the IdStr field value
func (o *Media) GetIdStr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdStr
}

// GetIdStrOk returns a tuple with the IdStr field value
// and a boolean to check if the value has been set.
func (o *Media) GetIdStrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdStr, true
}

// SetIdStr sets field value
func (o *Media) SetIdStr(v string) {
	o.IdStr = v
}

// GetIndices returns the Indices field value
func (o *Media) GetIndices() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Indices
}

// GetIndicesOk returns a tuple with the Indices field value
// and a boolean to check if the value has been set.
func (o *Media) GetIndicesOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Indices, true
}

// SetIndices sets field value
func (o *Media) SetIndices(v []int32) {
	o.Indices = v
}

// GetMediaKey returns the MediaKey field value
func (o *Media) GetMediaKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaKey
}

// GetMediaKeyOk returns a tuple with the MediaKey field value
// and a boolean to check if the value has been set.
func (o *Media) GetMediaKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaKey, true
}

// SetMediaKey sets field value
func (o *Media) SetMediaKey(v string) {
	o.MediaKey = v
}

// GetMediaResults returns the MediaResults field value if set, zero value otherwise.
func (o *Media) GetMediaResults() MediaResults {
	if o == nil || IsNil(o.MediaResults) {
		var ret MediaResults
		return ret
	}
	return *o.MediaResults
}

// GetMediaResultsOk returns a tuple with the MediaResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Media) GetMediaResultsOk() (*MediaResults, bool) {
	if o == nil || IsNil(o.MediaResults) {
		return nil, false
	}
	return o.MediaResults, true
}

// HasMediaResults returns a boolean if a field has been set.
func (o *Media) HasMediaResults() bool {
	if o != nil && !IsNil(o.MediaResults) {
		return true
	}

	return false
}

// SetMediaResults gets a reference to the given MediaResults and assigns it to the MediaResults field.
func (o *Media) SetMediaResults(v MediaResults) {
	o.MediaResults = &v
}

// GetMediaUrlHttps returns the MediaUrlHttps field value
func (o *Media) GetMediaUrlHttps() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediaUrlHttps
}

// GetMediaUrlHttpsOk returns a tuple with the MediaUrlHttps field value
// and a boolean to check if the value has been set.
func (o *Media) GetMediaUrlHttpsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediaUrlHttps, true
}

// SetMediaUrlHttps sets field value
func (o *Media) SetMediaUrlHttps(v string) {
	o.MediaUrlHttps = v
}

// GetOriginalInfo returns the OriginalInfo field value
func (o *Media) GetOriginalInfo() MediaOriginalInfo {
	if o == nil {
		var ret MediaOriginalInfo
		return ret
	}

	return o.OriginalInfo
}

// GetOriginalInfoOk returns a tuple with the OriginalInfo field value
// and a boolean to check if the value has been set.
func (o *Media) GetOriginalInfoOk() (*MediaOriginalInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalInfo, true
}

// SetOriginalInfo sets field value
func (o *Media) SetOriginalInfo(v MediaOriginalInfo) {
	o.OriginalInfo = v
}

// GetSensitiveMediaWarning returns the SensitiveMediaWarning field value if set, zero value otherwise.
func (o *Media) GetSensitiveMediaWarning() SensitiveMediaWarning {
	if o == nil || IsNil(o.SensitiveMediaWarning) {
		var ret SensitiveMediaWarning
		return ret
	}
	return *o.SensitiveMediaWarning
}

// GetSensitiveMediaWarningOk returns a tuple with the SensitiveMediaWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Media) GetSensitiveMediaWarningOk() (*SensitiveMediaWarning, bool) {
	if o == nil || IsNil(o.SensitiveMediaWarning) {
		return nil, false
	}
	return o.SensitiveMediaWarning, true
}

// HasSensitiveMediaWarning returns a boolean if a field has been set.
func (o *Media) HasSensitiveMediaWarning() bool {
	if o != nil && !IsNil(o.SensitiveMediaWarning) {
		return true
	}

	return false
}

// SetSensitiveMediaWarning gets a reference to the given SensitiveMediaWarning and assigns it to the SensitiveMediaWarning field.
func (o *Media) SetSensitiveMediaWarning(v SensitiveMediaWarning) {
	o.SensitiveMediaWarning = &v
}

// GetSizes returns the Sizes field value
func (o *Media) GetSizes() MediaSizes {
	if o == nil {
		var ret MediaSizes
		return ret
	}

	return o.Sizes
}

// GetSizesOk returns a tuple with the Sizes field value
// and a boolean to check if the value has been set.
func (o *Media) GetSizesOk() (*MediaSizes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sizes, true
}

// SetSizes sets field value
func (o *Media) SetSizes(v MediaSizes) {
	o.Sizes = v
}

// GetSourceStatusIdStr returns the SourceStatusIdStr field value if set, zero value otherwise.
func (o *Media) GetSourceStatusIdStr() string {
	if o == nil || IsNil(o.SourceStatusIdStr) {
		var ret string
		return ret
	}
	return *o.SourceStatusIdStr
}

// GetSourceStatusIdStrOk returns a tuple with the SourceStatusIdStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Media) GetSourceStatusIdStrOk() (*string, bool) {
	if o == nil || IsNil(o.SourceStatusIdStr) {
		return nil, false
	}
	return o.SourceStatusIdStr, true
}

// HasSourceStatusIdStr returns a boolean if a field has been set.
func (o *Media) HasSourceStatusIdStr() bool {
	if o != nil && !IsNil(o.SourceStatusIdStr) {
		return true
	}

	return false
}

// SetSourceStatusIdStr gets a reference to the given string and assigns it to the SourceStatusIdStr field.
func (o *Media) SetSourceStatusIdStr(v string) {
	o.SourceStatusIdStr = &v
}

// GetSourceUserIdStr returns the SourceUserIdStr field value if set, zero value otherwise.
func (o *Media) GetSourceUserIdStr() string {
	if o == nil || IsNil(o.SourceUserIdStr) {
		var ret string
		return ret
	}
	return *o.SourceUserIdStr
}

// GetSourceUserIdStrOk returns a tuple with the SourceUserIdStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Media) GetSourceUserIdStrOk() (*string, bool) {
	if o == nil || IsNil(o.SourceUserIdStr) {
		return nil, false
	}
	return o.SourceUserIdStr, true
}

// HasSourceUserIdStr returns a boolean if a field has been set.
func (o *Media) HasSourceUserIdStr() bool {
	if o != nil && !IsNil(o.SourceUserIdStr) {
		return true
	}

	return false
}

// SetSourceUserIdStr gets a reference to the given string and assigns it to the SourceUserIdStr field.
func (o *Media) SetSourceUserIdStr(v string) {
	o.SourceUserIdStr = &v
}

// GetType returns the Type field value
func (o *Media) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Media) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Media) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value
func (o *Media) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Media) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Media) SetUrl(v string) {
	o.Url = v
}

// GetVideoInfo returns the VideoInfo field value if set, zero value otherwise.
func (o *Media) GetVideoInfo() MediaVideoInfo {
	if o == nil || IsNil(o.VideoInfo) {
		var ret MediaVideoInfo
		return ret
	}
	return *o.VideoInfo
}

// GetVideoInfoOk returns a tuple with the VideoInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Media) GetVideoInfoOk() (*MediaVideoInfo, bool) {
	if o == nil || IsNil(o.VideoInfo) {
		return nil, false
	}
	return o.VideoInfo, true
}

// HasVideoInfo returns a boolean if a field has been set.
func (o *Media) HasVideoInfo() bool {
	if o != nil && !IsNil(o.VideoInfo) {
		return true
	}

	return false
}

// SetVideoInfo gets a reference to the given MediaVideoInfo and assigns it to the VideoInfo field.
func (o *Media) SetVideoInfo(v MediaVideoInfo) {
	o.VideoInfo = &v
}

func (o Media) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Media) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalMediaInfo) {
		toSerialize["additional_media_info"] = o.AdditionalMediaInfo
	}
	if !IsNil(o.AllowDownloadStatus) {
		toSerialize["allow_download_status"] = o.AllowDownloadStatus
	}
	toSerialize["display_url"] = o.DisplayUrl
	toSerialize["expanded_url"] = o.ExpandedUrl
	if !IsNil(o.ExtAltText) {
		toSerialize["ext_alt_text"] = o.ExtAltText
	}
	toSerialize["ext_media_availability"] = o.ExtMediaAvailability
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	toSerialize["id_str"] = o.IdStr
	toSerialize["indices"] = o.Indices
	toSerialize["media_key"] = o.MediaKey
	if !IsNil(o.MediaResults) {
		toSerialize["media_results"] = o.MediaResults
	}
	toSerialize["media_url_https"] = o.MediaUrlHttps
	toSerialize["original_info"] = o.OriginalInfo
	if !IsNil(o.SensitiveMediaWarning) {
		toSerialize["sensitive_media_warning"] = o.SensitiveMediaWarning
	}
	toSerialize["sizes"] = o.Sizes
	if !IsNil(o.SourceStatusIdStr) {
		toSerialize["source_status_id_str"] = o.SourceStatusIdStr
	}
	if !IsNil(o.SourceUserIdStr) {
		toSerialize["source_user_id_str"] = o.SourceUserIdStr
	}
	toSerialize["type"] = o.Type
	toSerialize["url"] = o.Url
	if !IsNil(o.VideoInfo) {
		toSerialize["video_info"] = o.VideoInfo
	}
	return toSerialize, nil
}

func (o *Media) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"display_url",
		"expanded_url",
		"ext_media_availability",
		"id_str",
		"indices",
		"media_key",
		"media_url_https",
		"original_info",
		"sizes",
		"type",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMedia := _Media{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMedia)

	if err != nil {
		return err
	}

	*o = Media(varMedia)

	return err
}

type NullableMedia struct {
	value *Media
	isSet bool
}

func (v NullableMedia) Get() *Media {
	return v.value
}

func (v *NullableMedia) Set(val *Media) {
	v.value = val
	v.isSet = true
}

func (v NullableMedia) IsSet() bool {
	return v.isSet
}

func (v *NullableMedia) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMedia(val *Media) *NullableMedia {
	return &NullableMedia{value: val, isSet: true}
}

func (v NullableMedia) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMedia) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


