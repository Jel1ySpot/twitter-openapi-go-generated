/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Tweet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tweet{}

// Tweet struct for Tweet
type Tweet struct {
	Typename                    *TypeName                    `json:"__typename,omitempty"`
	Article                     *Article                     `json:"article,omitempty"`
	AuthorCommunityRelationship *AuthorCommunityRelationship `json:"author_community_relationship,omitempty"`
	BirdwatchPivot              *BirdwatchPivot              `json:"birdwatch_pivot,omitempty"`
	Card                        *TweetCard                   `json:"card,omitempty"`
	CommunityRelationship       *CommunityRelationship       `json:"community_relationship,omitempty"`
	CommunityResults            *Community                   `json:"community_results,omitempty"`
	Core                        *UserResultCore              `json:"core,omitempty"`
	EditControl                 *TweetEditControl            `json:"edit_control,omitempty"`
	EditPrespective             *TweetEditPrespective        `json:"edit_prespective,omitempty"`
	HasBirdwatchNotes           *bool                        `json:"has_birdwatch_notes,omitempty"`
	IsTranslatable              *bool                        `json:"is_translatable,omitempty"`
	Legacy                      *TweetLegacy                 `json:"legacy,omitempty"`
	NoteTweet                   *NoteTweet                   `json:"note_tweet,omitempty"`
	PreviousCounts              *TweetPreviousCounts         `json:"previous_counts,omitempty"`
	QuickPromoteEligibility     map[string]interface{}       `json:"quick_promote_eligibility,omitempty"`
	QuotedRefResult             *QuotedRefResult             `json:"quotedRefResult,omitempty"`
	QuotedStatusResult          *ItemResult                  `json:"quoted_status_result,omitempty"`
	RestId                      string                       `json:"rest_id" validate:"regexp=^[0-9]+$"`
	Source                      *string                      `json:"source,omitempty"`
	SuperFollowsReplyUserResult *SuperFollowsReplyUserResult `json:"superFollowsReplyUserResult,omitempty"`
	UnifiedCard                 *UnifiedCard                 `json:"unified_card,omitempty"`
	UnmentionData               map[string]interface{}       `json:"unmention_data,omitempty"`
	Views                       *TweetView                   `json:"views,omitempty"`
}

type _Tweet Tweet

// NewTweet instantiates a new Tweet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTweet(restId string) *Tweet {
	this := Tweet{}
	this.RestId = restId
	return &this
}

// NewTweetWithDefaults instantiates a new Tweet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTweetWithDefaults() *Tweet {
	this := Tweet{}
	return &this
}

// GetTypename returns the Typename field value if set, zero value otherwise.
func (o *Tweet) GetTypename() TypeName {
	if o == nil || IsNil(o.Typename) {
		var ret TypeName
		return ret
	}
	return *o.Typename
}

// GetTypenameOk returns a tuple with the Typename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetTypenameOk() (*TypeName, bool) {
	if o == nil || IsNil(o.Typename) {
		return nil, false
	}
	return o.Typename, true
}

// HasTypename returns a boolean if a field has been set.
func (o *Tweet) HasTypename() bool {
	if o != nil && !IsNil(o.Typename) {
		return true
	}

	return false
}

// SetTypename gets a reference to the given TypeName and assigns it to the Typename field.
func (o *Tweet) SetTypename(v TypeName) {
	o.Typename = &v
}

// GetArticle returns the Article field value if set, zero value otherwise.
func (o *Tweet) GetArticle() Article {
	if o == nil || IsNil(o.Article) {
		var ret Article
		return ret
	}
	return *o.Article
}

// GetArticleOk returns a tuple with the Article field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetArticleOk() (*Article, bool) {
	if o == nil || IsNil(o.Article) {
		return nil, false
	}
	return o.Article, true
}

// HasArticle returns a boolean if a field has been set.
func (o *Tweet) HasArticle() bool {
	if o != nil && !IsNil(o.Article) {
		return true
	}

	return false
}

// SetArticle gets a reference to the given Article and assigns it to the Article field.
func (o *Tweet) SetArticle(v Article) {
	o.Article = &v
}

// GetAuthorCommunityRelationship returns the AuthorCommunityRelationship field value if set, zero value otherwise.
func (o *Tweet) GetAuthorCommunityRelationship() AuthorCommunityRelationship {
	if o == nil || IsNil(o.AuthorCommunityRelationship) {
		var ret AuthorCommunityRelationship
		return ret
	}
	return *o.AuthorCommunityRelationship
}

// GetAuthorCommunityRelationshipOk returns a tuple with the AuthorCommunityRelationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetAuthorCommunityRelationshipOk() (*AuthorCommunityRelationship, bool) {
	if o == nil || IsNil(o.AuthorCommunityRelationship) {
		return nil, false
	}
	return o.AuthorCommunityRelationship, true
}

// HasAuthorCommunityRelationship returns a boolean if a field has been set.
func (o *Tweet) HasAuthorCommunityRelationship() bool {
	if o != nil && !IsNil(o.AuthorCommunityRelationship) {
		return true
	}

	return false
}

// SetAuthorCommunityRelationship gets a reference to the given AuthorCommunityRelationship and assigns it to the AuthorCommunityRelationship field.
func (o *Tweet) SetAuthorCommunityRelationship(v AuthorCommunityRelationship) {
	o.AuthorCommunityRelationship = &v
}

// GetBirdwatchPivot returns the BirdwatchPivot field value if set, zero value otherwise.
func (o *Tweet) GetBirdwatchPivot() BirdwatchPivot {
	if o == nil || IsNil(o.BirdwatchPivot) {
		var ret BirdwatchPivot
		return ret
	}
	return *o.BirdwatchPivot
}

// GetBirdwatchPivotOk returns a tuple with the BirdwatchPivot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetBirdwatchPivotOk() (*BirdwatchPivot, bool) {
	if o == nil || IsNil(o.BirdwatchPivot) {
		return nil, false
	}
	return o.BirdwatchPivot, true
}

// HasBirdwatchPivot returns a boolean if a field has been set.
func (o *Tweet) HasBirdwatchPivot() bool {
	if o != nil && !IsNil(o.BirdwatchPivot) {
		return true
	}

	return false
}

// SetBirdwatchPivot gets a reference to the given BirdwatchPivot and assigns it to the BirdwatchPivot field.
func (o *Tweet) SetBirdwatchPivot(v BirdwatchPivot) {
	o.BirdwatchPivot = &v
}

// GetCard returns the Card field value if set, zero value otherwise.
func (o *Tweet) GetCard() TweetCard {
	if o == nil || IsNil(o.Card) {
		var ret TweetCard
		return ret
	}
	return *o.Card
}

// GetCardOk returns a tuple with the Card field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetCardOk() (*TweetCard, bool) {
	if o == nil || IsNil(o.Card) {
		return nil, false
	}
	return o.Card, true
}

// HasCard returns a boolean if a field has been set.
func (o *Tweet) HasCard() bool {
	if o != nil && !IsNil(o.Card) {
		return true
	}

	return false
}

// SetCard gets a reference to the given TweetCard and assigns it to the Card field.
func (o *Tweet) SetCard(v TweetCard) {
	o.Card = &v
}

// GetCommunityRelationship returns the CommunityRelationship field value if set, zero value otherwise.
func (o *Tweet) GetCommunityRelationship() CommunityRelationship {
	if o == nil || IsNil(o.CommunityRelationship) {
		var ret CommunityRelationship
		return ret
	}
	return *o.CommunityRelationship
}

// GetCommunityRelationshipOk returns a tuple with the CommunityRelationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetCommunityRelationshipOk() (*CommunityRelationship, bool) {
	if o == nil || IsNil(o.CommunityRelationship) {
		return nil, false
	}
	return o.CommunityRelationship, true
}

// HasCommunityRelationship returns a boolean if a field has been set.
func (o *Tweet) HasCommunityRelationship() bool {
	if o != nil && !IsNil(o.CommunityRelationship) {
		return true
	}

	return false
}

// SetCommunityRelationship gets a reference to the given CommunityRelationship and assigns it to the CommunityRelationship field.
func (o *Tweet) SetCommunityRelationship(v CommunityRelationship) {
	o.CommunityRelationship = &v
}

// GetCommunityResults returns the CommunityResults field value if set, zero value otherwise.
func (o *Tweet) GetCommunityResults() Community {
	if o == nil || IsNil(o.CommunityResults) {
		var ret Community
		return ret
	}
	return *o.CommunityResults
}

// GetCommunityResultsOk returns a tuple with the CommunityResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetCommunityResultsOk() (*Community, bool) {
	if o == nil || IsNil(o.CommunityResults) {
		return nil, false
	}
	return o.CommunityResults, true
}

// HasCommunityResults returns a boolean if a field has been set.
func (o *Tweet) HasCommunityResults() bool {
	if o != nil && !IsNil(o.CommunityResults) {
		return true
	}

	return false
}

// SetCommunityResults gets a reference to the given Community and assigns it to the CommunityResults field.
func (o *Tweet) SetCommunityResults(v Community) {
	o.CommunityResults = &v
}

// GetCore returns the Core field value if set, zero value otherwise.
func (o *Tweet) GetCore() UserResultCore {
	if o == nil || IsNil(o.Core) {
		var ret UserResultCore
		return ret
	}
	return *o.Core
}

// GetCoreOk returns a tuple with the Core field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetCoreOk() (*UserResultCore, bool) {
	if o == nil || IsNil(o.Core) {
		return nil, false
	}
	return o.Core, true
}

// HasCore returns a boolean if a field has been set.
func (o *Tweet) HasCore() bool {
	if o != nil && !IsNil(o.Core) {
		return true
	}

	return false
}

// SetCore gets a reference to the given UserResultCore and assigns it to the Core field.
func (o *Tweet) SetCore(v UserResultCore) {
	o.Core = &v
}

// GetEditControl returns the EditControl field value if set, zero value otherwise.
func (o *Tweet) GetEditControl() TweetEditControl {
	if o == nil || IsNil(o.EditControl) {
		var ret TweetEditControl
		return ret
	}
	return *o.EditControl
}

// GetEditControlOk returns a tuple with the EditControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetEditControlOk() (*TweetEditControl, bool) {
	if o == nil || IsNil(o.EditControl) {
		return nil, false
	}
	return o.EditControl, true
}

// HasEditControl returns a boolean if a field has been set.
func (o *Tweet) HasEditControl() bool {
	if o != nil && !IsNil(o.EditControl) {
		return true
	}

	return false
}

// SetEditControl gets a reference to the given TweetEditControl and assigns it to the EditControl field.
func (o *Tweet) SetEditControl(v TweetEditControl) {
	o.EditControl = &v
}

// GetEditPrespective returns the EditPrespective field value if set, zero value otherwise.
func (o *Tweet) GetEditPrespective() TweetEditPrespective {
	if o == nil || IsNil(o.EditPrespective) {
		var ret TweetEditPrespective
		return ret
	}
	return *o.EditPrespective
}

// GetEditPrespectiveOk returns a tuple with the EditPrespective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetEditPrespectiveOk() (*TweetEditPrespective, bool) {
	if o == nil || IsNil(o.EditPrespective) {
		return nil, false
	}
	return o.EditPrespective, true
}

// HasEditPrespective returns a boolean if a field has been set.
func (o *Tweet) HasEditPrespective() bool {
	if o != nil && !IsNil(o.EditPrespective) {
		return true
	}

	return false
}

// SetEditPrespective gets a reference to the given TweetEditPrespective and assigns it to the EditPrespective field.
func (o *Tweet) SetEditPrespective(v TweetEditPrespective) {
	o.EditPrespective = &v
}

// GetHasBirdwatchNotes returns the HasBirdwatchNotes field value if set, zero value otherwise.
func (o *Tweet) GetHasBirdwatchNotes() bool {
	if o == nil || IsNil(o.HasBirdwatchNotes) {
		var ret bool
		return ret
	}
	return *o.HasBirdwatchNotes
}

// GetHasBirdwatchNotesOk returns a tuple with the HasBirdwatchNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetHasBirdwatchNotesOk() (*bool, bool) {
	if o == nil || IsNil(o.HasBirdwatchNotes) {
		return nil, false
	}
	return o.HasBirdwatchNotes, true
}

// HasHasBirdwatchNotes returns a boolean if a field has been set.
func (o *Tweet) HasHasBirdwatchNotes() bool {
	if o != nil && !IsNil(o.HasBirdwatchNotes) {
		return true
	}

	return false
}

// SetHasBirdwatchNotes gets a reference to the given bool and assigns it to the HasBirdwatchNotes field.
func (o *Tweet) SetHasBirdwatchNotes(v bool) {
	o.HasBirdwatchNotes = &v
}

// GetIsTranslatable returns the IsTranslatable field value if set, zero value otherwise.
func (o *Tweet) GetIsTranslatable() bool {
	if o == nil || IsNil(o.IsTranslatable) {
		var ret bool
		return ret
	}
	return *o.IsTranslatable
}

// GetIsTranslatableOk returns a tuple with the IsTranslatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetIsTranslatableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTranslatable) {
		return nil, false
	}
	return o.IsTranslatable, true
}

// HasIsTranslatable returns a boolean if a field has been set.
func (o *Tweet) HasIsTranslatable() bool {
	if o != nil && !IsNil(o.IsTranslatable) {
		return true
	}

	return false
}

// SetIsTranslatable gets a reference to the given bool and assigns it to the IsTranslatable field.
func (o *Tweet) SetIsTranslatable(v bool) {
	o.IsTranslatable = &v
}

// GetLegacy returns the Legacy field value if set, zero value otherwise.
func (o *Tweet) GetLegacy() TweetLegacy {
	if o == nil || IsNil(o.Legacy) {
		var ret TweetLegacy
		return ret
	}
	return *o.Legacy
}

// GetLegacyOk returns a tuple with the Legacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetLegacyOk() (*TweetLegacy, bool) {
	if o == nil || IsNil(o.Legacy) {
		return nil, false
	}
	return o.Legacy, true
}

// HasLegacy returns a boolean if a field has been set.
func (o *Tweet) HasLegacy() bool {
	if o != nil && !IsNil(o.Legacy) {
		return true
	}

	return false
}

// SetLegacy gets a reference to the given TweetLegacy and assigns it to the Legacy field.
func (o *Tweet) SetLegacy(v TweetLegacy) {
	o.Legacy = &v
}

// GetNoteTweet returns the NoteTweet field value if set, zero value otherwise.
func (o *Tweet) GetNoteTweet() NoteTweet {
	if o == nil || IsNil(o.NoteTweet) {
		var ret NoteTweet
		return ret
	}
	return *o.NoteTweet
}

// GetNoteTweetOk returns a tuple with the NoteTweet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetNoteTweetOk() (*NoteTweet, bool) {
	if o == nil || IsNil(o.NoteTweet) {
		return nil, false
	}
	return o.NoteTweet, true
}

// HasNoteTweet returns a boolean if a field has been set.
func (o *Tweet) HasNoteTweet() bool {
	if o != nil && !IsNil(o.NoteTweet) {
		return true
	}

	return false
}

// SetNoteTweet gets a reference to the given NoteTweet and assigns it to the NoteTweet field.
func (o *Tweet) SetNoteTweet(v NoteTweet) {
	o.NoteTweet = &v
}

// GetPreviousCounts returns the PreviousCounts field value if set, zero value otherwise.
func (o *Tweet) GetPreviousCounts() TweetPreviousCounts {
	if o == nil || IsNil(o.PreviousCounts) {
		var ret TweetPreviousCounts
		return ret
	}
	return *o.PreviousCounts
}

// GetPreviousCountsOk returns a tuple with the PreviousCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetPreviousCountsOk() (*TweetPreviousCounts, bool) {
	if o == nil || IsNil(o.PreviousCounts) {
		return nil, false
	}
	return o.PreviousCounts, true
}

// HasPreviousCounts returns a boolean if a field has been set.
func (o *Tweet) HasPreviousCounts() bool {
	if o != nil && !IsNil(o.PreviousCounts) {
		return true
	}

	return false
}

// SetPreviousCounts gets a reference to the given TweetPreviousCounts and assigns it to the PreviousCounts field.
func (o *Tweet) SetPreviousCounts(v TweetPreviousCounts) {
	o.PreviousCounts = &v
}

// GetQuickPromoteEligibility returns the QuickPromoteEligibility field value if set, zero value otherwise.
func (o *Tweet) GetQuickPromoteEligibility() map[string]interface{} {
	if o == nil || IsNil(o.QuickPromoteEligibility) {
		var ret map[string]interface{}
		return ret
	}
	return o.QuickPromoteEligibility
}

// GetQuickPromoteEligibilityOk returns a tuple with the QuickPromoteEligibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetQuickPromoteEligibilityOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.QuickPromoteEligibility) {
		return map[string]interface{}{}, false
	}
	return o.QuickPromoteEligibility, true
}

// HasQuickPromoteEligibility returns a boolean if a field has been set.
func (o *Tweet) HasQuickPromoteEligibility() bool {
	if o != nil && !IsNil(o.QuickPromoteEligibility) {
		return true
	}

	return false
}

// SetQuickPromoteEligibility gets a reference to the given map[string]interface{} and assigns it to the QuickPromoteEligibility field.
func (o *Tweet) SetQuickPromoteEligibility(v map[string]interface{}) {
	o.QuickPromoteEligibility = v
}

// GetQuotedRefResult returns the QuotedRefResult field value if set, zero value otherwise.
func (o *Tweet) GetQuotedRefResult() QuotedRefResult {
	if o == nil || IsNil(o.QuotedRefResult) {
		var ret QuotedRefResult
		return ret
	}
	return *o.QuotedRefResult
}

// GetQuotedRefResultOk returns a tuple with the QuotedRefResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetQuotedRefResultOk() (*QuotedRefResult, bool) {
	if o == nil || IsNil(o.QuotedRefResult) {
		return nil, false
	}
	return o.QuotedRefResult, true
}

// HasQuotedRefResult returns a boolean if a field has been set.
func (o *Tweet) HasQuotedRefResult() bool {
	if o != nil && !IsNil(o.QuotedRefResult) {
		return true
	}

	return false
}

// SetQuotedRefResult gets a reference to the given QuotedRefResult and assigns it to the QuotedRefResult field.
func (o *Tweet) SetQuotedRefResult(v QuotedRefResult) {
	o.QuotedRefResult = &v
}

// GetQuotedStatusResult returns the QuotedStatusResult field value if set, zero value otherwise.
func (o *Tweet) GetQuotedStatusResult() ItemResult {
	if o == nil || IsNil(o.QuotedStatusResult) {
		var ret ItemResult
		return ret
	}
	return *o.QuotedStatusResult
}

// GetQuotedStatusResultOk returns a tuple with the QuotedStatusResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetQuotedStatusResultOk() (*ItemResult, bool) {
	if o == nil || IsNil(o.QuotedStatusResult) {
		return nil, false
	}
	return o.QuotedStatusResult, true
}

// HasQuotedStatusResult returns a boolean if a field has been set.
func (o *Tweet) HasQuotedStatusResult() bool {
	if o != nil && !IsNil(o.QuotedStatusResult) {
		return true
	}

	return false
}

// SetQuotedStatusResult gets a reference to the given ItemResult and assigns it to the QuotedStatusResult field.
func (o *Tweet) SetQuotedStatusResult(v ItemResult) {
	o.QuotedStatusResult = &v
}

// GetRestId returns the RestId field value
func (o *Tweet) GetRestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RestId
}

// GetRestIdOk returns a tuple with the RestId field value
// and a boolean to check if the value has been set.
func (o *Tweet) GetRestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestId, true
}

// SetRestId sets field value
func (o *Tweet) SetRestId(v string) {
	o.RestId = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Tweet) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Tweet) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Tweet) SetSource(v string) {
	o.Source = &v
}

// GetSuperFollowsReplyUserResult returns the SuperFollowsReplyUserResult field value if set, zero value otherwise.
func (o *Tweet) GetSuperFollowsReplyUserResult() SuperFollowsReplyUserResult {
	if o == nil || IsNil(o.SuperFollowsReplyUserResult) {
		var ret SuperFollowsReplyUserResult
		return ret
	}
	return *o.SuperFollowsReplyUserResult
}

// GetSuperFollowsReplyUserResultOk returns a tuple with the SuperFollowsReplyUserResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetSuperFollowsReplyUserResultOk() (*SuperFollowsReplyUserResult, bool) {
	if o == nil || IsNil(o.SuperFollowsReplyUserResult) {
		return nil, false
	}
	return o.SuperFollowsReplyUserResult, true
}

// HasSuperFollowsReplyUserResult returns a boolean if a field has been set.
func (o *Tweet) HasSuperFollowsReplyUserResult() bool {
	if o != nil && !IsNil(o.SuperFollowsReplyUserResult) {
		return true
	}

	return false
}

// SetSuperFollowsReplyUserResult gets a reference to the given SuperFollowsReplyUserResult and assigns it to the SuperFollowsReplyUserResult field.
func (o *Tweet) SetSuperFollowsReplyUserResult(v SuperFollowsReplyUserResult) {
	o.SuperFollowsReplyUserResult = &v
}

// GetUnifiedCard returns the UnifiedCard field value if set, zero value otherwise.
func (o *Tweet) GetUnifiedCard() UnifiedCard {
	if o == nil || IsNil(o.UnifiedCard) {
		var ret UnifiedCard
		return ret
	}
	return *o.UnifiedCard
}

// GetUnifiedCardOk returns a tuple with the UnifiedCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetUnifiedCardOk() (*UnifiedCard, bool) {
	if o == nil || IsNil(o.UnifiedCard) {
		return nil, false
	}
	return o.UnifiedCard, true
}

// HasUnifiedCard returns a boolean if a field has been set.
func (o *Tweet) HasUnifiedCard() bool {
	if o != nil && !IsNil(o.UnifiedCard) {
		return true
	}

	return false
}

// SetUnifiedCard gets a reference to the given UnifiedCard and assigns it to the UnifiedCard field.
func (o *Tweet) SetUnifiedCard(v UnifiedCard) {
	o.UnifiedCard = &v
}

// GetUnmentionData returns the UnmentionData field value if set, zero value otherwise.
func (o *Tweet) GetUnmentionData() map[string]interface{} {
	if o == nil || IsNil(o.UnmentionData) {
		var ret map[string]interface{}
		return ret
	}
	return o.UnmentionData
}

// GetUnmentionDataOk returns a tuple with the UnmentionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetUnmentionDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.UnmentionData) {
		return map[string]interface{}{}, false
	}
	return o.UnmentionData, true
}

// HasUnmentionData returns a boolean if a field has been set.
func (o *Tweet) HasUnmentionData() bool {
	if o != nil && !IsNil(o.UnmentionData) {
		return true
	}

	return false
}

// SetUnmentionData gets a reference to the given map[string]interface{} and assigns it to the UnmentionData field.
func (o *Tweet) SetUnmentionData(v map[string]interface{}) {
	o.UnmentionData = v
}

// GetViews returns the Views field value if set, zero value otherwise.
func (o *Tweet) GetViews() TweetView {
	if o == nil || IsNil(o.Views) {
		var ret TweetView
		return ret
	}
	return *o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tweet) GetViewsOk() (*TweetView, bool) {
	if o == nil || IsNil(o.Views) {
		return nil, false
	}
	return o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *Tweet) HasViews() bool {
	if o != nil && !IsNil(o.Views) {
		return true
	}

	return false
}

// SetViews gets a reference to the given TweetView and assigns it to the Views field.
func (o *Tweet) SetViews(v TweetView) {
	o.Views = &v
}

func (o Tweet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tweet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Typename) {
		toSerialize["__typename"] = o.Typename
	}
	if !IsNil(o.Article) {
		toSerialize["article"] = o.Article
	}
	if !IsNil(o.AuthorCommunityRelationship) {
		toSerialize["author_community_relationship"] = o.AuthorCommunityRelationship
	}
	if !IsNil(o.BirdwatchPivot) {
		toSerialize["birdwatch_pivot"] = o.BirdwatchPivot
	}
	if !IsNil(o.Card) {
		toSerialize["card"] = o.Card
	}
	if !IsNil(o.CommunityRelationship) {
		toSerialize["community_relationship"] = o.CommunityRelationship
	}
	if !IsNil(o.CommunityResults) {
		toSerialize["community_results"] = o.CommunityResults
	}
	if !IsNil(o.Core) {
		toSerialize["core"] = o.Core
	}
	if !IsNil(o.EditControl) {
		toSerialize["edit_control"] = o.EditControl
	}
	if !IsNil(o.EditPrespective) {
		toSerialize["edit_prespective"] = o.EditPrespective
	}
	if !IsNil(o.HasBirdwatchNotes) {
		toSerialize["has_birdwatch_notes"] = o.HasBirdwatchNotes
	}
	if !IsNil(o.IsTranslatable) {
		toSerialize["is_translatable"] = o.IsTranslatable
	}
	if !IsNil(o.Legacy) {
		toSerialize["legacy"] = o.Legacy
	}
	if !IsNil(o.NoteTweet) {
		toSerialize["note_tweet"] = o.NoteTweet
	}
	if !IsNil(o.PreviousCounts) {
		toSerialize["previous_counts"] = o.PreviousCounts
	}
	if !IsNil(o.QuickPromoteEligibility) {
		toSerialize["quick_promote_eligibility"] = o.QuickPromoteEligibility
	}
	if !IsNil(o.QuotedRefResult) {
		toSerialize["quotedRefResult"] = o.QuotedRefResult
	}
	if !IsNil(o.QuotedStatusResult) {
		toSerialize["quoted_status_result"] = o.QuotedStatusResult
	}
	toSerialize["rest_id"] = o.RestId
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.SuperFollowsReplyUserResult) {
		toSerialize["superFollowsReplyUserResult"] = o.SuperFollowsReplyUserResult
	}
	if !IsNil(o.UnifiedCard) {
		toSerialize["unified_card"] = o.UnifiedCard
	}
	if !IsNil(o.UnmentionData) {
		toSerialize["unmention_data"] = o.UnmentionData
	}
	if !IsNil(o.Views) {
		toSerialize["views"] = o.Views
	}
	return toSerialize, nil
}

func (o *Tweet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rest_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTweet := _Tweet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTweet)

	if err != nil {
		return err
	}

	*o = Tweet(varTweet)

	return err
}

type NullableTweet struct {
	value *Tweet
	isSet bool
}

func (v NullableTweet) Get() *Tweet {
	return v.value
}

func (v *NullableTweet) Set(val *Tweet) {
	v.value = val
	v.isSet = true
}

func (v NullableTweet) IsSet() bool {
	return v.isSet
}

func (v *NullableTweet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTweet(val *Tweet) *NullableTweet {
	return &NullableTweet{value: val, isSet: true}
}

func (v NullableTweet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTweet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
