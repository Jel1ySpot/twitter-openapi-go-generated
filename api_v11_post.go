/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// V11PostAPIService V11PostAPI service
type V11PostAPIService service

type ApiPostCreateFriendshipsRequest struct {
	ctx context.Context
	ApiService *V11PostAPIService
	includeBlockedBy *int32
	includeBlocking *int32
	includeCanDm *int32
	includeCanMediaTag *int32
	includeExtHasNftAvatar *int32
	includeExtIsBlueVerified *int32
	includeExtProfileImageShape *int32
	includeExtVerifiedType *int32
	includeFollowedBy *int32
	includeMuteEdge *int32
	includeProfileInterstitialType *int32
	includeWantRetweets *int32
	skipStatus *int32
	userId *string
}

func (r ApiPostCreateFriendshipsRequest) IncludeBlockedBy(includeBlockedBy int32) ApiPostCreateFriendshipsRequest {
	r.includeBlockedBy = &includeBlockedBy
	return r
}

func (r ApiPostCreateFriendshipsRequest) IncludeBlocking(includeBlocking int32) ApiPostCreateFriendshipsRequest {
	r.includeBlocking = &includeBlocking
	return r
}

func (r ApiPostCreateFriendshipsRequest) IncludeCanDm(includeCanDm int32) ApiPostCreateFriendshipsRequest {
	r.includeCanDm = &includeCanDm
	return r
}

func (r ApiPostCreateFriendshipsRequest) IncludeCanMediaTag(includeCanMediaTag int32) ApiPostCreateFriendshipsRequest {
	r.includeCanMediaTag = &includeCanMediaTag
	return r
}

func (r ApiPostCreateFriendshipsRequest) IncludeExtHasNftAvatar(includeExtHasNftAvatar int32) ApiPostCreateFriendshipsRequest {
	r.includeExtHasNftAvatar = &includeExtHasNftAvatar
	return r
}

func (r ApiPostCreateFriendshipsRequest) IncludeExtIsBlueVerified(includeExtIsBlueVerified int32) ApiPostCreateFriendshipsRequest {
	r.includeExtIsBlueVerified = &includeExtIsBlueVerified
	return r
}

func (r ApiPostCreateFriendshipsRequest) IncludeExtProfileImageShape(includeExtProfileImageShape int32) ApiPostCreateFriendshipsRequest {
	r.includeExtProfileImageShape = &includeExtProfileImageShape
	return r
}

func (r ApiPostCreateFriendshipsRequest) IncludeExtVerifiedType(includeExtVerifiedType int32) ApiPostCreateFriendshipsRequest {
	r.includeExtVerifiedType = &includeExtVerifiedType
	return r
}

func (r ApiPostCreateFriendshipsRequest) IncludeFollowedBy(includeFollowedBy int32) ApiPostCreateFriendshipsRequest {
	r.includeFollowedBy = &includeFollowedBy
	return r
}

func (r ApiPostCreateFriendshipsRequest) IncludeMuteEdge(includeMuteEdge int32) ApiPostCreateFriendshipsRequest {
	r.includeMuteEdge = &includeMuteEdge
	return r
}

func (r ApiPostCreateFriendshipsRequest) IncludeProfileInterstitialType(includeProfileInterstitialType int32) ApiPostCreateFriendshipsRequest {
	r.includeProfileInterstitialType = &includeProfileInterstitialType
	return r
}

func (r ApiPostCreateFriendshipsRequest) IncludeWantRetweets(includeWantRetweets int32) ApiPostCreateFriendshipsRequest {
	r.includeWantRetweets = &includeWantRetweets
	return r
}

func (r ApiPostCreateFriendshipsRequest) SkipStatus(skipStatus int32) ApiPostCreateFriendshipsRequest {
	r.skipStatus = &skipStatus
	return r
}

func (r ApiPostCreateFriendshipsRequest) UserId(userId string) ApiPostCreateFriendshipsRequest {
	r.userId = &userId
	return r
}

func (r ApiPostCreateFriendshipsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostCreateFriendshipsExecute(r)
}

/*
PostCreateFriendships Method for PostCreateFriendships

post create friendships

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCreateFriendshipsRequest
*/
func (a *V11PostAPIService) PostCreateFriendships(ctx context.Context) ApiPostCreateFriendshipsRequest {
	return ApiPostCreateFriendshipsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *V11PostAPIService) PostCreateFriendshipsExecute(r ApiPostCreateFriendshipsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V11PostAPIService.PostCreateFriendships")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1.1/friendships/create.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.includeBlockedBy == nil {
		return nil, reportError("includeBlockedBy is required and must be specified")
	}
	if r.includeBlocking == nil {
		return nil, reportError("includeBlocking is required and must be specified")
	}
	if r.includeCanDm == nil {
		return nil, reportError("includeCanDm is required and must be specified")
	}
	if r.includeCanMediaTag == nil {
		return nil, reportError("includeCanMediaTag is required and must be specified")
	}
	if r.includeExtHasNftAvatar == nil {
		return nil, reportError("includeExtHasNftAvatar is required and must be specified")
	}
	if r.includeExtIsBlueVerified == nil {
		return nil, reportError("includeExtIsBlueVerified is required and must be specified")
	}
	if r.includeExtProfileImageShape == nil {
		return nil, reportError("includeExtProfileImageShape is required and must be specified")
	}
	if r.includeExtVerifiedType == nil {
		return nil, reportError("includeExtVerifiedType is required and must be specified")
	}
	if r.includeFollowedBy == nil {
		return nil, reportError("includeFollowedBy is required and must be specified")
	}
	if r.includeMuteEdge == nil {
		return nil, reportError("includeMuteEdge is required and must be specified")
	}
	if r.includeProfileInterstitialType == nil {
		return nil, reportError("includeProfileInterstitialType is required and must be specified")
	}
	if r.includeWantRetweets == nil {
		return nil, reportError("includeWantRetweets is required and must be specified")
	}
	if r.skipStatus == nil {
		return nil, reportError("skipStatus is required and must be specified")
	}
	if r.userId == nil {
		return nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "include_blocked_by", r.includeBlockedBy, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_blocking", r.includeBlocking, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_can_dm", r.includeCanDm, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_can_media_tag", r.includeCanMediaTag, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_ext_has_nft_avatar", r.includeExtHasNftAvatar, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_ext_is_blue_verified", r.includeExtIsBlueVerified, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_ext_profile_image_shape", r.includeExtProfileImageShape, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_ext_verified_type", r.includeExtVerifiedType, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_followed_by", r.includeFollowedBy, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_mute_edge", r.includeMuteEdge, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_profile_interstitial_type", r.includeProfileInterstitialType, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_want_retweets", r.includeWantRetweets, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "skip_status", r.skipStatus, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "user_id", r.userId, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Accept"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Accept"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ClientLanguage"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-twitter-client-language"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Referer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Referer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["SecFetchDest"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Sec-Fetch-Dest"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["SecChUaPlatform"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Sec-Ch-Ua-Platform"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["SecFetchMode"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Sec-Fetch-Mode"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CsrfToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-csrf-token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ClientUuid"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-client-uuid"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["GuestToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-guest-token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["SecChUa"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Sec-Ch-Ua"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ClientTransactionId"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-client-transaction-id"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ActiveUser"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-twitter-active-user"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["UserAgent"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["user-agent"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["AcceptLanguage"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Accept-Language"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["SecFetchSite"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Sec-Fetch-Site"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["AuthType"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-twitter-auth-type"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["SecChUaMobile"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Sec-Ch-Ua-Mobile"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["AcceptEncoding"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Accept-Encoding"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostDestroyFriendshipsRequest struct {
	ctx context.Context
	ApiService *V11PostAPIService
	includeBlockedBy *int32
	includeBlocking *int32
	includeCanDm *int32
	includeCanMediaTag *int32
	includeExtHasNftAvatar *int32
	includeExtIsBlueVerified *int32
	includeExtProfileImageShape *int32
	includeExtVerifiedType *int32
	includeFollowedBy *int32
	includeMuteEdge *int32
	includeProfileInterstitialType *int32
	includeWantRetweets *int32
	skipStatus *int32
	userId *string
}

func (r ApiPostDestroyFriendshipsRequest) IncludeBlockedBy(includeBlockedBy int32) ApiPostDestroyFriendshipsRequest {
	r.includeBlockedBy = &includeBlockedBy
	return r
}

func (r ApiPostDestroyFriendshipsRequest) IncludeBlocking(includeBlocking int32) ApiPostDestroyFriendshipsRequest {
	r.includeBlocking = &includeBlocking
	return r
}

func (r ApiPostDestroyFriendshipsRequest) IncludeCanDm(includeCanDm int32) ApiPostDestroyFriendshipsRequest {
	r.includeCanDm = &includeCanDm
	return r
}

func (r ApiPostDestroyFriendshipsRequest) IncludeCanMediaTag(includeCanMediaTag int32) ApiPostDestroyFriendshipsRequest {
	r.includeCanMediaTag = &includeCanMediaTag
	return r
}

func (r ApiPostDestroyFriendshipsRequest) IncludeExtHasNftAvatar(includeExtHasNftAvatar int32) ApiPostDestroyFriendshipsRequest {
	r.includeExtHasNftAvatar = &includeExtHasNftAvatar
	return r
}

func (r ApiPostDestroyFriendshipsRequest) IncludeExtIsBlueVerified(includeExtIsBlueVerified int32) ApiPostDestroyFriendshipsRequest {
	r.includeExtIsBlueVerified = &includeExtIsBlueVerified
	return r
}

func (r ApiPostDestroyFriendshipsRequest) IncludeExtProfileImageShape(includeExtProfileImageShape int32) ApiPostDestroyFriendshipsRequest {
	r.includeExtProfileImageShape = &includeExtProfileImageShape
	return r
}

func (r ApiPostDestroyFriendshipsRequest) IncludeExtVerifiedType(includeExtVerifiedType int32) ApiPostDestroyFriendshipsRequest {
	r.includeExtVerifiedType = &includeExtVerifiedType
	return r
}

func (r ApiPostDestroyFriendshipsRequest) IncludeFollowedBy(includeFollowedBy int32) ApiPostDestroyFriendshipsRequest {
	r.includeFollowedBy = &includeFollowedBy
	return r
}

func (r ApiPostDestroyFriendshipsRequest) IncludeMuteEdge(includeMuteEdge int32) ApiPostDestroyFriendshipsRequest {
	r.includeMuteEdge = &includeMuteEdge
	return r
}

func (r ApiPostDestroyFriendshipsRequest) IncludeProfileInterstitialType(includeProfileInterstitialType int32) ApiPostDestroyFriendshipsRequest {
	r.includeProfileInterstitialType = &includeProfileInterstitialType
	return r
}

func (r ApiPostDestroyFriendshipsRequest) IncludeWantRetweets(includeWantRetweets int32) ApiPostDestroyFriendshipsRequest {
	r.includeWantRetweets = &includeWantRetweets
	return r
}

func (r ApiPostDestroyFriendshipsRequest) SkipStatus(skipStatus int32) ApiPostDestroyFriendshipsRequest {
	r.skipStatus = &skipStatus
	return r
}

func (r ApiPostDestroyFriendshipsRequest) UserId(userId string) ApiPostDestroyFriendshipsRequest {
	r.userId = &userId
	return r
}

func (r ApiPostDestroyFriendshipsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostDestroyFriendshipsExecute(r)
}

/*
PostDestroyFriendships Method for PostDestroyFriendships

post destroy friendships

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostDestroyFriendshipsRequest
*/
func (a *V11PostAPIService) PostDestroyFriendships(ctx context.Context) ApiPostDestroyFriendshipsRequest {
	return ApiPostDestroyFriendshipsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *V11PostAPIService) PostDestroyFriendshipsExecute(r ApiPostDestroyFriendshipsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V11PostAPIService.PostDestroyFriendships")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1.1/friendships/destroy.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.includeBlockedBy == nil {
		return nil, reportError("includeBlockedBy is required and must be specified")
	}
	if r.includeBlocking == nil {
		return nil, reportError("includeBlocking is required and must be specified")
	}
	if r.includeCanDm == nil {
		return nil, reportError("includeCanDm is required and must be specified")
	}
	if r.includeCanMediaTag == nil {
		return nil, reportError("includeCanMediaTag is required and must be specified")
	}
	if r.includeExtHasNftAvatar == nil {
		return nil, reportError("includeExtHasNftAvatar is required and must be specified")
	}
	if r.includeExtIsBlueVerified == nil {
		return nil, reportError("includeExtIsBlueVerified is required and must be specified")
	}
	if r.includeExtProfileImageShape == nil {
		return nil, reportError("includeExtProfileImageShape is required and must be specified")
	}
	if r.includeExtVerifiedType == nil {
		return nil, reportError("includeExtVerifiedType is required and must be specified")
	}
	if r.includeFollowedBy == nil {
		return nil, reportError("includeFollowedBy is required and must be specified")
	}
	if r.includeMuteEdge == nil {
		return nil, reportError("includeMuteEdge is required and must be specified")
	}
	if r.includeProfileInterstitialType == nil {
		return nil, reportError("includeProfileInterstitialType is required and must be specified")
	}
	if r.includeWantRetweets == nil {
		return nil, reportError("includeWantRetweets is required and must be specified")
	}
	if r.skipStatus == nil {
		return nil, reportError("skipStatus is required and must be specified")
	}
	if r.userId == nil {
		return nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "include_blocked_by", r.includeBlockedBy, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_blocking", r.includeBlocking, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_can_dm", r.includeCanDm, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_can_media_tag", r.includeCanMediaTag, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_ext_has_nft_avatar", r.includeExtHasNftAvatar, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_ext_is_blue_verified", r.includeExtIsBlueVerified, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_ext_profile_image_shape", r.includeExtProfileImageShape, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_ext_verified_type", r.includeExtVerifiedType, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_followed_by", r.includeFollowedBy, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_mute_edge", r.includeMuteEdge, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_profile_interstitial_type", r.includeProfileInterstitialType, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "include_want_retweets", r.includeWantRetweets, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "skip_status", r.skipStatus, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "user_id", r.userId, "", "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Accept"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Accept"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ClientLanguage"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-twitter-client-language"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Referer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Referer"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["SecFetchDest"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Sec-Fetch-Dest"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["SecChUaPlatform"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Sec-Ch-Ua-Platform"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["SecFetchMode"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Sec-Fetch-Mode"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["CsrfToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-csrf-token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ClientUuid"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-client-uuid"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["GuestToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-guest-token"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["SecChUa"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Sec-Ch-Ua"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ClientTransactionId"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-client-transaction-id"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ActiveUser"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-twitter-active-user"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["UserAgent"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["user-agent"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["AcceptLanguage"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Accept-Language"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["SecFetchSite"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Sec-Fetch-Site"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["AuthType"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-twitter-auth-type"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["SecChUaMobile"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Sec-Ch-Ua-Mobile"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["AcceptEncoding"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Accept-Encoding"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
