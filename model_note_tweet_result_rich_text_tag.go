/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NoteTweetResultRichTextTag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoteTweetResultRichTextTag{}

// NoteTweetResultRichTextTag struct for NoteTweetResultRichTextTag
type NoteTweetResultRichTextTag struct {
	FromIndex     int32    `json:"from_index"`
	RichtextTypes []string `json:"richtext_types"`
	ToIndex       int32    `json:"to_index"`
}

type _NoteTweetResultRichTextTag NoteTweetResultRichTextTag

// NewNoteTweetResultRichTextTag instantiates a new NoteTweetResultRichTextTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteTweetResultRichTextTag(fromIndex int32, richtextTypes []string, toIndex int32) *NoteTweetResultRichTextTag {
	this := NoteTweetResultRichTextTag{}
	this.FromIndex = fromIndex
	this.RichtextTypes = richtextTypes
	this.ToIndex = toIndex
	return &this
}

// NewNoteTweetResultRichTextTagWithDefaults instantiates a new NoteTweetResultRichTextTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteTweetResultRichTextTagWithDefaults() *NoteTweetResultRichTextTag {
	this := NoteTweetResultRichTextTag{}
	return &this
}

// GetFromIndex returns the FromIndex field value
func (o *NoteTweetResultRichTextTag) GetFromIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FromIndex
}

// GetFromIndexOk returns a tuple with the FromIndex field value
// and a boolean to check if the value has been set.
func (o *NoteTweetResultRichTextTag) GetFromIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromIndex, true
}

// SetFromIndex sets field value
func (o *NoteTweetResultRichTextTag) SetFromIndex(v int32) {
	o.FromIndex = v
}

// GetRichtextTypes returns the RichtextTypes field value
func (o *NoteTweetResultRichTextTag) GetRichtextTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RichtextTypes
}

// GetRichtextTypesOk returns a tuple with the RichtextTypes field value
// and a boolean to check if the value has been set.
func (o *NoteTweetResultRichTextTag) GetRichtextTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RichtextTypes, true
}

// SetRichtextTypes sets field value
func (o *NoteTweetResultRichTextTag) SetRichtextTypes(v []string) {
	o.RichtextTypes = v
}

// GetToIndex returns the ToIndex field value
func (o *NoteTweetResultRichTextTag) GetToIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ToIndex
}

// GetToIndexOk returns a tuple with the ToIndex field value
// and a boolean to check if the value has been set.
func (o *NoteTweetResultRichTextTag) GetToIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToIndex, true
}

// SetToIndex sets field value
func (o *NoteTweetResultRichTextTag) SetToIndex(v int32) {
	o.ToIndex = v
}

func (o NoteTweetResultRichTextTag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoteTweetResultRichTextTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from_index"] = o.FromIndex
	toSerialize["richtext_types"] = o.RichtextTypes
	toSerialize["to_index"] = o.ToIndex
	return toSerialize, nil
}

func (o *NoteTweetResultRichTextTag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from_index",
		"richtext_types",
		"to_index",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNoteTweetResultRichTextTag := _NoteTweetResultRichTextTag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNoteTweetResultRichTextTag)

	if err != nil {
		return err
	}

	*o = NoteTweetResultRichTextTag(varNoteTweetResultRichTextTag)

	return err
}

type NullableNoteTweetResultRichTextTag struct {
	value *NoteTweetResultRichTextTag
	isSet bool
}

func (v NullableNoteTweetResultRichTextTag) Get() *NoteTweetResultRichTextTag {
	return v.value
}

func (v *NullableNoteTweetResultRichTextTag) Set(val *NoteTweetResultRichTextTag) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteTweetResultRichTextTag) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteTweetResultRichTextTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteTweetResultRichTextTag(val *NoteTweetResultRichTextTag) *NullableNoteTweetResultRichTextTag {
	return &NullableNoteTweetResultRichTextTag{value: val, isSet: true}
}

func (v NullableNoteTweetResultRichTextTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteTweetResultRichTextTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
