/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TimelineUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimelineUser{}

// TimelineUser struct for TimelineUser
type TimelineUser struct {
	Typename        TypeName            `json:"__typename"`
	ItemType        ContentItemType     `json:"itemType"`
	SocialContext   *SocialContextUnion `json:"socialContext,omitempty"`
	UserDisplayType string              `json:"userDisplayType"`
	UserResults     UserResults         `json:"user_results"`
}

type _TimelineUser TimelineUser

// NewTimelineUser instantiates a new TimelineUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelineUser(typename TypeName, itemType ContentItemType, userDisplayType string, userResults UserResults) *TimelineUser {
	this := TimelineUser{}
	this.Typename = typename
	this.ItemType = itemType
	this.UserDisplayType = userDisplayType
	this.UserResults = userResults
	return &this
}

// NewTimelineUserWithDefaults instantiates a new TimelineUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineUserWithDefaults() *TimelineUser {
	this := TimelineUser{}
	return &this
}

// GetTypename returns the Typename field value
func (o *TimelineUser) GetTypename() TypeName {
	if o == nil {
		var ret TypeName
		return ret
	}

	return o.Typename
}

// GetTypenameOk returns a tuple with the Typename field value
// and a boolean to check if the value has been set.
func (o *TimelineUser) GetTypenameOk() (*TypeName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Typename, true
}

// SetTypename sets field value
func (o *TimelineUser) SetTypename(v TypeName) {
	o.Typename = v
}

// GetItemType returns the ItemType field value
func (o *TimelineUser) GetItemType() ContentItemType {
	if o == nil {
		var ret ContentItemType
		return ret
	}

	return o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value
// and a boolean to check if the value has been set.
func (o *TimelineUser) GetItemTypeOk() (*ContentItemType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemType, true
}

// SetItemType sets field value
func (o *TimelineUser) SetItemType(v ContentItemType) {
	o.ItemType = v
}

// GetSocialContext returns the SocialContext field value if set, zero value otherwise.
func (o *TimelineUser) GetSocialContext() SocialContextUnion {
	if o == nil || IsNil(o.SocialContext) {
		var ret SocialContextUnion
		return ret
	}
	return *o.SocialContext
}

// GetSocialContextOk returns a tuple with the SocialContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineUser) GetSocialContextOk() (*SocialContextUnion, bool) {
	if o == nil || IsNil(o.SocialContext) {
		return nil, false
	}
	return o.SocialContext, true
}

// HasSocialContext returns a boolean if a field has been set.
func (o *TimelineUser) HasSocialContext() bool {
	if o != nil && !IsNil(o.SocialContext) {
		return true
	}

	return false
}

// SetSocialContext gets a reference to the given SocialContextUnion and assigns it to the SocialContext field.
func (o *TimelineUser) SetSocialContext(v SocialContextUnion) {
	o.SocialContext = &v
}

// GetUserDisplayType returns the UserDisplayType field value
func (o *TimelineUser) GetUserDisplayType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserDisplayType
}

// GetUserDisplayTypeOk returns a tuple with the UserDisplayType field value
// and a boolean to check if the value has been set.
func (o *TimelineUser) GetUserDisplayTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserDisplayType, true
}

// SetUserDisplayType sets field value
func (o *TimelineUser) SetUserDisplayType(v string) {
	o.UserDisplayType = v
}

// GetUserResults returns the UserResults field value
func (o *TimelineUser) GetUserResults() UserResults {
	if o == nil {
		var ret UserResults
		return ret
	}

	return o.UserResults
}

// GetUserResultsOk returns a tuple with the UserResults field value
// and a boolean to check if the value has been set.
func (o *TimelineUser) GetUserResultsOk() (*UserResults, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserResults, true
}

// SetUserResults sets field value
func (o *TimelineUser) SetUserResults(v UserResults) {
	o.UserResults = v
}

func (o TimelineUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimelineUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["__typename"] = o.Typename
	toSerialize["itemType"] = o.ItemType
	if !IsNil(o.SocialContext) {
		toSerialize["socialContext"] = o.SocialContext
	}
	toSerialize["userDisplayType"] = o.UserDisplayType
	toSerialize["user_results"] = o.UserResults
	return toSerialize, nil
}

func (o *TimelineUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"__typename",
		"itemType",
		"userDisplayType",
		"user_results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimelineUser := _TimelineUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimelineUser)

	if err != nil {
		return err
	}

	*o = TimelineUser(varTimelineUser)

	return err
}

type NullableTimelineUser struct {
	value *TimelineUser
	isSet bool
}

func (v NullableTimelineUser) Get() *TimelineUser {
	return v.value
}

func (v *NullableTimelineUser) Set(val *TimelineUser) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineUser) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineUser(val *TimelineUser) *NullableTimelineUser {
	return &NullableTimelineUser{value: val, isSet: true}
}

func (v NullableTimelineUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
