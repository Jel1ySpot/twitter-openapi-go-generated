/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Url type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Url{}

// Url struct for Url
type Url struct {
	DisplayUrl  string  `json:"display_url"`
	ExpandedUrl *string `json:"expanded_url,omitempty"`
	Indices     []int32 `json:"indices"`
	Url         string  `json:"url"`
}

type _Url Url

// NewUrl instantiates a new Url object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrl(displayUrl string, indices []int32, url string) *Url {
	this := Url{}
	this.DisplayUrl = displayUrl
	this.Indices = indices
	this.Url = url
	return &this
}

// NewUrlWithDefaults instantiates a new Url object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrlWithDefaults() *Url {
	this := Url{}
	return &this
}

// GetDisplayUrl returns the DisplayUrl field value
func (o *Url) GetDisplayUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayUrl
}

// GetDisplayUrlOk returns a tuple with the DisplayUrl field value
// and a boolean to check if the value has been set.
func (o *Url) GetDisplayUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayUrl, true
}

// SetDisplayUrl sets field value
func (o *Url) SetDisplayUrl(v string) {
	o.DisplayUrl = v
}

// GetExpandedUrl returns the ExpandedUrl field value if set, zero value otherwise.
func (o *Url) GetExpandedUrl() string {
	if o == nil || IsNil(o.ExpandedUrl) {
		var ret string
		return ret
	}
	return *o.ExpandedUrl
}

// GetExpandedUrlOk returns a tuple with the ExpandedUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Url) GetExpandedUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ExpandedUrl) {
		return nil, false
	}
	return o.ExpandedUrl, true
}

// HasExpandedUrl returns a boolean if a field has been set.
func (o *Url) HasExpandedUrl() bool {
	if o != nil && !IsNil(o.ExpandedUrl) {
		return true
	}

	return false
}

// SetExpandedUrl gets a reference to the given string and assigns it to the ExpandedUrl field.
func (o *Url) SetExpandedUrl(v string) {
	o.ExpandedUrl = &v
}

// GetIndices returns the Indices field value
func (o *Url) GetIndices() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Indices
}

// GetIndicesOk returns a tuple with the Indices field value
// and a boolean to check if the value has been set.
func (o *Url) GetIndicesOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Indices, true
}

// SetIndices sets field value
func (o *Url) SetIndices(v []int32) {
	o.Indices = v
}

// GetUrl returns the Url field value
func (o *Url) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Url) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Url) SetUrl(v string) {
	o.Url = v
}

func (o Url) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Url) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["display_url"] = o.DisplayUrl
	if !IsNil(o.ExpandedUrl) {
		toSerialize["expanded_url"] = o.ExpandedUrl
	}
	toSerialize["indices"] = o.Indices
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *Url) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"display_url",
		"indices",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUrl := _Url{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUrl)

	if err != nil {
		return err
	}

	*o = Url(varUrl)

	return err
}

type NullableUrl struct {
	value *Url
	isSet bool
}

func (v NullableUrl) Get() *Url {
	return v.value
}

func (v *NullableUrl) Set(val *Url) {
	v.value = val
	v.isSet = true
}

func (v NullableUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrl(val *Url) *NullableUrl {
	return &NullableUrl{value: val, isSet: true}
}

func (v NullableUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
