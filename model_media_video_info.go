/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MediaVideoInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaVideoInfo{}

// MediaVideoInfo struct for MediaVideoInfo
type MediaVideoInfo struct {
	AspectRatio []int32 `json:"aspect_ratio"`
	DurationMillis *int32 `json:"duration_millis,omitempty"`
	Variants []MediaVideoInfoVariant `json:"variants"`
}

type _MediaVideoInfo MediaVideoInfo

// NewMediaVideoInfo instantiates a new MediaVideoInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaVideoInfo(aspectRatio []int32, variants []MediaVideoInfoVariant) *MediaVideoInfo {
	this := MediaVideoInfo{}
	this.AspectRatio = aspectRatio
	this.Variants = variants
	return &this
}

// NewMediaVideoInfoWithDefaults instantiates a new MediaVideoInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaVideoInfoWithDefaults() *MediaVideoInfo {
	this := MediaVideoInfo{}
	return &this
}

// GetAspectRatio returns the AspectRatio field value
func (o *MediaVideoInfo) GetAspectRatio() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.AspectRatio
}

// GetAspectRatioOk returns a tuple with the AspectRatio field value
// and a boolean to check if the value has been set.
func (o *MediaVideoInfo) GetAspectRatioOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AspectRatio, true
}

// SetAspectRatio sets field value
func (o *MediaVideoInfo) SetAspectRatio(v []int32) {
	o.AspectRatio = v
}

// GetDurationMillis returns the DurationMillis field value if set, zero value otherwise.
func (o *MediaVideoInfo) GetDurationMillis() int32 {
	if o == nil || IsNil(o.DurationMillis) {
		var ret int32
		return ret
	}
	return *o.DurationMillis
}

// GetDurationMillisOk returns a tuple with the DurationMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaVideoInfo) GetDurationMillisOk() (*int32, bool) {
	if o == nil || IsNil(o.DurationMillis) {
		return nil, false
	}
	return o.DurationMillis, true
}

// HasDurationMillis returns a boolean if a field has been set.
func (o *MediaVideoInfo) HasDurationMillis() bool {
	if o != nil && !IsNil(o.DurationMillis) {
		return true
	}

	return false
}

// SetDurationMillis gets a reference to the given int32 and assigns it to the DurationMillis field.
func (o *MediaVideoInfo) SetDurationMillis(v int32) {
	o.DurationMillis = &v
}

// GetVariants returns the Variants field value
func (o *MediaVideoInfo) GetVariants() []MediaVideoInfoVariant {
	if o == nil {
		var ret []MediaVideoInfoVariant
		return ret
	}

	return o.Variants
}

// GetVariantsOk returns a tuple with the Variants field value
// and a boolean to check if the value has been set.
func (o *MediaVideoInfo) GetVariantsOk() ([]MediaVideoInfoVariant, bool) {
	if o == nil {
		return nil, false
	}
	return o.Variants, true
}

// SetVariants sets field value
func (o *MediaVideoInfo) SetVariants(v []MediaVideoInfoVariant) {
	o.Variants = v
}

func (o MediaVideoInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaVideoInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["aspect_ratio"] = o.AspectRatio
	if !IsNil(o.DurationMillis) {
		toSerialize["duration_millis"] = o.DurationMillis
	}
	toSerialize["variants"] = o.Variants
	return toSerialize, nil
}

func (o *MediaVideoInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"aspect_ratio",
		"variants",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaVideoInfo := _MediaVideoInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaVideoInfo)

	if err != nil {
		return err
	}

	*o = MediaVideoInfo(varMediaVideoInfo)

	return err
}

type NullableMediaVideoInfo struct {
	value *MediaVideoInfo
	isSet bool
}

func (v NullableMediaVideoInfo) Get() *MediaVideoInfo {
	return v.value
}

func (v *NullableMediaVideoInfo) Set(val *MediaVideoInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaVideoInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaVideoInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaVideoInfo(val *MediaVideoInfo) *NullableMediaVideoInfo {
	return &NullableMediaVideoInfo{value: val, isSet: true}
}

func (v NullableMediaVideoInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaVideoInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


