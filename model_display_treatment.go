/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DisplayTreatment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisplayTreatment{}

// DisplayTreatment struct for DisplayTreatment
type DisplayTreatment struct {
	ActionText string `json:"actionText"`
	LabelText *string `json:"labelText,omitempty"`
}

type _DisplayTreatment DisplayTreatment

// NewDisplayTreatment instantiates a new DisplayTreatment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisplayTreatment(actionText string) *DisplayTreatment {
	this := DisplayTreatment{}
	this.ActionText = actionText
	return &this
}

// NewDisplayTreatmentWithDefaults instantiates a new DisplayTreatment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisplayTreatmentWithDefaults() *DisplayTreatment {
	this := DisplayTreatment{}
	return &this
}

// GetActionText returns the ActionText field value
func (o *DisplayTreatment) GetActionText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActionText
}

// GetActionTextOk returns a tuple with the ActionText field value
// and a boolean to check if the value has been set.
func (o *DisplayTreatment) GetActionTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActionText, true
}

// SetActionText sets field value
func (o *DisplayTreatment) SetActionText(v string) {
	o.ActionText = v
}

// GetLabelText returns the LabelText field value if set, zero value otherwise.
func (o *DisplayTreatment) GetLabelText() string {
	if o == nil || IsNil(o.LabelText) {
		var ret string
		return ret
	}
	return *o.LabelText
}

// GetLabelTextOk returns a tuple with the LabelText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayTreatment) GetLabelTextOk() (*string, bool) {
	if o == nil || IsNil(o.LabelText) {
		return nil, false
	}
	return o.LabelText, true
}

// HasLabelText returns a boolean if a field has been set.
func (o *DisplayTreatment) HasLabelText() bool {
	if o != nil && !IsNil(o.LabelText) {
		return true
	}

	return false
}

// SetLabelText gets a reference to the given string and assigns it to the LabelText field.
func (o *DisplayTreatment) SetLabelText(v string) {
	o.LabelText = &v
}

func (o DisplayTreatment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisplayTreatment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["actionText"] = o.ActionText
	if !IsNil(o.LabelText) {
		toSerialize["labelText"] = o.LabelText
	}
	return toSerialize, nil
}

func (o *DisplayTreatment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"actionText",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDisplayTreatment := _DisplayTreatment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDisplayTreatment)

	if err != nil {
		return err
	}

	*o = DisplayTreatment(varDisplayTreatment)

	return err
}

type NullableDisplayTreatment struct {
	value *DisplayTreatment
	isSet bool
}

func (v NullableDisplayTreatment) Get() *DisplayTreatment {
	return v.value
}

func (v *NullableDisplayTreatment) Set(val *DisplayTreatment) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayTreatment) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayTreatment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayTreatment(val *DisplayTreatment) *NullableDisplayTreatment {
	return &NullableDisplayTreatment{value: val, isSet: true}
}

func (v NullableDisplayTreatment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayTreatment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


