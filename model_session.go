/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Session type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Session{}

// Session struct for Session
type Session struct {
	SsoInitTokens                 map[string]interface{}    `json:"SsoInitTokens,omitempty"`
	CommunitiesActions            CommunitiesActions        `json:"communitiesActions"`
	Country                       string                    `json:"country" validate:"regexp=^[A-Z]{2}$"`
	GuestId                       string                    `json:"guestId" validate:"regexp=^[0-9]+$"`
	HasCommunityMemberships       bool                      `json:"hasCommunityMemberships"`
	IsActiveCreator               bool                      `json:"isActiveCreator"`
	IsRestrictedSession           bool                      `json:"isRestrictedSession"`
	IsSuperFollowSubscriber       bool                      `json:"isSuperFollowSubscriber"`
	Language                      string                    `json:"language" validate:"regexp=^[a-z]{2}$"`
	OneFactorLoginEligibility     OneFactorLoginEligibility `json:"oneFactorLoginEligibility"`
	SuperFollowersCount           int32                     `json:"superFollowersCount"`
	SuperFollowsApplicationStatus string                    `json:"superFollowsApplicationStatus"`
	UserFeatures                  UserFeatures              `json:"userFeatures"`
	UserId                        string                    `json:"user_id" validate:"regexp=^[0-9]+$"`
}

type _Session Session

// NewSession instantiates a new Session object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSession(communitiesActions CommunitiesActions, country string, guestId string, hasCommunityMemberships bool, isActiveCreator bool, isRestrictedSession bool, isSuperFollowSubscriber bool, language string, oneFactorLoginEligibility OneFactorLoginEligibility, superFollowersCount int32, superFollowsApplicationStatus string, userFeatures UserFeatures, userId string) *Session {
	this := Session{}
	this.CommunitiesActions = communitiesActions
	this.Country = country
	this.GuestId = guestId
	this.HasCommunityMemberships = hasCommunityMemberships
	this.IsActiveCreator = isActiveCreator
	this.IsRestrictedSession = isRestrictedSession
	this.IsSuperFollowSubscriber = isSuperFollowSubscriber
	this.Language = language
	this.OneFactorLoginEligibility = oneFactorLoginEligibility
	this.SuperFollowersCount = superFollowersCount
	this.SuperFollowsApplicationStatus = superFollowsApplicationStatus
	this.UserFeatures = userFeatures
	this.UserId = userId
	return &this
}

// NewSessionWithDefaults instantiates a new Session object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionWithDefaults() *Session {
	this := Session{}
	return &this
}

// GetSsoInitTokens returns the SsoInitTokens field value if set, zero value otherwise.
func (o *Session) GetSsoInitTokens() map[string]interface{} {
	if o == nil || IsNil(o.SsoInitTokens) {
		var ret map[string]interface{}
		return ret
	}
	return o.SsoInitTokens
}

// GetSsoInitTokensOk returns a tuple with the SsoInitTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetSsoInitTokensOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SsoInitTokens) {
		return map[string]interface{}{}, false
	}
	return o.SsoInitTokens, true
}

// HasSsoInitTokens returns a boolean if a field has been set.
func (o *Session) HasSsoInitTokens() bool {
	if o != nil && !IsNil(o.SsoInitTokens) {
		return true
	}

	return false
}

// SetSsoInitTokens gets a reference to the given map[string]interface{} and assigns it to the SsoInitTokens field.
func (o *Session) SetSsoInitTokens(v map[string]interface{}) {
	o.SsoInitTokens = v
}

// GetCommunitiesActions returns the CommunitiesActions field value
func (o *Session) GetCommunitiesActions() CommunitiesActions {
	if o == nil {
		var ret CommunitiesActions
		return ret
	}

	return o.CommunitiesActions
}

// GetCommunitiesActionsOk returns a tuple with the CommunitiesActions field value
// and a boolean to check if the value has been set.
func (o *Session) GetCommunitiesActionsOk() (*CommunitiesActions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommunitiesActions, true
}

// SetCommunitiesActions sets field value
func (o *Session) SetCommunitiesActions(v CommunitiesActions) {
	o.CommunitiesActions = v
}

// GetCountry returns the Country field value
func (o *Session) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *Session) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *Session) SetCountry(v string) {
	o.Country = v
}

// GetGuestId returns the GuestId field value
func (o *Session) GetGuestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GuestId
}

// GetGuestIdOk returns a tuple with the GuestId field value
// and a boolean to check if the value has been set.
func (o *Session) GetGuestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GuestId, true
}

// SetGuestId sets field value
func (o *Session) SetGuestId(v string) {
	o.GuestId = v
}

// GetHasCommunityMemberships returns the HasCommunityMemberships field value
func (o *Session) GetHasCommunityMemberships() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasCommunityMemberships
}

// GetHasCommunityMembershipsOk returns a tuple with the HasCommunityMemberships field value
// and a boolean to check if the value has been set.
func (o *Session) GetHasCommunityMembershipsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasCommunityMemberships, true
}

// SetHasCommunityMemberships sets field value
func (o *Session) SetHasCommunityMemberships(v bool) {
	o.HasCommunityMemberships = v
}

// GetIsActiveCreator returns the IsActiveCreator field value
func (o *Session) GetIsActiveCreator() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActiveCreator
}

// GetIsActiveCreatorOk returns a tuple with the IsActiveCreator field value
// and a boolean to check if the value has been set.
func (o *Session) GetIsActiveCreatorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActiveCreator, true
}

// SetIsActiveCreator sets field value
func (o *Session) SetIsActiveCreator(v bool) {
	o.IsActiveCreator = v
}

// GetIsRestrictedSession returns the IsRestrictedSession field value
func (o *Session) GetIsRestrictedSession() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRestrictedSession
}

// GetIsRestrictedSessionOk returns a tuple with the IsRestrictedSession field value
// and a boolean to check if the value has been set.
func (o *Session) GetIsRestrictedSessionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsRestrictedSession, true
}

// SetIsRestrictedSession sets field value
func (o *Session) SetIsRestrictedSession(v bool) {
	o.IsRestrictedSession = v
}

// GetIsSuperFollowSubscriber returns the IsSuperFollowSubscriber field value
func (o *Session) GetIsSuperFollowSubscriber() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSuperFollowSubscriber
}

// GetIsSuperFollowSubscriberOk returns a tuple with the IsSuperFollowSubscriber field value
// and a boolean to check if the value has been set.
func (o *Session) GetIsSuperFollowSubscriberOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSuperFollowSubscriber, true
}

// SetIsSuperFollowSubscriber sets field value
func (o *Session) SetIsSuperFollowSubscriber(v bool) {
	o.IsSuperFollowSubscriber = v
}

// GetLanguage returns the Language field value
func (o *Session) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *Session) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *Session) SetLanguage(v string) {
	o.Language = v
}

// GetOneFactorLoginEligibility returns the OneFactorLoginEligibility field value
func (o *Session) GetOneFactorLoginEligibility() OneFactorLoginEligibility {
	if o == nil {
		var ret OneFactorLoginEligibility
		return ret
	}

	return o.OneFactorLoginEligibility
}

// GetOneFactorLoginEligibilityOk returns a tuple with the OneFactorLoginEligibility field value
// and a boolean to check if the value has been set.
func (o *Session) GetOneFactorLoginEligibilityOk() (*OneFactorLoginEligibility, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OneFactorLoginEligibility, true
}

// SetOneFactorLoginEligibility sets field value
func (o *Session) SetOneFactorLoginEligibility(v OneFactorLoginEligibility) {
	o.OneFactorLoginEligibility = v
}

// GetSuperFollowersCount returns the SuperFollowersCount field value
func (o *Session) GetSuperFollowersCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SuperFollowersCount
}

// GetSuperFollowersCountOk returns a tuple with the SuperFollowersCount field value
// and a boolean to check if the value has been set.
func (o *Session) GetSuperFollowersCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuperFollowersCount, true
}

// SetSuperFollowersCount sets field value
func (o *Session) SetSuperFollowersCount(v int32) {
	o.SuperFollowersCount = v
}

// GetSuperFollowsApplicationStatus returns the SuperFollowsApplicationStatus field value
func (o *Session) GetSuperFollowsApplicationStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SuperFollowsApplicationStatus
}

// GetSuperFollowsApplicationStatusOk returns a tuple with the SuperFollowsApplicationStatus field value
// and a boolean to check if the value has been set.
func (o *Session) GetSuperFollowsApplicationStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuperFollowsApplicationStatus, true
}

// SetSuperFollowsApplicationStatus sets field value
func (o *Session) SetSuperFollowsApplicationStatus(v string) {
	o.SuperFollowsApplicationStatus = v
}

// GetUserFeatures returns the UserFeatures field value
func (o *Session) GetUserFeatures() UserFeatures {
	if o == nil {
		var ret UserFeatures
		return ret
	}

	return o.UserFeatures
}

// GetUserFeaturesOk returns a tuple with the UserFeatures field value
// and a boolean to check if the value has been set.
func (o *Session) GetUserFeaturesOk() (*UserFeatures, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserFeatures, true
}

// SetUserFeatures sets field value
func (o *Session) SetUserFeatures(v UserFeatures) {
	o.UserFeatures = v
}

// GetUserId returns the UserId field value
func (o *Session) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Session) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Session) SetUserId(v string) {
	o.UserId = v
}

func (o Session) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Session) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SsoInitTokens) {
		toSerialize["SsoInitTokens"] = o.SsoInitTokens
	}
	toSerialize["communitiesActions"] = o.CommunitiesActions
	toSerialize["country"] = o.Country
	toSerialize["guestId"] = o.GuestId
	toSerialize["hasCommunityMemberships"] = o.HasCommunityMemberships
	toSerialize["isActiveCreator"] = o.IsActiveCreator
	toSerialize["isRestrictedSession"] = o.IsRestrictedSession
	toSerialize["isSuperFollowSubscriber"] = o.IsSuperFollowSubscriber
	toSerialize["language"] = o.Language
	toSerialize["oneFactorLoginEligibility"] = o.OneFactorLoginEligibility
	toSerialize["superFollowersCount"] = o.SuperFollowersCount
	toSerialize["superFollowsApplicationStatus"] = o.SuperFollowsApplicationStatus
	toSerialize["userFeatures"] = o.UserFeatures
	toSerialize["user_id"] = o.UserId
	return toSerialize, nil
}

func (o *Session) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"communitiesActions",
		"country",
		"guestId",
		"hasCommunityMemberships",
		"isActiveCreator",
		"isRestrictedSession",
		"isSuperFollowSubscriber",
		"language",
		"oneFactorLoginEligibility",
		"superFollowersCount",
		"superFollowsApplicationStatus",
		"userFeatures",
		"user_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSession := _Session{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSession)

	if err != nil {
		return err
	}

	*o = Session(varSession)

	return err
}

type NullableSession struct {
	value *Session
	isSet bool
}

func (v NullableSession) Get() *Session {
	return v.value
}

func (v *NullableSession) Set(val *Session) {
	v.value = val
	v.isSet = true
}

func (v NullableSession) IsSet() bool {
	return v.isSet
}

func (v *NullableSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSession(val *Session) *NullableSession {
	return &NullableSession{value: val, isSet: true}
}

func (v NullableSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
