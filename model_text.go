/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Text type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Text{}

// Text struct for Text
type Text struct {
	Entities []TextEntity `json:"entities"`
	Text     string       `json:"text"`
}

type _Text Text

// NewText instantiates a new Text object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewText(entities []TextEntity, text string) *Text {
	this := Text{}
	this.Entities = entities
	this.Text = text
	return &this
}

// NewTextWithDefaults instantiates a new Text object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextWithDefaults() *Text {
	this := Text{}
	return &this
}

// GetEntities returns the Entities field value
func (o *Text) GetEntities() []TextEntity {
	if o == nil {
		var ret []TextEntity
		return ret
	}

	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value
// and a boolean to check if the value has been set.
func (o *Text) GetEntitiesOk() ([]TextEntity, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entities, true
}

// SetEntities sets field value
func (o *Text) SetEntities(v []TextEntity) {
	o.Entities = v
}

// GetText returns the Text field value
func (o *Text) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *Text) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *Text) SetText(v string) {
	o.Text = v
}

func (o Text) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Text) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entities"] = o.Entities
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

func (o *Text) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entities",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varText := _Text{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varText)

	if err != nil {
		return err
	}

	*o = Text(varText)

	return err
}

type NullableText struct {
	value *Text
	isSet bool
}

func (v NullableText) Get() *Text {
	return v.value
}

func (v *NullableText) Set(val *Text) {
	v.value = val
	v.isSet = true
}

func (v NullableText) IsSet() bool {
	return v.isSet
}

func (v *NullableText) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableText(val *Text) *NullableText {
	return &NullableText{value: val, isSet: true}
}

func (v NullableText) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableText) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
