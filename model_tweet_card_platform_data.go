/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TweetCardPlatformData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TweetCardPlatformData{}

// TweetCardPlatformData struct for TweetCardPlatformData
type TweetCardPlatformData struct {
	Platform TweetCardPlatform `json:"platform"`
}

type _TweetCardPlatformData TweetCardPlatformData

// NewTweetCardPlatformData instantiates a new TweetCardPlatformData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTweetCardPlatformData(platform TweetCardPlatform) *TweetCardPlatformData {
	this := TweetCardPlatformData{}
	this.Platform = platform
	return &this
}

// NewTweetCardPlatformDataWithDefaults instantiates a new TweetCardPlatformData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTweetCardPlatformDataWithDefaults() *TweetCardPlatformData {
	this := TweetCardPlatformData{}
	return &this
}

// GetPlatform returns the Platform field value
func (o *TweetCardPlatformData) GetPlatform() TweetCardPlatform {
	if o == nil {
		var ret TweetCardPlatform
		return ret
	}

	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value
// and a boolean to check if the value has been set.
func (o *TweetCardPlatformData) GetPlatformOk() (*TweetCardPlatform, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Platform, true
}

// SetPlatform sets field value
func (o *TweetCardPlatformData) SetPlatform(v TweetCardPlatform) {
	o.Platform = v
}

func (o TweetCardPlatformData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TweetCardPlatformData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["platform"] = o.Platform
	return toSerialize, nil
}

func (o *TweetCardPlatformData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"platform",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTweetCardPlatformData := _TweetCardPlatformData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTweetCardPlatformData)

	if err != nil {
		return err
	}

	*o = TweetCardPlatformData(varTweetCardPlatformData)

	return err
}

type NullableTweetCardPlatformData struct {
	value *TweetCardPlatformData
	isSet bool
}

func (v NullableTweetCardPlatformData) Get() *TweetCardPlatformData {
	return v.value
}

func (v *NullableTweetCardPlatformData) Set(val *TweetCardPlatformData) {
	v.value = val
	v.isSet = true
}

func (v NullableTweetCardPlatformData) IsSet() bool {
	return v.isSet
}

func (v *NullableTweetCardPlatformData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTweetCardPlatformData(val *TweetCardPlatformData) *NullableTweetCardPlatformData {
	return &NullableTweetCardPlatformData{value: val, isSet: true}
}

func (v NullableTweetCardPlatformData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTweetCardPlatformData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


