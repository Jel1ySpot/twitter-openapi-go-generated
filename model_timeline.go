/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Timeline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Timeline{}

// Timeline struct for Timeline
type Timeline struct {
	Instructions []InstructionUnion `json:"instructions"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	ResponseObjects map[string]interface{} `json:"responseObjects,omitempty"`
}

type _Timeline Timeline

// NewTimeline instantiates a new Timeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeline(instructions []InstructionUnion) *Timeline {
	this := Timeline{}
	this.Instructions = instructions
	return &this
}

// NewTimelineWithDefaults instantiates a new Timeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineWithDefaults() *Timeline {
	this := Timeline{}
	return &this
}

// GetInstructions returns the Instructions field value
func (o *Timeline) GetInstructions() []InstructionUnion {
	if o == nil {
		var ret []InstructionUnion
		return ret
	}

	return o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value
// and a boolean to check if the value has been set.
func (o *Timeline) GetInstructionsOk() ([]InstructionUnion, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instructions, true
}

// SetInstructions sets field value
func (o *Timeline) SetInstructions(v []InstructionUnion) {
	o.Instructions = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Timeline) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Timeline) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Timeline) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Timeline) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetResponseObjects returns the ResponseObjects field value if set, zero value otherwise.
func (o *Timeline) GetResponseObjects() map[string]interface{} {
	if o == nil || IsNil(o.ResponseObjects) {
		var ret map[string]interface{}
		return ret
	}
	return o.ResponseObjects
}

// GetResponseObjectsOk returns a tuple with the ResponseObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Timeline) GetResponseObjectsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ResponseObjects) {
		return map[string]interface{}{}, false
	}
	return o.ResponseObjects, true
}

// HasResponseObjects returns a boolean if a field has been set.
func (o *Timeline) HasResponseObjects() bool {
	if o != nil && !IsNil(o.ResponseObjects) {
		return true
	}

	return false
}

// SetResponseObjects gets a reference to the given map[string]interface{} and assigns it to the ResponseObjects field.
func (o *Timeline) SetResponseObjects(v map[string]interface{}) {
	o.ResponseObjects = v
}

func (o Timeline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Timeline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instructions"] = o.Instructions
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.ResponseObjects) {
		toSerialize["responseObjects"] = o.ResponseObjects
	}
	return toSerialize, nil
}

func (o *Timeline) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instructions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeline := _Timeline{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeline)

	if err != nil {
		return err
	}

	*o = Timeline(varTimeline)

	return err
}

type NullableTimeline struct {
	value *Timeline
	isSet bool
}

func (v NullableTimeline) Get() *Timeline {
	return v.value
}

func (v *NullableTimeline) Set(val *Timeline) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeline) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeline(val *Timeline) *NullableTimeline {
	return &NullableTimeline{value: val, isSet: true}
}

func (v NullableTimeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


