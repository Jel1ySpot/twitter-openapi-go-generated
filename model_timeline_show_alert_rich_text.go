/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TimelineShowAlertRichText type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimelineShowAlertRichText{}

// TimelineShowAlertRichText struct for TimelineShowAlertRichText
type TimelineShowAlertRichText struct {
	Entities []map[string]interface{} `json:"entities,omitempty"`
	Text     *string                  `json:"text,omitempty"`
}

// NewTimelineShowAlertRichText instantiates a new TimelineShowAlertRichText object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelineShowAlertRichText() *TimelineShowAlertRichText {
	this := TimelineShowAlertRichText{}
	return &this
}

// NewTimelineShowAlertRichTextWithDefaults instantiates a new TimelineShowAlertRichText object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineShowAlertRichTextWithDefaults() *TimelineShowAlertRichText {
	this := TimelineShowAlertRichText{}
	return &this
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *TimelineShowAlertRichText) GetEntities() []map[string]interface{} {
	if o == nil || IsNil(o.Entities) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineShowAlertRichText) GetEntitiesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Entities) {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *TimelineShowAlertRichText) HasEntities() bool {
	if o != nil && !IsNil(o.Entities) {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []map[string]interface{} and assigns it to the Entities field.
func (o *TimelineShowAlertRichText) SetEntities(v []map[string]interface{}) {
	o.Entities = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *TimelineShowAlertRichText) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineShowAlertRichText) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *TimelineShowAlertRichText) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *TimelineShowAlertRichText) SetText(v string) {
	o.Text = &v
}

func (o TimelineShowAlertRichText) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimelineShowAlertRichText) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entities) {
		toSerialize["entities"] = o.Entities
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableTimelineShowAlertRichText struct {
	value *TimelineShowAlertRichText
	isSet bool
}

func (v NullableTimelineShowAlertRichText) Get() *TimelineShowAlertRichText {
	return v.value
}

func (v *NullableTimelineShowAlertRichText) Set(val *TimelineShowAlertRichText) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineShowAlertRichText) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineShowAlertRichText) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineShowAlertRichText(val *TimelineShowAlertRichText) *NullableTimelineShowAlertRichText {
	return &NullableTimelineShowAlertRichText{value: val, isSet: true}
}

func (v NullableTimelineShowAlertRichText) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineShowAlertRichText) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
