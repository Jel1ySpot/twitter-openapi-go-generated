/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MediaOriginalInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaOriginalInfo{}

// MediaOriginalInfo struct for MediaOriginalInfo
type MediaOriginalInfo struct {
	FocusRects []MediaOriginalInfoFocusRect `json:"focus_rects,omitempty"`
	Height     int32                        `json:"height"`
	Width      int32                        `json:"width"`
}

type _MediaOriginalInfo MediaOriginalInfo

// NewMediaOriginalInfo instantiates a new MediaOriginalInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaOriginalInfo(height int32, width int32) *MediaOriginalInfo {
	this := MediaOriginalInfo{}
	this.Height = height
	this.Width = width
	return &this
}

// NewMediaOriginalInfoWithDefaults instantiates a new MediaOriginalInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaOriginalInfoWithDefaults() *MediaOriginalInfo {
	this := MediaOriginalInfo{}
	return &this
}

// GetFocusRects returns the FocusRects field value if set, zero value otherwise.
func (o *MediaOriginalInfo) GetFocusRects() []MediaOriginalInfoFocusRect {
	if o == nil || IsNil(o.FocusRects) {
		var ret []MediaOriginalInfoFocusRect
		return ret
	}
	return o.FocusRects
}

// GetFocusRectsOk returns a tuple with the FocusRects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaOriginalInfo) GetFocusRectsOk() ([]MediaOriginalInfoFocusRect, bool) {
	if o == nil || IsNil(o.FocusRects) {
		return nil, false
	}
	return o.FocusRects, true
}

// HasFocusRects returns a boolean if a field has been set.
func (o *MediaOriginalInfo) HasFocusRects() bool {
	if o != nil && !IsNil(o.FocusRects) {
		return true
	}

	return false
}

// SetFocusRects gets a reference to the given []MediaOriginalInfoFocusRect and assigns it to the FocusRects field.
func (o *MediaOriginalInfo) SetFocusRects(v []MediaOriginalInfoFocusRect) {
	o.FocusRects = v
}

// GetHeight returns the Height field value
func (o *MediaOriginalInfo) GetHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *MediaOriginalInfo) GetHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *MediaOriginalInfo) SetHeight(v int32) {
	o.Height = v
}

// GetWidth returns the Width field value
func (o *MediaOriginalInfo) GetWidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *MediaOriginalInfo) GetWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *MediaOriginalInfo) SetWidth(v int32) {
	o.Width = v
}

func (o MediaOriginalInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaOriginalInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FocusRects) {
		toSerialize["focus_rects"] = o.FocusRects
	}
	toSerialize["height"] = o.Height
	toSerialize["width"] = o.Width
	return toSerialize, nil
}

func (o *MediaOriginalInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"height",
		"width",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaOriginalInfo := _MediaOriginalInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaOriginalInfo)

	if err != nil {
		return err
	}

	*o = MediaOriginalInfo(varMediaOriginalInfo)

	return err
}

type NullableMediaOriginalInfo struct {
	value *MediaOriginalInfo
	isSet bool
}

func (v NullableMediaOriginalInfo) Get() *MediaOriginalInfo {
	return v.value
}

func (v *NullableMediaOriginalInfo) Set(val *MediaOriginalInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaOriginalInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaOriginalInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaOriginalInfo(val *MediaOriginalInfo) *NullableMediaOriginalInfo {
	return &NullableMediaOriginalInfo{value: val, isSet: true}
}

func (v NullableMediaOriginalInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaOriginalInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
