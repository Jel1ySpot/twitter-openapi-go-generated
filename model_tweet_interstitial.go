/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TweetInterstitial type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TweetInterstitial{}

// TweetInterstitial struct for TweetInterstitial
type TweetInterstitial struct {
	Typename    TypeName                    `json:"__typename"`
	DisplayType string                      `json:"displayType"`
	RevealText  TweetInterstitialRevealText `json:"revealText"`
	Text        TweetInterstitialText       `json:"text"`
}

type _TweetInterstitial TweetInterstitial

// NewTweetInterstitial instantiates a new TweetInterstitial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTweetInterstitial(typename TypeName, displayType string, revealText TweetInterstitialRevealText, text TweetInterstitialText) *TweetInterstitial {
	this := TweetInterstitial{}
	this.Typename = typename
	this.DisplayType = displayType
	this.RevealText = revealText
	this.Text = text
	return &this
}

// NewTweetInterstitialWithDefaults instantiates a new TweetInterstitial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTweetInterstitialWithDefaults() *TweetInterstitial {
	this := TweetInterstitial{}
	return &this
}

// GetTypename returns the Typename field value
func (o *TweetInterstitial) GetTypename() TypeName {
	if o == nil {
		var ret TypeName
		return ret
	}

	return o.Typename
}

// GetTypenameOk returns a tuple with the Typename field value
// and a boolean to check if the value has been set.
func (o *TweetInterstitial) GetTypenameOk() (*TypeName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Typename, true
}

// SetTypename sets field value
func (o *TweetInterstitial) SetTypename(v TypeName) {
	o.Typename = v
}

// GetDisplayType returns the DisplayType field value
func (o *TweetInterstitial) GetDisplayType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayType
}

// GetDisplayTypeOk returns a tuple with the DisplayType field value
// and a boolean to check if the value has been set.
func (o *TweetInterstitial) GetDisplayTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayType, true
}

// SetDisplayType sets field value
func (o *TweetInterstitial) SetDisplayType(v string) {
	o.DisplayType = v
}

// GetRevealText returns the RevealText field value
func (o *TweetInterstitial) GetRevealText() TweetInterstitialRevealText {
	if o == nil {
		var ret TweetInterstitialRevealText
		return ret
	}

	return o.RevealText
}

// GetRevealTextOk returns a tuple with the RevealText field value
// and a boolean to check if the value has been set.
func (o *TweetInterstitial) GetRevealTextOk() (*TweetInterstitialRevealText, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevealText, true
}

// SetRevealText sets field value
func (o *TweetInterstitial) SetRevealText(v TweetInterstitialRevealText) {
	o.RevealText = v
}

// GetText returns the Text field value
func (o *TweetInterstitial) GetText() TweetInterstitialText {
	if o == nil {
		var ret TweetInterstitialText
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TweetInterstitial) GetTextOk() (*TweetInterstitialText, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TweetInterstitial) SetText(v TweetInterstitialText) {
	o.Text = v
}

func (o TweetInterstitial) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TweetInterstitial) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["__typename"] = o.Typename
	toSerialize["displayType"] = o.DisplayType
	toSerialize["revealText"] = o.RevealText
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

func (o *TweetInterstitial) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"__typename",
		"displayType",
		"revealText",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTweetInterstitial := _TweetInterstitial{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTweetInterstitial)

	if err != nil {
		return err
	}

	*o = TweetInterstitial(varTweetInterstitial)

	return err
}

type NullableTweetInterstitial struct {
	value *TweetInterstitial
	isSet bool
}

func (v NullableTweetInterstitial) Get() *TweetInterstitial {
	return v.value
}

func (v *NullableTweetInterstitial) Set(val *TweetInterstitial) {
	v.value = val
	v.isSet = true
}

func (v NullableTweetInterstitial) IsSet() bool {
	return v.isSet
}

func (v *NullableTweetInterstitial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTweetInterstitial(val *TweetInterstitial) *NullableTweetInterstitial {
	return &NullableTweetInterstitial{value: val, isSet: true}
}

func (v NullableTweetInterstitial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTweetInterstitial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
