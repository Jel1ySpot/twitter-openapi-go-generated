/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Timestamp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Timestamp{}

// Timestamp struct for Timestamp
type Timestamp struct {
	Indices []int32 `json:"indices"`
	Seconds int32 `json:"seconds"`
	Text string `json:"text"`
}

type _Timestamp Timestamp

// NewTimestamp instantiates a new Timestamp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimestamp(indices []int32, seconds int32, text string) *Timestamp {
	this := Timestamp{}
	this.Indices = indices
	this.Seconds = seconds
	this.Text = text
	return &this
}

// NewTimestampWithDefaults instantiates a new Timestamp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimestampWithDefaults() *Timestamp {
	this := Timestamp{}
	return &this
}

// GetIndices returns the Indices field value
func (o *Timestamp) GetIndices() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Indices
}

// GetIndicesOk returns a tuple with the Indices field value
// and a boolean to check if the value has been set.
func (o *Timestamp) GetIndicesOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Indices, true
}

// SetIndices sets field value
func (o *Timestamp) SetIndices(v []int32) {
	o.Indices = v
}

// GetSeconds returns the Seconds field value
func (o *Timestamp) GetSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Seconds
}

// GetSecondsOk returns a tuple with the Seconds field value
// and a boolean to check if the value has been set.
func (o *Timestamp) GetSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seconds, true
}

// SetSeconds sets field value
func (o *Timestamp) SetSeconds(v int32) {
	o.Seconds = v
}

// GetText returns the Text field value
func (o *Timestamp) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *Timestamp) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *Timestamp) SetText(v string) {
	o.Text = v
}

func (o Timestamp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Timestamp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["indices"] = o.Indices
	toSerialize["seconds"] = o.Seconds
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

func (o *Timestamp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"indices",
		"seconds",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimestamp := _Timestamp{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimestamp)

	if err != nil {
		return err
	}

	*o = Timestamp(varTimestamp)

	return err
}

type NullableTimestamp struct {
	value *Timestamp
	isSet bool
}

func (v NullableTimestamp) Get() *Timestamp {
	return v.value
}

func (v *NullableTimestamp) Set(val *Timestamp) {
	v.value = val
	v.isSet = true
}

func (v NullableTimestamp) IsSet() bool {
	return v.isSet
}

func (v *NullableTimestamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimestamp(val *Timestamp) *NullableTimestamp {
	return &NullableTimestamp{value: val, isSet: true}
}

func (v NullableTimestamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimestamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


