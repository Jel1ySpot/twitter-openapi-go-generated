/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FeedbackInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedbackInfo{}

// FeedbackInfo struct for FeedbackInfo
type FeedbackInfo struct {
	FeedbackKeys []string `json:"feedbackKeys,omitempty"`
}

// NewFeedbackInfo instantiates a new FeedbackInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedbackInfo() *FeedbackInfo {
	this := FeedbackInfo{}
	return &this
}

// NewFeedbackInfoWithDefaults instantiates a new FeedbackInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedbackInfoWithDefaults() *FeedbackInfo {
	this := FeedbackInfo{}
	return &this
}

// GetFeedbackKeys returns the FeedbackKeys field value if set, zero value otherwise.
func (o *FeedbackInfo) GetFeedbackKeys() []string {
	if o == nil || IsNil(o.FeedbackKeys) {
		var ret []string
		return ret
	}
	return o.FeedbackKeys
}

// GetFeedbackKeysOk returns a tuple with the FeedbackKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackInfo) GetFeedbackKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.FeedbackKeys) {
		return nil, false
	}
	return o.FeedbackKeys, true
}

// HasFeedbackKeys returns a boolean if a field has been set.
func (o *FeedbackInfo) HasFeedbackKeys() bool {
	if o != nil && !IsNil(o.FeedbackKeys) {
		return true
	}

	return false
}

// SetFeedbackKeys gets a reference to the given []string and assigns it to the FeedbackKeys field.
func (o *FeedbackInfo) SetFeedbackKeys(v []string) {
	o.FeedbackKeys = v
}

func (o FeedbackInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedbackInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeedbackKeys) {
		toSerialize["feedbackKeys"] = o.FeedbackKeys
	}
	return toSerialize, nil
}

type NullableFeedbackInfo struct {
	value *FeedbackInfo
	isSet bool
}

func (v NullableFeedbackInfo) Get() *FeedbackInfo {
	return v.value
}

func (v *NullableFeedbackInfo) Set(val *FeedbackInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackInfo(val *FeedbackInfo) *NullableFeedbackInfo {
	return &NullableFeedbackInfo{value: val, isSet: true}
}

func (v NullableFeedbackInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
