/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CommunityActions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommunityActions{}

// CommunityActions struct for CommunityActions
type CommunityActions struct {
	DeleteActionResult *CommunityDeleteActionResult `json:"delete_action_result,omitempty"`
	JoinActionResult *CommunityJoinActionResult `json:"join_action_result,omitempty"`
	LeaveActionResult *CommunityLeaveActionResult `json:"leave_action_result,omitempty"`
	PinActionResult *CommunityPinActionResult `json:"pin_action_result,omitempty"`
	UnpinActionResult *CommunityUnpinActionResult `json:"unpin_action_result,omitempty"`
}

// NewCommunityActions instantiates a new CommunityActions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommunityActions() *CommunityActions {
	this := CommunityActions{}
	return &this
}

// NewCommunityActionsWithDefaults instantiates a new CommunityActions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommunityActionsWithDefaults() *CommunityActions {
	this := CommunityActions{}
	return &this
}

// GetDeleteActionResult returns the DeleteActionResult field value if set, zero value otherwise.
func (o *CommunityActions) GetDeleteActionResult() CommunityDeleteActionResult {
	if o == nil || IsNil(o.DeleteActionResult) {
		var ret CommunityDeleteActionResult
		return ret
	}
	return *o.DeleteActionResult
}

// GetDeleteActionResultOk returns a tuple with the DeleteActionResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunityActions) GetDeleteActionResultOk() (*CommunityDeleteActionResult, bool) {
	if o == nil || IsNil(o.DeleteActionResult) {
		return nil, false
	}
	return o.DeleteActionResult, true
}

// HasDeleteActionResult returns a boolean if a field has been set.
func (o *CommunityActions) HasDeleteActionResult() bool {
	if o != nil && !IsNil(o.DeleteActionResult) {
		return true
	}

	return false
}

// SetDeleteActionResult gets a reference to the given CommunityDeleteActionResult and assigns it to the DeleteActionResult field.
func (o *CommunityActions) SetDeleteActionResult(v CommunityDeleteActionResult) {
	o.DeleteActionResult = &v
}

// GetJoinActionResult returns the JoinActionResult field value if set, zero value otherwise.
func (o *CommunityActions) GetJoinActionResult() CommunityJoinActionResult {
	if o == nil || IsNil(o.JoinActionResult) {
		var ret CommunityJoinActionResult
		return ret
	}
	return *o.JoinActionResult
}

// GetJoinActionResultOk returns a tuple with the JoinActionResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunityActions) GetJoinActionResultOk() (*CommunityJoinActionResult, bool) {
	if o == nil || IsNil(o.JoinActionResult) {
		return nil, false
	}
	return o.JoinActionResult, true
}

// HasJoinActionResult returns a boolean if a field has been set.
func (o *CommunityActions) HasJoinActionResult() bool {
	if o != nil && !IsNil(o.JoinActionResult) {
		return true
	}

	return false
}

// SetJoinActionResult gets a reference to the given CommunityJoinActionResult and assigns it to the JoinActionResult field.
func (o *CommunityActions) SetJoinActionResult(v CommunityJoinActionResult) {
	o.JoinActionResult = &v
}

// GetLeaveActionResult returns the LeaveActionResult field value if set, zero value otherwise.
func (o *CommunityActions) GetLeaveActionResult() CommunityLeaveActionResult {
	if o == nil || IsNil(o.LeaveActionResult) {
		var ret CommunityLeaveActionResult
		return ret
	}
	return *o.LeaveActionResult
}

// GetLeaveActionResultOk returns a tuple with the LeaveActionResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunityActions) GetLeaveActionResultOk() (*CommunityLeaveActionResult, bool) {
	if o == nil || IsNil(o.LeaveActionResult) {
		return nil, false
	}
	return o.LeaveActionResult, true
}

// HasLeaveActionResult returns a boolean if a field has been set.
func (o *CommunityActions) HasLeaveActionResult() bool {
	if o != nil && !IsNil(o.LeaveActionResult) {
		return true
	}

	return false
}

// SetLeaveActionResult gets a reference to the given CommunityLeaveActionResult and assigns it to the LeaveActionResult field.
func (o *CommunityActions) SetLeaveActionResult(v CommunityLeaveActionResult) {
	o.LeaveActionResult = &v
}

// GetPinActionResult returns the PinActionResult field value if set, zero value otherwise.
func (o *CommunityActions) GetPinActionResult() CommunityPinActionResult {
	if o == nil || IsNil(o.PinActionResult) {
		var ret CommunityPinActionResult
		return ret
	}
	return *o.PinActionResult
}

// GetPinActionResultOk returns a tuple with the PinActionResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunityActions) GetPinActionResultOk() (*CommunityPinActionResult, bool) {
	if o == nil || IsNil(o.PinActionResult) {
		return nil, false
	}
	return o.PinActionResult, true
}

// HasPinActionResult returns a boolean if a field has been set.
func (o *CommunityActions) HasPinActionResult() bool {
	if o != nil && !IsNil(o.PinActionResult) {
		return true
	}

	return false
}

// SetPinActionResult gets a reference to the given CommunityPinActionResult and assigns it to the PinActionResult field.
func (o *CommunityActions) SetPinActionResult(v CommunityPinActionResult) {
	o.PinActionResult = &v
}

// GetUnpinActionResult returns the UnpinActionResult field value if set, zero value otherwise.
func (o *CommunityActions) GetUnpinActionResult() CommunityUnpinActionResult {
	if o == nil || IsNil(o.UnpinActionResult) {
		var ret CommunityUnpinActionResult
		return ret
	}
	return *o.UnpinActionResult
}

// GetUnpinActionResultOk returns a tuple with the UnpinActionResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommunityActions) GetUnpinActionResultOk() (*CommunityUnpinActionResult, bool) {
	if o == nil || IsNil(o.UnpinActionResult) {
		return nil, false
	}
	return o.UnpinActionResult, true
}

// HasUnpinActionResult returns a boolean if a field has been set.
func (o *CommunityActions) HasUnpinActionResult() bool {
	if o != nil && !IsNil(o.UnpinActionResult) {
		return true
	}

	return false
}

// SetUnpinActionResult gets a reference to the given CommunityUnpinActionResult and assigns it to the UnpinActionResult field.
func (o *CommunityActions) SetUnpinActionResult(v CommunityUnpinActionResult) {
	o.UnpinActionResult = &v
}

func (o CommunityActions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommunityActions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeleteActionResult) {
		toSerialize["delete_action_result"] = o.DeleteActionResult
	}
	if !IsNil(o.JoinActionResult) {
		toSerialize["join_action_result"] = o.JoinActionResult
	}
	if !IsNil(o.LeaveActionResult) {
		toSerialize["leave_action_result"] = o.LeaveActionResult
	}
	if !IsNil(o.PinActionResult) {
		toSerialize["pin_action_result"] = o.PinActionResult
	}
	if !IsNil(o.UnpinActionResult) {
		toSerialize["unpin_action_result"] = o.UnpinActionResult
	}
	return toSerialize, nil
}

type NullableCommunityActions struct {
	value *CommunityActions
	isSet bool
}

func (v NullableCommunityActions) Get() *CommunityActions {
	return v.value
}

func (v *NullableCommunityActions) Set(val *CommunityActions) {
	v.value = val
	v.isSet = true
}

func (v NullableCommunityActions) IsSet() bool {
	return v.isSet
}

func (v *NullableCommunityActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommunityActions(val *CommunityActions) *NullableCommunityActions {
	return &NullableCommunityActions{value: val, isSet: true}
}

func (v NullableCommunityActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommunityActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


