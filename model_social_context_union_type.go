/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SocialContextUnionType the model 'SocialContextUnionType'
type SocialContextUnionType string

// List of SocialContextUnionType
const (
	TIMELINE_GENERAL_CONTEXT SocialContextUnionType = "TimelineGeneralContext"
	TIMELINE_TOPIC_CONTEXT   SocialContextUnionType = "TimelineTopicContext"
)

// All allowed values of SocialContextUnionType enum
var AllowedSocialContextUnionTypeEnumValues = []SocialContextUnionType{
	"TimelineGeneralContext",
	"TimelineTopicContext",
}

func (v *SocialContextUnionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SocialContextUnionType(value)
	for _, existing := range AllowedSocialContextUnionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SocialContextUnionType", value)
}

// NewSocialContextUnionTypeFromValue returns a pointer to a valid SocialContextUnionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSocialContextUnionTypeFromValue(v string) (*SocialContextUnionType, error) {
	ev := SocialContextUnionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SocialContextUnionType: valid values are %v", v, AllowedSocialContextUnionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SocialContextUnionType) IsValid() bool {
	for _, existing := range AllowedSocialContextUnionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SocialContextUnionType value
func (v SocialContextUnionType) Ptr() *SocialContextUnionType {
	return &v
}

type NullableSocialContextUnionType struct {
	value *SocialContextUnionType
	isSet bool
}

func (v NullableSocialContextUnionType) Get() *SocialContextUnionType {
	return v.value
}

func (v *NullableSocialContextUnionType) Set(val *SocialContextUnionType) {
	v.value = val
	v.isSet = true
}

func (v NullableSocialContextUnionType) IsSet() bool {
	return v.isSet
}

func (v *NullableSocialContextUnionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSocialContextUnionType(val *SocialContextUnionType) *NullableSocialContextUnionType {
	return &NullableSocialContextUnionType{value: val, isSet: true}
}

func (v NullableSocialContextUnionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSocialContextUnionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
