/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ContentUnion - struct for ContentUnion
type ContentUnion struct {
	TimelineTimelineCursor *TimelineTimelineCursor
	TimelineTimelineItem *TimelineTimelineItem
	TimelineTimelineModule *TimelineTimelineModule
}

// TimelineTimelineCursorAsContentUnion is a convenience function that returns TimelineTimelineCursor wrapped in ContentUnion
func TimelineTimelineCursorAsContentUnion(v *TimelineTimelineCursor) ContentUnion {
	return ContentUnion{
		TimelineTimelineCursor: v,
	}
}

// TimelineTimelineItemAsContentUnion is a convenience function that returns TimelineTimelineItem wrapped in ContentUnion
func TimelineTimelineItemAsContentUnion(v *TimelineTimelineItem) ContentUnion {
	return ContentUnion{
		TimelineTimelineItem: v,
	}
}

// TimelineTimelineModuleAsContentUnion is a convenience function that returns TimelineTimelineModule wrapped in ContentUnion
func TimelineTimelineModuleAsContentUnion(v *TimelineTimelineModule) ContentUnion {
	return ContentUnion{
		TimelineTimelineModule: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentUnion) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TimelineTimelineCursor
	err = newStrictDecoder(data).Decode(&dst.TimelineTimelineCursor)
	if err == nil {
		jsonTimelineTimelineCursor, _ := json.Marshal(dst.TimelineTimelineCursor)
		if string(jsonTimelineTimelineCursor) == "{}" { // empty struct
			dst.TimelineTimelineCursor = nil
		} else {
			if err = validator.Validate(dst.TimelineTimelineCursor); err != nil {
				dst.TimelineTimelineCursor = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelineTimelineCursor = nil
	}

	// try to unmarshal data into TimelineTimelineItem
	err = newStrictDecoder(data).Decode(&dst.TimelineTimelineItem)
	if err == nil {
		jsonTimelineTimelineItem, _ := json.Marshal(dst.TimelineTimelineItem)
		if string(jsonTimelineTimelineItem) == "{}" { // empty struct
			dst.TimelineTimelineItem = nil
		} else {
			if err = validator.Validate(dst.TimelineTimelineItem); err != nil {
				dst.TimelineTimelineItem = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelineTimelineItem = nil
	}

	// try to unmarshal data into TimelineTimelineModule
	err = newStrictDecoder(data).Decode(&dst.TimelineTimelineModule)
	if err == nil {
		jsonTimelineTimelineModule, _ := json.Marshal(dst.TimelineTimelineModule)
		if string(jsonTimelineTimelineModule) == "{}" { // empty struct
			dst.TimelineTimelineModule = nil
		} else {
			if err = validator.Validate(dst.TimelineTimelineModule); err != nil {
				dst.TimelineTimelineModule = nil
			} else {
				match++
			}
		}
	} else {
		dst.TimelineTimelineModule = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TimelineTimelineCursor = nil
		dst.TimelineTimelineItem = nil
		dst.TimelineTimelineModule = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentUnion)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentUnion)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentUnion) MarshalJSON() ([]byte, error) {
	if src.TimelineTimelineCursor != nil {
		return json.Marshal(&src.TimelineTimelineCursor)
	}

	if src.TimelineTimelineItem != nil {
		return json.Marshal(&src.TimelineTimelineItem)
	}

	if src.TimelineTimelineModule != nil {
		return json.Marshal(&src.TimelineTimelineModule)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentUnion) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TimelineTimelineCursor != nil {
		return obj.TimelineTimelineCursor
	}

	if obj.TimelineTimelineItem != nil {
		return obj.TimelineTimelineItem
	}

	if obj.TimelineTimelineModule != nil {
		return obj.TimelineTimelineModule
	}

	// all schemas are nil
	return nil
}

type NullableContentUnion struct {
	value *ContentUnion
	isSet bool
}

func (v NullableContentUnion) Get() *ContentUnion {
	return v.value
}

func (v *NullableContentUnion) Set(val *ContentUnion) {
	v.value = val
	v.isSet = true
}

func (v NullableContentUnion) IsSet() bool {
	return v.isSet
}

func (v *NullableContentUnion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentUnion(val *ContentUnion) *NullableContentUnion {
	return &NullableContentUnion{value: val, isSet: true}
}

func (v NullableContentUnion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentUnion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


