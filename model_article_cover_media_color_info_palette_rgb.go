/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArticleCoverMediaColorInfoPaletteRGB type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArticleCoverMediaColorInfoPaletteRGB{}

// ArticleCoverMediaColorInfoPaletteRGB struct for ArticleCoverMediaColorInfoPaletteRGB
type ArticleCoverMediaColorInfoPaletteRGB struct {
	Blue int32 `json:"blue"`
	Green int32 `json:"green"`
	Red int32 `json:"red"`
}

type _ArticleCoverMediaColorInfoPaletteRGB ArticleCoverMediaColorInfoPaletteRGB

// NewArticleCoverMediaColorInfoPaletteRGB instantiates a new ArticleCoverMediaColorInfoPaletteRGB object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArticleCoverMediaColorInfoPaletteRGB(blue int32, green int32, red int32) *ArticleCoverMediaColorInfoPaletteRGB {
	this := ArticleCoverMediaColorInfoPaletteRGB{}
	this.Blue = blue
	this.Green = green
	this.Red = red
	return &this
}

// NewArticleCoverMediaColorInfoPaletteRGBWithDefaults instantiates a new ArticleCoverMediaColorInfoPaletteRGB object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArticleCoverMediaColorInfoPaletteRGBWithDefaults() *ArticleCoverMediaColorInfoPaletteRGB {
	this := ArticleCoverMediaColorInfoPaletteRGB{}
	return &this
}

// GetBlue returns the Blue field value
func (o *ArticleCoverMediaColorInfoPaletteRGB) GetBlue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Blue
}

// GetBlueOk returns a tuple with the Blue field value
// and a boolean to check if the value has been set.
func (o *ArticleCoverMediaColorInfoPaletteRGB) GetBlueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blue, true
}

// SetBlue sets field value
func (o *ArticleCoverMediaColorInfoPaletteRGB) SetBlue(v int32) {
	o.Blue = v
}

// GetGreen returns the Green field value
func (o *ArticleCoverMediaColorInfoPaletteRGB) GetGreen() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Green
}

// GetGreenOk returns a tuple with the Green field value
// and a boolean to check if the value has been set.
func (o *ArticleCoverMediaColorInfoPaletteRGB) GetGreenOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Green, true
}

// SetGreen sets field value
func (o *ArticleCoverMediaColorInfoPaletteRGB) SetGreen(v int32) {
	o.Green = v
}

// GetRed returns the Red field value
func (o *ArticleCoverMediaColorInfoPaletteRGB) GetRed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Red
}

// GetRedOk returns a tuple with the Red field value
// and a boolean to check if the value has been set.
func (o *ArticleCoverMediaColorInfoPaletteRGB) GetRedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Red, true
}

// SetRed sets field value
func (o *ArticleCoverMediaColorInfoPaletteRGB) SetRed(v int32) {
	o.Red = v
}

func (o ArticleCoverMediaColorInfoPaletteRGB) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArticleCoverMediaColorInfoPaletteRGB) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blue"] = o.Blue
	toSerialize["green"] = o.Green
	toSerialize["red"] = o.Red
	return toSerialize, nil
}

func (o *ArticleCoverMediaColorInfoPaletteRGB) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blue",
		"green",
		"red",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArticleCoverMediaColorInfoPaletteRGB := _ArticleCoverMediaColorInfoPaletteRGB{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArticleCoverMediaColorInfoPaletteRGB)

	if err != nil {
		return err
	}

	*o = ArticleCoverMediaColorInfoPaletteRGB(varArticleCoverMediaColorInfoPaletteRGB)

	return err
}

type NullableArticleCoverMediaColorInfoPaletteRGB struct {
	value *ArticleCoverMediaColorInfoPaletteRGB
	isSet bool
}

func (v NullableArticleCoverMediaColorInfoPaletteRGB) Get() *ArticleCoverMediaColorInfoPaletteRGB {
	return v.value
}

func (v *NullableArticleCoverMediaColorInfoPaletteRGB) Set(val *ArticleCoverMediaColorInfoPaletteRGB) {
	v.value = val
	v.isSet = true
}

func (v NullableArticleCoverMediaColorInfoPaletteRGB) IsSet() bool {
	return v.isSet
}

func (v *NullableArticleCoverMediaColorInfoPaletteRGB) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticleCoverMediaColorInfoPaletteRGB(val *ArticleCoverMediaColorInfoPaletteRGB) *NullableArticleCoverMediaColorInfoPaletteRGB {
	return &NullableArticleCoverMediaColorInfoPaletteRGB{value: val, isSet: true}
}

func (v NullableArticleCoverMediaColorInfoPaletteRGB) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticleCoverMediaColorInfoPaletteRGB) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


