/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Tracing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tracing{}

// Tracing struct for Tracing
type Tracing struct {
	TraceId string `json:"trace_id" validate:"regexp=^[0-9a-f]{16}$"`
}

type _Tracing Tracing

// NewTracing instantiates a new Tracing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTracing(traceId string) *Tracing {
	this := Tracing{}
	this.TraceId = traceId
	return &this
}

// NewTracingWithDefaults instantiates a new Tracing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTracingWithDefaults() *Tracing {
	this := Tracing{}
	return &this
}

// GetTraceId returns the TraceId field value
func (o *Tracing) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *Tracing) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *Tracing) SetTraceId(v string) {
	o.TraceId = v
}

func (o Tracing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tracing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["trace_id"] = o.TraceId
	return toSerialize, nil
}

func (o *Tracing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trace_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTracing := _Tracing{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTracing)

	if err != nil {
		return err
	}

	*o = Tracing(varTracing)

	return err
}

type NullableTracing struct {
	value *Tracing
	isSet bool
}

func (v NullableTracing) Get() *Tracing {
	return v.value
}

func (v *NullableTracing) Set(val *Tracing) {
	v.value = val
	v.isSet = true
}

func (v NullableTracing) IsSet() bool {
	return v.isSet
}

func (v *NullableTracing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTracing(val *Tracing) *NullableTracing {
	return &NullableTracing{value: val, isSet: true}
}

func (v NullableTracing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTracing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


