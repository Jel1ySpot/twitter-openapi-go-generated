/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimelineCoverBehavior type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimelineCoverBehavior{}

// TimelineCoverBehavior struct for TimelineCoverBehavior
type TimelineCoverBehavior struct {
	Type string `json:"type"`
	Url *TimelineCoverBehaviorUrl `json:"url,omitempty"`
}

type _TimelineCoverBehavior TimelineCoverBehavior

// NewTimelineCoverBehavior instantiates a new TimelineCoverBehavior object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelineCoverBehavior(type_ string) *TimelineCoverBehavior {
	this := TimelineCoverBehavior{}
	this.Type = type_
	return &this
}

// NewTimelineCoverBehaviorWithDefaults instantiates a new TimelineCoverBehavior object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineCoverBehaviorWithDefaults() *TimelineCoverBehavior {
	this := TimelineCoverBehavior{}
	return &this
}

// GetType returns the Type field value
func (o *TimelineCoverBehavior) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TimelineCoverBehavior) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TimelineCoverBehavior) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *TimelineCoverBehavior) GetUrl() TimelineCoverBehaviorUrl {
	if o == nil || IsNil(o.Url) {
		var ret TimelineCoverBehaviorUrl
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineCoverBehavior) GetUrlOk() (*TimelineCoverBehaviorUrl, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *TimelineCoverBehavior) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given TimelineCoverBehaviorUrl and assigns it to the Url field.
func (o *TimelineCoverBehavior) SetUrl(v TimelineCoverBehaviorUrl) {
	o.Url = &v
}

func (o TimelineCoverBehavior) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimelineCoverBehavior) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *TimelineCoverBehavior) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimelineCoverBehavior := _TimelineCoverBehavior{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimelineCoverBehavior)

	if err != nil {
		return err
	}

	*o = TimelineCoverBehavior(varTimelineCoverBehavior)

	return err
}

type NullableTimelineCoverBehavior struct {
	value *TimelineCoverBehavior
	isSet bool
}

func (v NullableTimelineCoverBehavior) Get() *TimelineCoverBehavior {
	return v.value
}

func (v *NullableTimelineCoverBehavior) Set(val *TimelineCoverBehavior) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineCoverBehavior) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineCoverBehavior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineCoverBehavior(val *TimelineCoverBehavior) *NullableTimelineCoverBehavior {
	return &NullableTimelineCoverBehavior{value: val, isSet: true}
}

func (v NullableTimelineCoverBehavior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineCoverBehavior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


