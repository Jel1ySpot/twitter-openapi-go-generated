/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RetweetLegacy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RetweetLegacy{}

// RetweetLegacy struct for RetweetLegacy
type RetweetLegacy struct {
	FullText string `json:"full_text"`
}

type _RetweetLegacy RetweetLegacy

// NewRetweetLegacy instantiates a new RetweetLegacy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetweetLegacy(fullText string) *RetweetLegacy {
	this := RetweetLegacy{}
	this.FullText = fullText
	return &this
}

// NewRetweetLegacyWithDefaults instantiates a new RetweetLegacy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetweetLegacyWithDefaults() *RetweetLegacy {
	this := RetweetLegacy{}
	return &this
}

// GetFullText returns the FullText field value
func (o *RetweetLegacy) GetFullText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullText
}

// GetFullTextOk returns a tuple with the FullText field value
// and a boolean to check if the value has been set.
func (o *RetweetLegacy) GetFullTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullText, true
}

// SetFullText sets field value
func (o *RetweetLegacy) SetFullText(v string) {
	o.FullText = v
}

func (o RetweetLegacy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RetweetLegacy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["full_text"] = o.FullText
	return toSerialize, nil
}

func (o *RetweetLegacy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"full_text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRetweetLegacy := _RetweetLegacy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRetweetLegacy)

	if err != nil {
		return err
	}

	*o = RetweetLegacy(varRetweetLegacy)

	return err
}

type NullableRetweetLegacy struct {
	value *RetweetLegacy
	isSet bool
}

func (v NullableRetweetLegacy) Get() *RetweetLegacy {
	return v.value
}

func (v *NullableRetweetLegacy) Set(val *RetweetLegacy) {
	v.value = val
	v.isSet = true
}

func (v NullableRetweetLegacy) IsSet() bool {
	return v.isSet
}

func (v *NullableRetweetLegacy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetweetLegacy(val *RetweetLegacy) *NullableRetweetLegacy {
	return &NullableRetweetLegacy{value: val, isSet: true}
}

func (v NullableRetweetLegacy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetweetLegacy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
