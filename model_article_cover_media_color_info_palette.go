/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ArticleCoverMediaColorInfoPalette type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArticleCoverMediaColorInfoPalette{}

// ArticleCoverMediaColorInfoPalette struct for ArticleCoverMediaColorInfoPalette
type ArticleCoverMediaColorInfoPalette struct {
	Percentage float32                              `json:"percentage"`
	Rgb        ArticleCoverMediaColorInfoPaletteRGB `json:"rgb"`
}

type _ArticleCoverMediaColorInfoPalette ArticleCoverMediaColorInfoPalette

// NewArticleCoverMediaColorInfoPalette instantiates a new ArticleCoverMediaColorInfoPalette object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArticleCoverMediaColorInfoPalette(percentage float32, rgb ArticleCoverMediaColorInfoPaletteRGB) *ArticleCoverMediaColorInfoPalette {
	this := ArticleCoverMediaColorInfoPalette{}
	this.Percentage = percentage
	this.Rgb = rgb
	return &this
}

// NewArticleCoverMediaColorInfoPaletteWithDefaults instantiates a new ArticleCoverMediaColorInfoPalette object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArticleCoverMediaColorInfoPaletteWithDefaults() *ArticleCoverMediaColorInfoPalette {
	this := ArticleCoverMediaColorInfoPalette{}
	return &this
}

// GetPercentage returns the Percentage field value
func (o *ArticleCoverMediaColorInfoPalette) GetPercentage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value
// and a boolean to check if the value has been set.
func (o *ArticleCoverMediaColorInfoPalette) GetPercentageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percentage, true
}

// SetPercentage sets field value
func (o *ArticleCoverMediaColorInfoPalette) SetPercentage(v float32) {
	o.Percentage = v
}

// GetRgb returns the Rgb field value
func (o *ArticleCoverMediaColorInfoPalette) GetRgb() ArticleCoverMediaColorInfoPaletteRGB {
	if o == nil {
		var ret ArticleCoverMediaColorInfoPaletteRGB
		return ret
	}

	return o.Rgb
}

// GetRgbOk returns a tuple with the Rgb field value
// and a boolean to check if the value has been set.
func (o *ArticleCoverMediaColorInfoPalette) GetRgbOk() (*ArticleCoverMediaColorInfoPaletteRGB, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rgb, true
}

// SetRgb sets field value
func (o *ArticleCoverMediaColorInfoPalette) SetRgb(v ArticleCoverMediaColorInfoPaletteRGB) {
	o.Rgb = v
}

func (o ArticleCoverMediaColorInfoPalette) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArticleCoverMediaColorInfoPalette) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["percentage"] = o.Percentage
	toSerialize["rgb"] = o.Rgb
	return toSerialize, nil
}

func (o *ArticleCoverMediaColorInfoPalette) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"percentage",
		"rgb",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArticleCoverMediaColorInfoPalette := _ArticleCoverMediaColorInfoPalette{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArticleCoverMediaColorInfoPalette)

	if err != nil {
		return err
	}

	*o = ArticleCoverMediaColorInfoPalette(varArticleCoverMediaColorInfoPalette)

	return err
}

type NullableArticleCoverMediaColorInfoPalette struct {
	value *ArticleCoverMediaColorInfoPalette
	isSet bool
}

func (v NullableArticleCoverMediaColorInfoPalette) Get() *ArticleCoverMediaColorInfoPalette {
	return v.value
}

func (v *NullableArticleCoverMediaColorInfoPalette) Set(val *ArticleCoverMediaColorInfoPalette) {
	v.value = val
	v.isSet = true
}

func (v NullableArticleCoverMediaColorInfoPalette) IsSet() bool {
	return v.isSet
}

func (v *NullableArticleCoverMediaColorInfoPalette) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticleCoverMediaColorInfoPalette(val *ArticleCoverMediaColorInfoPalette) *NullableArticleCoverMediaColorInfoPalette {
	return &NullableArticleCoverMediaColorInfoPalette{value: val, isSet: true}
}

func (v NullableArticleCoverMediaColorInfoPalette) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticleCoverMediaColorInfoPalette) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
