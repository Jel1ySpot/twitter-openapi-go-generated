/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UsersResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersResponseData{}

// UsersResponseData struct for UsersResponseData
type UsersResponseData struct {
	Users []UserResults `json:"users"`
}

type _UsersResponseData UsersResponseData

// NewUsersResponseData instantiates a new UsersResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersResponseData(users []UserResults) *UsersResponseData {
	this := UsersResponseData{}
	this.Users = users
	return &this
}

// NewUsersResponseDataWithDefaults instantiates a new UsersResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersResponseDataWithDefaults() *UsersResponseData {
	this := UsersResponseData{}
	return &this
}

// GetUsers returns the Users field value
func (o *UsersResponseData) GetUsers() []UserResults {
	if o == nil {
		var ret []UserResults
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *UsersResponseData) GetUsersOk() ([]UserResults, bool) {
	if o == nil {
		return nil, false
	}
	return o.Users, true
}

// SetUsers sets field value
func (o *UsersResponseData) SetUsers(v []UserResults) {
	o.Users = v
}

func (o UsersResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["users"] = o.Users
	return toSerialize, nil
}

func (o *UsersResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"users",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsersResponseData := _UsersResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsersResponseData)

	if err != nil {
		return err
	}

	*o = UsersResponseData(varUsersResponseData)

	return err
}

type NullableUsersResponseData struct {
	value *UsersResponseData
	isSet bool
}

func (v NullableUsersResponseData) Get() *UsersResponseData {
	return v.value
}

func (v *NullableUsersResponseData) Set(val *UsersResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersResponseData(val *UsersResponseData) *NullableUsersResponseData {
	return &NullableUsersResponseData{value: val, isSet: true}
}

func (v NullableUsersResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
