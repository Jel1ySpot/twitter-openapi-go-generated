/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ContentEntryType the model 'ContentEntryType'
type ContentEntryType string

// List of ContentEntryType
const (
	TIMELINE_TIMELINE_ITEM ContentEntryType = "TimelineTimelineItem"
	TIMELINE_TIMELINE_CURSOR ContentEntryType = "TimelineTimelineCursor"
	TIMELINE_TIMELINE_MODULE ContentEntryType = "TimelineTimelineModule"
)

// All allowed values of ContentEntryType enum
var AllowedContentEntryTypeEnumValues = []ContentEntryType{
	"TimelineTimelineItem",
	"TimelineTimelineCursor",
	"TimelineTimelineModule",
}

func (v *ContentEntryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContentEntryType(value)
	for _, existing := range AllowedContentEntryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContentEntryType", value)
}

// NewContentEntryTypeFromValue returns a pointer to a valid ContentEntryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContentEntryTypeFromValue(v string) (*ContentEntryType, error) {
	ev := ContentEntryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContentEntryType: valid values are %v", v, AllowedContentEntryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContentEntryType) IsValid() bool {
	for _, existing := range AllowedContentEntryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContentEntryType value
func (v ContentEntryType) Ptr() *ContentEntryType {
	return &v
}

type NullableContentEntryType struct {
	value *ContentEntryType
	isSet bool
}

func (v NullableContentEntryType) Get() *ContentEntryType {
	return v.value
}

func (v *NullableContentEntryType) Set(val *ContentEntryType) {
	v.value = val
	v.isSet = true
}

func (v NullableContentEntryType) IsSet() bool {
	return v.isSet
}

func (v *NullableContentEntryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentEntryType(val *ContentEntryType) *NullableContentEntryType {
	return &NullableContentEntryType{value: val, isSet: true}
}

func (v NullableContentEntryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentEntryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

