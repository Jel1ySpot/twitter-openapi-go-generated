/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExtendedEntities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtendedEntities{}

// ExtendedEntities struct for ExtendedEntities
type ExtendedEntities struct {
	Media []MediaExtended `json:"media"`
}

type _ExtendedEntities ExtendedEntities

// NewExtendedEntities instantiates a new ExtendedEntities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendedEntities(media []MediaExtended) *ExtendedEntities {
	this := ExtendedEntities{}
	this.Media = media
	return &this
}

// NewExtendedEntitiesWithDefaults instantiates a new ExtendedEntities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendedEntitiesWithDefaults() *ExtendedEntities {
	this := ExtendedEntities{}
	return &this
}

// GetMedia returns the Media field value
func (o *ExtendedEntities) GetMedia() []MediaExtended {
	if o == nil {
		var ret []MediaExtended
		return ret
	}

	return o.Media
}

// GetMediaOk returns a tuple with the Media field value
// and a boolean to check if the value has been set.
func (o *ExtendedEntities) GetMediaOk() ([]MediaExtended, bool) {
	if o == nil {
		return nil, false
	}
	return o.Media, true
}

// SetMedia sets field value
func (o *ExtendedEntities) SetMedia(v []MediaExtended) {
	o.Media = v
}

func (o ExtendedEntities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtendedEntities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["media"] = o.Media
	return toSerialize, nil
}

func (o *ExtendedEntities) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"media",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtendedEntities := _ExtendedEntities{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExtendedEntities)

	if err != nil {
		return err
	}

	*o = ExtendedEntities(varExtendedEntities)

	return err
}

type NullableExtendedEntities struct {
	value *ExtendedEntities
	isSet bool
}

func (v NullableExtendedEntities) Get() *ExtendedEntities {
	return v.value
}

func (v *NullableExtendedEntities) Set(val *ExtendedEntities) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendedEntities) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendedEntities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendedEntities(val *ExtendedEntities) *NullableExtendedEntities {
	return &NullableExtendedEntities{value: val, isSet: true}
}

func (v NullableExtendedEntities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendedEntities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


