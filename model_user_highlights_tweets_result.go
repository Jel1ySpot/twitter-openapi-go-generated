/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserHighlightsTweetsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserHighlightsTweetsResult{}

// UserHighlightsTweetsResult struct for UserHighlightsTweetsResult
type UserHighlightsTweetsResult struct {
	Typename TypeName                     `json:"__typename"`
	Timeline UserHighlightsTweetsTimeline `json:"timeline"`
}

type _UserHighlightsTweetsResult UserHighlightsTweetsResult

// NewUserHighlightsTweetsResult instantiates a new UserHighlightsTweetsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserHighlightsTweetsResult(typename TypeName, timeline UserHighlightsTweetsTimeline) *UserHighlightsTweetsResult {
	this := UserHighlightsTweetsResult{}
	this.Typename = typename
	this.Timeline = timeline
	return &this
}

// NewUserHighlightsTweetsResultWithDefaults instantiates a new UserHighlightsTweetsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserHighlightsTweetsResultWithDefaults() *UserHighlightsTweetsResult {
	this := UserHighlightsTweetsResult{}
	return &this
}

// GetTypename returns the Typename field value
func (o *UserHighlightsTweetsResult) GetTypename() TypeName {
	if o == nil {
		var ret TypeName
		return ret
	}

	return o.Typename
}

// GetTypenameOk returns a tuple with the Typename field value
// and a boolean to check if the value has been set.
func (o *UserHighlightsTweetsResult) GetTypenameOk() (*TypeName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Typename, true
}

// SetTypename sets field value
func (o *UserHighlightsTweetsResult) SetTypename(v TypeName) {
	o.Typename = v
}

// GetTimeline returns the Timeline field value
func (o *UserHighlightsTweetsResult) GetTimeline() UserHighlightsTweetsTimeline {
	if o == nil {
		var ret UserHighlightsTweetsTimeline
		return ret
	}

	return o.Timeline
}

// GetTimelineOk returns a tuple with the Timeline field value
// and a boolean to check if the value has been set.
func (o *UserHighlightsTweetsResult) GetTimelineOk() (*UserHighlightsTweetsTimeline, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeline, true
}

// SetTimeline sets field value
func (o *UserHighlightsTweetsResult) SetTimeline(v UserHighlightsTweetsTimeline) {
	o.Timeline = v
}

func (o UserHighlightsTweetsResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserHighlightsTweetsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["__typename"] = o.Typename
	toSerialize["timeline"] = o.Timeline
	return toSerialize, nil
}

func (o *UserHighlightsTweetsResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"__typename",
		"timeline",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserHighlightsTweetsResult := _UserHighlightsTweetsResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserHighlightsTweetsResult)

	if err != nil {
		return err
	}

	*o = UserHighlightsTweetsResult(varUserHighlightsTweetsResult)

	return err
}

type NullableUserHighlightsTweetsResult struct {
	value *UserHighlightsTweetsResult
	isSet bool
}

func (v NullableUserHighlightsTweetsResult) Get() *UserHighlightsTweetsResult {
	return v.value
}

func (v *NullableUserHighlightsTweetsResult) Set(val *UserHighlightsTweetsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUserHighlightsTweetsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUserHighlightsTweetsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserHighlightsTweetsResult(val *UserHighlightsTweetsResult) *NullableUserHighlightsTweetsResult {
	return &NullableUserHighlightsTweetsResult{value: val, isSet: true}
}

func (v NullableUserHighlightsTweetsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserHighlightsTweetsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
