/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MediaVideoInfoVariant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaVideoInfoVariant{}

// MediaVideoInfoVariant struct for MediaVideoInfoVariant
type MediaVideoInfoVariant struct {
	Bitrate *int32 `json:"bitrate,omitempty"`
	ContentType string `json:"content_type"`
	Url string `json:"url"`
}

type _MediaVideoInfoVariant MediaVideoInfoVariant

// NewMediaVideoInfoVariant instantiates a new MediaVideoInfoVariant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaVideoInfoVariant(contentType string, url string) *MediaVideoInfoVariant {
	this := MediaVideoInfoVariant{}
	this.ContentType = contentType
	this.Url = url
	return &this
}

// NewMediaVideoInfoVariantWithDefaults instantiates a new MediaVideoInfoVariant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaVideoInfoVariantWithDefaults() *MediaVideoInfoVariant {
	this := MediaVideoInfoVariant{}
	return &this
}

// GetBitrate returns the Bitrate field value if set, zero value otherwise.
func (o *MediaVideoInfoVariant) GetBitrate() int32 {
	if o == nil || IsNil(o.Bitrate) {
		var ret int32
		return ret
	}
	return *o.Bitrate
}

// GetBitrateOk returns a tuple with the Bitrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaVideoInfoVariant) GetBitrateOk() (*int32, bool) {
	if o == nil || IsNil(o.Bitrate) {
		return nil, false
	}
	return o.Bitrate, true
}

// HasBitrate returns a boolean if a field has been set.
func (o *MediaVideoInfoVariant) HasBitrate() bool {
	if o != nil && !IsNil(o.Bitrate) {
		return true
	}

	return false
}

// SetBitrate gets a reference to the given int32 and assigns it to the Bitrate field.
func (o *MediaVideoInfoVariant) SetBitrate(v int32) {
	o.Bitrate = &v
}

// GetContentType returns the ContentType field value
func (o *MediaVideoInfoVariant) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *MediaVideoInfoVariant) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *MediaVideoInfoVariant) SetContentType(v string) {
	o.ContentType = v
}

// GetUrl returns the Url field value
func (o *MediaVideoInfoVariant) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *MediaVideoInfoVariant) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *MediaVideoInfoVariant) SetUrl(v string) {
	o.Url = v
}

func (o MediaVideoInfoVariant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaVideoInfoVariant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bitrate) {
		toSerialize["bitrate"] = o.Bitrate
	}
	toSerialize["content_type"] = o.ContentType
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *MediaVideoInfoVariant) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content_type",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaVideoInfoVariant := _MediaVideoInfoVariant{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaVideoInfoVariant)

	if err != nil {
		return err
	}

	*o = MediaVideoInfoVariant(varMediaVideoInfoVariant)

	return err
}

type NullableMediaVideoInfoVariant struct {
	value *MediaVideoInfoVariant
	isSet bool
}

func (v NullableMediaVideoInfoVariant) Get() *MediaVideoInfoVariant {
	return v.value
}

func (v *NullableMediaVideoInfoVariant) Set(val *MediaVideoInfoVariant) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaVideoInfoVariant) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaVideoInfoVariant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaVideoInfoVariant(val *MediaVideoInfoVariant) *NullableMediaVideoInfoVariant {
	return &NullableMediaVideoInfoVariant{value: val, isSet: true}
}

func (v NullableMediaVideoInfoVariant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaVideoInfoVariant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


