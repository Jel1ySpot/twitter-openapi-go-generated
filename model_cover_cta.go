/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoverCta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoverCta{}

// CoverCta struct for CoverCta
type CoverCta struct {
	Text *string `json:"Text,omitempty"`
	ButtonStyle *string `json:"buttonStyle,omitempty"`
	Callbacks []Callback `json:"callbacks"`
	ClientEventInfo CtaClientEventInfo `json:"clientEventInfo"`
	CtaBehavior TimelineCoverBehavior `json:"ctaBehavior"`
}

type _CoverCta CoverCta

// NewCoverCta instantiates a new CoverCta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoverCta(callbacks []Callback, clientEventInfo CtaClientEventInfo, ctaBehavior TimelineCoverBehavior) *CoverCta {
	this := CoverCta{}
	this.Callbacks = callbacks
	this.ClientEventInfo = clientEventInfo
	this.CtaBehavior = ctaBehavior
	return &this
}

// NewCoverCtaWithDefaults instantiates a new CoverCta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoverCtaWithDefaults() *CoverCta {
	this := CoverCta{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *CoverCta) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverCta) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *CoverCta) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *CoverCta) SetText(v string) {
	o.Text = &v
}

// GetButtonStyle returns the ButtonStyle field value if set, zero value otherwise.
func (o *CoverCta) GetButtonStyle() string {
	if o == nil || IsNil(o.ButtonStyle) {
		var ret string
		return ret
	}
	return *o.ButtonStyle
}

// GetButtonStyleOk returns a tuple with the ButtonStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverCta) GetButtonStyleOk() (*string, bool) {
	if o == nil || IsNil(o.ButtonStyle) {
		return nil, false
	}
	return o.ButtonStyle, true
}

// HasButtonStyle returns a boolean if a field has been set.
func (o *CoverCta) HasButtonStyle() bool {
	if o != nil && !IsNil(o.ButtonStyle) {
		return true
	}

	return false
}

// SetButtonStyle gets a reference to the given string and assigns it to the ButtonStyle field.
func (o *CoverCta) SetButtonStyle(v string) {
	o.ButtonStyle = &v
}

// GetCallbacks returns the Callbacks field value
func (o *CoverCta) GetCallbacks() []Callback {
	if o == nil {
		var ret []Callback
		return ret
	}

	return o.Callbacks
}

// GetCallbacksOk returns a tuple with the Callbacks field value
// and a boolean to check if the value has been set.
func (o *CoverCta) GetCallbacksOk() ([]Callback, bool) {
	if o == nil {
		return nil, false
	}
	return o.Callbacks, true
}

// SetCallbacks sets field value
func (o *CoverCta) SetCallbacks(v []Callback) {
	o.Callbacks = v
}

// GetClientEventInfo returns the ClientEventInfo field value
func (o *CoverCta) GetClientEventInfo() CtaClientEventInfo {
	if o == nil {
		var ret CtaClientEventInfo
		return ret
	}

	return o.ClientEventInfo
}

// GetClientEventInfoOk returns a tuple with the ClientEventInfo field value
// and a boolean to check if the value has been set.
func (o *CoverCta) GetClientEventInfoOk() (*CtaClientEventInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientEventInfo, true
}

// SetClientEventInfo sets field value
func (o *CoverCta) SetClientEventInfo(v CtaClientEventInfo) {
	o.ClientEventInfo = v
}

// GetCtaBehavior returns the CtaBehavior field value
func (o *CoverCta) GetCtaBehavior() TimelineCoverBehavior {
	if o == nil {
		var ret TimelineCoverBehavior
		return ret
	}

	return o.CtaBehavior
}

// GetCtaBehaviorOk returns a tuple with the CtaBehavior field value
// and a boolean to check if the value has been set.
func (o *CoverCta) GetCtaBehaviorOk() (*TimelineCoverBehavior, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CtaBehavior, true
}

// SetCtaBehavior sets field value
func (o *CoverCta) SetCtaBehavior(v TimelineCoverBehavior) {
	o.CtaBehavior = v
}

func (o CoverCta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoverCta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["Text"] = o.Text
	}
	if !IsNil(o.ButtonStyle) {
		toSerialize["buttonStyle"] = o.ButtonStyle
	}
	toSerialize["callbacks"] = o.Callbacks
	toSerialize["clientEventInfo"] = o.ClientEventInfo
	toSerialize["ctaBehavior"] = o.CtaBehavior
	return toSerialize, nil
}

func (o *CoverCta) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"callbacks",
		"clientEventInfo",
		"ctaBehavior",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoverCta := _CoverCta{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoverCta)

	if err != nil {
		return err
	}

	*o = CoverCta(varCoverCta)

	return err
}

type NullableCoverCta struct {
	value *CoverCta
	isSet bool
}

func (v NullableCoverCta) Get() *CoverCta {
	return v.value
}

func (v *NullableCoverCta) Set(val *CoverCta) {
	v.value = val
	v.isSet = true
}

func (v NullableCoverCta) IsSet() bool {
	return v.isSet
}

func (v *NullableCoverCta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoverCta(val *CoverCta) *NullableCoverCta {
	return &NullableCoverCta{value: val, isSet: true}
}

func (v NullableCoverCta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoverCta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


