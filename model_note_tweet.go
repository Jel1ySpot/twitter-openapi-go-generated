/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NoteTweet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoteTweet{}

// NoteTweet struct for NoteTweet
type NoteTweet struct {
	IsExpandable bool `json:"is_expandable"`
	NoteTweetResults NoteTweetResult `json:"note_tweet_results"`
}

type _NoteTweet NoteTweet

// NewNoteTweet instantiates a new NoteTweet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteTweet(isExpandable bool, noteTweetResults NoteTweetResult) *NoteTweet {
	this := NoteTweet{}
	this.IsExpandable = isExpandable
	this.NoteTweetResults = noteTweetResults
	return &this
}

// NewNoteTweetWithDefaults instantiates a new NoteTweet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteTweetWithDefaults() *NoteTweet {
	this := NoteTweet{}
	return &this
}

// GetIsExpandable returns the IsExpandable field value
func (o *NoteTweet) GetIsExpandable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsExpandable
}

// GetIsExpandableOk returns a tuple with the IsExpandable field value
// and a boolean to check if the value has been set.
func (o *NoteTweet) GetIsExpandableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsExpandable, true
}

// SetIsExpandable sets field value
func (o *NoteTweet) SetIsExpandable(v bool) {
	o.IsExpandable = v
}

// GetNoteTweetResults returns the NoteTweetResults field value
func (o *NoteTweet) GetNoteTweetResults() NoteTweetResult {
	if o == nil {
		var ret NoteTweetResult
		return ret
	}

	return o.NoteTweetResults
}

// GetNoteTweetResultsOk returns a tuple with the NoteTweetResults field value
// and a boolean to check if the value has been set.
func (o *NoteTweet) GetNoteTweetResultsOk() (*NoteTweetResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoteTweetResults, true
}

// SetNoteTweetResults sets field value
func (o *NoteTweet) SetNoteTweetResults(v NoteTweetResult) {
	o.NoteTweetResults = v
}

func (o NoteTweet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoteTweet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_expandable"] = o.IsExpandable
	toSerialize["note_tweet_results"] = o.NoteTweetResults
	return toSerialize, nil
}

func (o *NoteTweet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_expandable",
		"note_tweet_results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNoteTweet := _NoteTweet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNoteTweet)

	if err != nil {
		return err
	}

	*o = NoteTweet(varNoteTweet)

	return err
}

type NullableNoteTweet struct {
	value *NoteTweet
	isSet bool
}

func (v NullableNoteTweet) Get() *NoteTweet {
	return v.value
}

func (v *NullableNoteTweet) Set(val *NoteTweet) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteTweet) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteTweet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteTweet(val *NoteTweet) *NullableNoteTweet {
	return &NullableNoteTweet{value: val, isSet: true}
}

func (v NullableNoteTweet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteTweet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


