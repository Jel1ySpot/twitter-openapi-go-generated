/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MediaSizes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaSizes{}

// MediaSizes struct for MediaSizes
type MediaSizes struct {
	Large  MediaSize `json:"large"`
	Medium MediaSize `json:"medium"`
	Small  MediaSize `json:"small"`
	Thumb  MediaSize `json:"thumb"`
}

type _MediaSizes MediaSizes

// NewMediaSizes instantiates a new MediaSizes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaSizes(large MediaSize, medium MediaSize, small MediaSize, thumb MediaSize) *MediaSizes {
	this := MediaSizes{}
	this.Large = large
	this.Medium = medium
	this.Small = small
	this.Thumb = thumb
	return &this
}

// NewMediaSizesWithDefaults instantiates a new MediaSizes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaSizesWithDefaults() *MediaSizes {
	this := MediaSizes{}
	return &this
}

// GetLarge returns the Large field value
func (o *MediaSizes) GetLarge() MediaSize {
	if o == nil {
		var ret MediaSize
		return ret
	}

	return o.Large
}

// GetLargeOk returns a tuple with the Large field value
// and a boolean to check if the value has been set.
func (o *MediaSizes) GetLargeOk() (*MediaSize, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Large, true
}

// SetLarge sets field value
func (o *MediaSizes) SetLarge(v MediaSize) {
	o.Large = v
}

// GetMedium returns the Medium field value
func (o *MediaSizes) GetMedium() MediaSize {
	if o == nil {
		var ret MediaSize
		return ret
	}

	return o.Medium
}

// GetMediumOk returns a tuple with the Medium field value
// and a boolean to check if the value has been set.
func (o *MediaSizes) GetMediumOk() (*MediaSize, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Medium, true
}

// SetMedium sets field value
func (o *MediaSizes) SetMedium(v MediaSize) {
	o.Medium = v
}

// GetSmall returns the Small field value
func (o *MediaSizes) GetSmall() MediaSize {
	if o == nil {
		var ret MediaSize
		return ret
	}

	return o.Small
}

// GetSmallOk returns a tuple with the Small field value
// and a boolean to check if the value has been set.
func (o *MediaSizes) GetSmallOk() (*MediaSize, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Small, true
}

// SetSmall sets field value
func (o *MediaSizes) SetSmall(v MediaSize) {
	o.Small = v
}

// GetThumb returns the Thumb field value
func (o *MediaSizes) GetThumb() MediaSize {
	if o == nil {
		var ret MediaSize
		return ret
	}

	return o.Thumb
}

// GetThumbOk returns a tuple with the Thumb field value
// and a boolean to check if the value has been set.
func (o *MediaSizes) GetThumbOk() (*MediaSize, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Thumb, true
}

// SetThumb sets field value
func (o *MediaSizes) SetThumb(v MediaSize) {
	o.Thumb = v
}

func (o MediaSizes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaSizes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["large"] = o.Large
	toSerialize["medium"] = o.Medium
	toSerialize["small"] = o.Small
	toSerialize["thumb"] = o.Thumb
	return toSerialize, nil
}

func (o *MediaSizes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"large",
		"medium",
		"small",
		"thumb",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaSizes := _MediaSizes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaSizes)

	if err != nil {
		return err
	}

	*o = MediaSizes(varMediaSizes)

	return err
}

type NullableMediaSizes struct {
	value *MediaSizes
	isSet bool
}

func (v NullableMediaSizes) Get() *MediaSizes {
	return v.value
}

func (v *NullableMediaSizes) Set(val *MediaSizes) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaSizes) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaSizes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaSizes(val *MediaSizes) *NullableMediaSizes {
	return &NullableMediaSizes{value: val, isSet: true}
}

func (v NullableMediaSizes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaSizes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
