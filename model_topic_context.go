/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TopicContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TopicContext{}

// TopicContext struct for TopicContext
type TopicContext struct {
	Description   *string `json:"description,omitempty"`
	Following     *bool   `json:"following,omitempty"`
	IconUrl       *string `json:"icon_url,omitempty"`
	Id            *string `json:"id,omitempty"`
	Name          *string `json:"name,omitempty"`
	NotInterested *bool   `json:"not_interested,omitempty"`
	TopicId       *string `json:"topic_id,omitempty"`
}

// NewTopicContext instantiates a new TopicContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopicContext() *TopicContext {
	this := TopicContext{}
	return &this
}

// NewTopicContextWithDefaults instantiates a new TopicContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopicContextWithDefaults() *TopicContext {
	this := TopicContext{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TopicContext) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicContext) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TopicContext) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TopicContext) SetDescription(v string) {
	o.Description = &v
}

// GetFollowing returns the Following field value if set, zero value otherwise.
func (o *TopicContext) GetFollowing() bool {
	if o == nil || IsNil(o.Following) {
		var ret bool
		return ret
	}
	return *o.Following
}

// GetFollowingOk returns a tuple with the Following field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicContext) GetFollowingOk() (*bool, bool) {
	if o == nil || IsNil(o.Following) {
		return nil, false
	}
	return o.Following, true
}

// HasFollowing returns a boolean if a field has been set.
func (o *TopicContext) HasFollowing() bool {
	if o != nil && !IsNil(o.Following) {
		return true
	}

	return false
}

// SetFollowing gets a reference to the given bool and assigns it to the Following field.
func (o *TopicContext) SetFollowing(v bool) {
	o.Following = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *TopicContext) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicContext) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *TopicContext) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *TopicContext) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TopicContext) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicContext) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TopicContext) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TopicContext) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TopicContext) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicContext) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TopicContext) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TopicContext) SetName(v string) {
	o.Name = &v
}

// GetNotInterested returns the NotInterested field value if set, zero value otherwise.
func (o *TopicContext) GetNotInterested() bool {
	if o == nil || IsNil(o.NotInterested) {
		var ret bool
		return ret
	}
	return *o.NotInterested
}

// GetNotInterestedOk returns a tuple with the NotInterested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicContext) GetNotInterestedOk() (*bool, bool) {
	if o == nil || IsNil(o.NotInterested) {
		return nil, false
	}
	return o.NotInterested, true
}

// HasNotInterested returns a boolean if a field has been set.
func (o *TopicContext) HasNotInterested() bool {
	if o != nil && !IsNil(o.NotInterested) {
		return true
	}

	return false
}

// SetNotInterested gets a reference to the given bool and assigns it to the NotInterested field.
func (o *TopicContext) SetNotInterested(v bool) {
	o.NotInterested = &v
}

// GetTopicId returns the TopicId field value if set, zero value otherwise.
func (o *TopicContext) GetTopicId() string {
	if o == nil || IsNil(o.TopicId) {
		var ret string
		return ret
	}
	return *o.TopicId
}

// GetTopicIdOk returns a tuple with the TopicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicContext) GetTopicIdOk() (*string, bool) {
	if o == nil || IsNil(o.TopicId) {
		return nil, false
	}
	return o.TopicId, true
}

// HasTopicId returns a boolean if a field has been set.
func (o *TopicContext) HasTopicId() bool {
	if o != nil && !IsNil(o.TopicId) {
		return true
	}

	return false
}

// SetTopicId gets a reference to the given string and assigns it to the TopicId field.
func (o *TopicContext) SetTopicId(v string) {
	o.TopicId = &v
}

func (o TopicContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TopicContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Following) {
		toSerialize["following"] = o.Following
	}
	if !IsNil(o.IconUrl) {
		toSerialize["icon_url"] = o.IconUrl
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NotInterested) {
		toSerialize["not_interested"] = o.NotInterested
	}
	if !IsNil(o.TopicId) {
		toSerialize["topic_id"] = o.TopicId
	}
	return toSerialize, nil
}

type NullableTopicContext struct {
	value *TopicContext
	isSet bool
}

func (v NullableTopicContext) Get() *TopicContext {
	return v.value
}

func (v *NullableTopicContext) Set(val *TopicContext) {
	v.value = val
	v.isSet = true
}

func (v NullableTopicContext) IsSet() bool {
	return v.isSet
}

func (v *NullableTopicContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopicContext(val *TopicContext) *NullableTopicContext {
	return &NullableTopicContext{value: val, isSet: true}
}

func (v NullableTopicContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopicContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
