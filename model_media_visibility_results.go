/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MediaVisibilityResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaVisibilityResults{}

// MediaVisibilityResults struct for MediaVisibilityResults
type MediaVisibilityResults struct {
	BlurredImageInterstitial MediaVisibilityResultsBlurredImageInterstitial `json:"blurred_image_interstitial"`
}

type _MediaVisibilityResults MediaVisibilityResults

// NewMediaVisibilityResults instantiates a new MediaVisibilityResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaVisibilityResults(blurredImageInterstitial MediaVisibilityResultsBlurredImageInterstitial) *MediaVisibilityResults {
	this := MediaVisibilityResults{}
	this.BlurredImageInterstitial = blurredImageInterstitial
	return &this
}

// NewMediaVisibilityResultsWithDefaults instantiates a new MediaVisibilityResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaVisibilityResultsWithDefaults() *MediaVisibilityResults {
	this := MediaVisibilityResults{}
	return &this
}

// GetBlurredImageInterstitial returns the BlurredImageInterstitial field value
func (o *MediaVisibilityResults) GetBlurredImageInterstitial() MediaVisibilityResultsBlurredImageInterstitial {
	if o == nil {
		var ret MediaVisibilityResultsBlurredImageInterstitial
		return ret
	}

	return o.BlurredImageInterstitial
}

// GetBlurredImageInterstitialOk returns a tuple with the BlurredImageInterstitial field value
// and a boolean to check if the value has been set.
func (o *MediaVisibilityResults) GetBlurredImageInterstitialOk() (*MediaVisibilityResultsBlurredImageInterstitial, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BlurredImageInterstitial, true
}

// SetBlurredImageInterstitial sets field value
func (o *MediaVisibilityResults) SetBlurredImageInterstitial(v MediaVisibilityResultsBlurredImageInterstitial) {
	o.BlurredImageInterstitial = v
}

func (o MediaVisibilityResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaVisibilityResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["blurred_image_interstitial"] = o.BlurredImageInterstitial
	return toSerialize, nil
}

func (o *MediaVisibilityResults) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"blurred_image_interstitial",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaVisibilityResults := _MediaVisibilityResults{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaVisibilityResults)

	if err != nil {
		return err
	}

	*o = MediaVisibilityResults(varMediaVisibilityResults)

	return err
}

type NullableMediaVisibilityResults struct {
	value *MediaVisibilityResults
	isSet bool
}

func (v NullableMediaVisibilityResults) Get() *MediaVisibilityResults {
	return v.value
}

func (v *NullableMediaVisibilityResults) Set(val *MediaVisibilityResults) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaVisibilityResults) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaVisibilityResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaVisibilityResults(val *MediaVisibilityResults) *NullableMediaVisibilityResults {
	return &NullableMediaVisibilityResults{value: val, isSet: true}
}

func (v NullableMediaVisibilityResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaVisibilityResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


