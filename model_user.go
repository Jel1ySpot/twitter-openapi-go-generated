/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	Typename TypeName `json:"__typename"`
	AffiliatesHighlightedLabel map[string]interface{} `json:"affiliates_highlighted_label"`
	BusinessAccount map[string]interface{} `json:"business_account,omitempty"`
	CreatorSubscriptionsCount *int32 `json:"creator_subscriptions_count,omitempty"`
	HasGraduatedAccess *bool `json:"has_graduated_access,omitempty"`
	HasHiddenLikesOnProfile *bool `json:"has_hidden_likes_on_profile,omitempty"`
	HasNftAvatar *bool `json:"has_nft_avatar,omitempty"`
	HighlightsInfo *UserHighlightsInfo `json:"highlights_info,omitempty"`
	Id string `json:"id" validate:"regexp=^([A-Za-z0-9+\\/]{4})*([A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{2}==)?$"`
	IsBlueVerified bool `json:"is_blue_verified"`
	IsProfileTranslatable *bool `json:"is_profile_translatable,omitempty"`
	Legacy UserLegacy `json:"legacy"`
	LegacyExtendedProfile *UserLegacyExtendedProfile `json:"legacy_extended_profile,omitempty"`
	PremiumGiftingEligible *bool `json:"premium_gifting_eligible,omitempty"`
	Professional *UserProfessional `json:"professional,omitempty"`
	ProfileImageShape string `json:"profile_image_shape"`
	RestId string `json:"rest_id" validate:"regexp=^[0-9]+$"`
	SuperFollowEligible *bool `json:"super_follow_eligible,omitempty"`
	SuperFollowedBy *bool `json:"super_followed_by,omitempty"`
	SuperFollowing *bool `json:"super_following,omitempty"`
	TipjarSettings *UserTipJarSettings `json:"tipjar_settings,omitempty"`
	UserSeedTweetCount *int32 `json:"user_seed_tweet_count,omitempty"`
	VerificationInfo *UserVerificationInfo `json:"verification_info,omitempty"`
}

type _User User

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(typename TypeName, affiliatesHighlightedLabel map[string]interface{}, id string, isBlueVerified bool, legacy UserLegacy, profileImageShape string, restId string) *User {
	this := User{}
	this.Typename = typename
	this.AffiliatesHighlightedLabel = affiliatesHighlightedLabel
	this.Id = id
	this.IsBlueVerified = isBlueVerified
	this.Legacy = legacy
	this.ProfileImageShape = profileImageShape
	this.RestId = restId
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetTypename returns the Typename field value
func (o *User) GetTypename() TypeName {
	if o == nil {
		var ret TypeName
		return ret
	}

	return o.Typename
}

// GetTypenameOk returns a tuple with the Typename field value
// and a boolean to check if the value has been set.
func (o *User) GetTypenameOk() (*TypeName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Typename, true
}

// SetTypename sets field value
func (o *User) SetTypename(v TypeName) {
	o.Typename = v
}

// GetAffiliatesHighlightedLabel returns the AffiliatesHighlightedLabel field value
func (o *User) GetAffiliatesHighlightedLabel() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.AffiliatesHighlightedLabel
}

// GetAffiliatesHighlightedLabelOk returns a tuple with the AffiliatesHighlightedLabel field value
// and a boolean to check if the value has been set.
func (o *User) GetAffiliatesHighlightedLabelOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.AffiliatesHighlightedLabel, true
}

// SetAffiliatesHighlightedLabel sets field value
func (o *User) SetAffiliatesHighlightedLabel(v map[string]interface{}) {
	o.AffiliatesHighlightedLabel = v
}

// GetBusinessAccount returns the BusinessAccount field value if set, zero value otherwise.
func (o *User) GetBusinessAccount() map[string]interface{} {
	if o == nil || IsNil(o.BusinessAccount) {
		var ret map[string]interface{}
		return ret
	}
	return o.BusinessAccount
}

// GetBusinessAccountOk returns a tuple with the BusinessAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetBusinessAccountOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.BusinessAccount) {
		return map[string]interface{}{}, false
	}
	return o.BusinessAccount, true
}

// HasBusinessAccount returns a boolean if a field has been set.
func (o *User) HasBusinessAccount() bool {
	if o != nil && !IsNil(o.BusinessAccount) {
		return true
	}

	return false
}

// SetBusinessAccount gets a reference to the given map[string]interface{} and assigns it to the BusinessAccount field.
func (o *User) SetBusinessAccount(v map[string]interface{}) {
	o.BusinessAccount = v
}

// GetCreatorSubscriptionsCount returns the CreatorSubscriptionsCount field value if set, zero value otherwise.
func (o *User) GetCreatorSubscriptionsCount() int32 {
	if o == nil || IsNil(o.CreatorSubscriptionsCount) {
		var ret int32
		return ret
	}
	return *o.CreatorSubscriptionsCount
}

// GetCreatorSubscriptionsCountOk returns a tuple with the CreatorSubscriptionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCreatorSubscriptionsCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CreatorSubscriptionsCount) {
		return nil, false
	}
	return o.CreatorSubscriptionsCount, true
}

// HasCreatorSubscriptionsCount returns a boolean if a field has been set.
func (o *User) HasCreatorSubscriptionsCount() bool {
	if o != nil && !IsNil(o.CreatorSubscriptionsCount) {
		return true
	}

	return false
}

// SetCreatorSubscriptionsCount gets a reference to the given int32 and assigns it to the CreatorSubscriptionsCount field.
func (o *User) SetCreatorSubscriptionsCount(v int32) {
	o.CreatorSubscriptionsCount = &v
}

// GetHasGraduatedAccess returns the HasGraduatedAccess field value if set, zero value otherwise.
func (o *User) GetHasGraduatedAccess() bool {
	if o == nil || IsNil(o.HasGraduatedAccess) {
		var ret bool
		return ret
	}
	return *o.HasGraduatedAccess
}

// GetHasGraduatedAccessOk returns a tuple with the HasGraduatedAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetHasGraduatedAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.HasGraduatedAccess) {
		return nil, false
	}
	return o.HasGraduatedAccess, true
}

// HasHasGraduatedAccess returns a boolean if a field has been set.
func (o *User) HasHasGraduatedAccess() bool {
	if o != nil && !IsNil(o.HasGraduatedAccess) {
		return true
	}

	return false
}

// SetHasGraduatedAccess gets a reference to the given bool and assigns it to the HasGraduatedAccess field.
func (o *User) SetHasGraduatedAccess(v bool) {
	o.HasGraduatedAccess = &v
}

// GetHasHiddenLikesOnProfile returns the HasHiddenLikesOnProfile field value if set, zero value otherwise.
func (o *User) GetHasHiddenLikesOnProfile() bool {
	if o == nil || IsNil(o.HasHiddenLikesOnProfile) {
		var ret bool
		return ret
	}
	return *o.HasHiddenLikesOnProfile
}

// GetHasHiddenLikesOnProfileOk returns a tuple with the HasHiddenLikesOnProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetHasHiddenLikesOnProfileOk() (*bool, bool) {
	if o == nil || IsNil(o.HasHiddenLikesOnProfile) {
		return nil, false
	}
	return o.HasHiddenLikesOnProfile, true
}

// HasHasHiddenLikesOnProfile returns a boolean if a field has been set.
func (o *User) HasHasHiddenLikesOnProfile() bool {
	if o != nil && !IsNil(o.HasHiddenLikesOnProfile) {
		return true
	}

	return false
}

// SetHasHiddenLikesOnProfile gets a reference to the given bool and assigns it to the HasHiddenLikesOnProfile field.
func (o *User) SetHasHiddenLikesOnProfile(v bool) {
	o.HasHiddenLikesOnProfile = &v
}

// GetHasNftAvatar returns the HasNftAvatar field value if set, zero value otherwise.
func (o *User) GetHasNftAvatar() bool {
	if o == nil || IsNil(o.HasNftAvatar) {
		var ret bool
		return ret
	}
	return *o.HasNftAvatar
}

// GetHasNftAvatarOk returns a tuple with the HasNftAvatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetHasNftAvatarOk() (*bool, bool) {
	if o == nil || IsNil(o.HasNftAvatar) {
		return nil, false
	}
	return o.HasNftAvatar, true
}

// HasHasNftAvatar returns a boolean if a field has been set.
func (o *User) HasHasNftAvatar() bool {
	if o != nil && !IsNil(o.HasNftAvatar) {
		return true
	}

	return false
}

// SetHasNftAvatar gets a reference to the given bool and assigns it to the HasNftAvatar field.
func (o *User) SetHasNftAvatar(v bool) {
	o.HasNftAvatar = &v
}

// GetHighlightsInfo returns the HighlightsInfo field value if set, zero value otherwise.
func (o *User) GetHighlightsInfo() UserHighlightsInfo {
	if o == nil || IsNil(o.HighlightsInfo) {
		var ret UserHighlightsInfo
		return ret
	}
	return *o.HighlightsInfo
}

// GetHighlightsInfoOk returns a tuple with the HighlightsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetHighlightsInfoOk() (*UserHighlightsInfo, bool) {
	if o == nil || IsNil(o.HighlightsInfo) {
		return nil, false
	}
	return o.HighlightsInfo, true
}

// HasHighlightsInfo returns a boolean if a field has been set.
func (o *User) HasHighlightsInfo() bool {
	if o != nil && !IsNil(o.HighlightsInfo) {
		return true
	}

	return false
}

// SetHighlightsInfo gets a reference to the given UserHighlightsInfo and assigns it to the HighlightsInfo field.
func (o *User) SetHighlightsInfo(v UserHighlightsInfo) {
	o.HighlightsInfo = &v
}

// GetId returns the Id field value
func (o *User) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v string) {
	o.Id = v
}

// GetIsBlueVerified returns the IsBlueVerified field value
func (o *User) GetIsBlueVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBlueVerified
}

// GetIsBlueVerifiedOk returns a tuple with the IsBlueVerified field value
// and a boolean to check if the value has been set.
func (o *User) GetIsBlueVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBlueVerified, true
}

// SetIsBlueVerified sets field value
func (o *User) SetIsBlueVerified(v bool) {
	o.IsBlueVerified = v
}

// GetIsProfileTranslatable returns the IsProfileTranslatable field value if set, zero value otherwise.
func (o *User) GetIsProfileTranslatable() bool {
	if o == nil || IsNil(o.IsProfileTranslatable) {
		var ret bool
		return ret
	}
	return *o.IsProfileTranslatable
}

// GetIsProfileTranslatableOk returns a tuple with the IsProfileTranslatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIsProfileTranslatableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProfileTranslatable) {
		return nil, false
	}
	return o.IsProfileTranslatable, true
}

// HasIsProfileTranslatable returns a boolean if a field has been set.
func (o *User) HasIsProfileTranslatable() bool {
	if o != nil && !IsNil(o.IsProfileTranslatable) {
		return true
	}

	return false
}

// SetIsProfileTranslatable gets a reference to the given bool and assigns it to the IsProfileTranslatable field.
func (o *User) SetIsProfileTranslatable(v bool) {
	o.IsProfileTranslatable = &v
}

// GetLegacy returns the Legacy field value
func (o *User) GetLegacy() UserLegacy {
	if o == nil {
		var ret UserLegacy
		return ret
	}

	return o.Legacy
}

// GetLegacyOk returns a tuple with the Legacy field value
// and a boolean to check if the value has been set.
func (o *User) GetLegacyOk() (*UserLegacy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Legacy, true
}

// SetLegacy sets field value
func (o *User) SetLegacy(v UserLegacy) {
	o.Legacy = v
}

// GetLegacyExtendedProfile returns the LegacyExtendedProfile field value if set, zero value otherwise.
func (o *User) GetLegacyExtendedProfile() UserLegacyExtendedProfile {
	if o == nil || IsNil(o.LegacyExtendedProfile) {
		var ret UserLegacyExtendedProfile
		return ret
	}
	return *o.LegacyExtendedProfile
}

// GetLegacyExtendedProfileOk returns a tuple with the LegacyExtendedProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLegacyExtendedProfileOk() (*UserLegacyExtendedProfile, bool) {
	if o == nil || IsNil(o.LegacyExtendedProfile) {
		return nil, false
	}
	return o.LegacyExtendedProfile, true
}

// HasLegacyExtendedProfile returns a boolean if a field has been set.
func (o *User) HasLegacyExtendedProfile() bool {
	if o != nil && !IsNil(o.LegacyExtendedProfile) {
		return true
	}

	return false
}

// SetLegacyExtendedProfile gets a reference to the given UserLegacyExtendedProfile and assigns it to the LegacyExtendedProfile field.
func (o *User) SetLegacyExtendedProfile(v UserLegacyExtendedProfile) {
	o.LegacyExtendedProfile = &v
}

// GetPremiumGiftingEligible returns the PremiumGiftingEligible field value if set, zero value otherwise.
func (o *User) GetPremiumGiftingEligible() bool {
	if o == nil || IsNil(o.PremiumGiftingEligible) {
		var ret bool
		return ret
	}
	return *o.PremiumGiftingEligible
}

// GetPremiumGiftingEligibleOk returns a tuple with the PremiumGiftingEligible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPremiumGiftingEligibleOk() (*bool, bool) {
	if o == nil || IsNil(o.PremiumGiftingEligible) {
		return nil, false
	}
	return o.PremiumGiftingEligible, true
}

// HasPremiumGiftingEligible returns a boolean if a field has been set.
func (o *User) HasPremiumGiftingEligible() bool {
	if o != nil && !IsNil(o.PremiumGiftingEligible) {
		return true
	}

	return false
}

// SetPremiumGiftingEligible gets a reference to the given bool and assigns it to the PremiumGiftingEligible field.
func (o *User) SetPremiumGiftingEligible(v bool) {
	o.PremiumGiftingEligible = &v
}

// GetProfessional returns the Professional field value if set, zero value otherwise.
func (o *User) GetProfessional() UserProfessional {
	if o == nil || IsNil(o.Professional) {
		var ret UserProfessional
		return ret
	}
	return *o.Professional
}

// GetProfessionalOk returns a tuple with the Professional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetProfessionalOk() (*UserProfessional, bool) {
	if o == nil || IsNil(o.Professional) {
		return nil, false
	}
	return o.Professional, true
}

// HasProfessional returns a boolean if a field has been set.
func (o *User) HasProfessional() bool {
	if o != nil && !IsNil(o.Professional) {
		return true
	}

	return false
}

// SetProfessional gets a reference to the given UserProfessional and assigns it to the Professional field.
func (o *User) SetProfessional(v UserProfessional) {
	o.Professional = &v
}

// GetProfileImageShape returns the ProfileImageShape field value
func (o *User) GetProfileImageShape() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileImageShape
}

// GetProfileImageShapeOk returns a tuple with the ProfileImageShape field value
// and a boolean to check if the value has been set.
func (o *User) GetProfileImageShapeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileImageShape, true
}

// SetProfileImageShape sets field value
func (o *User) SetProfileImageShape(v string) {
	o.ProfileImageShape = v
}

// GetRestId returns the RestId field value
func (o *User) GetRestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RestId
}

// GetRestIdOk returns a tuple with the RestId field value
// and a boolean to check if the value has been set.
func (o *User) GetRestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestId, true
}

// SetRestId sets field value
func (o *User) SetRestId(v string) {
	o.RestId = v
}

// GetSuperFollowEligible returns the SuperFollowEligible field value if set, zero value otherwise.
func (o *User) GetSuperFollowEligible() bool {
	if o == nil || IsNil(o.SuperFollowEligible) {
		var ret bool
		return ret
	}
	return *o.SuperFollowEligible
}

// GetSuperFollowEligibleOk returns a tuple with the SuperFollowEligible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSuperFollowEligibleOk() (*bool, bool) {
	if o == nil || IsNil(o.SuperFollowEligible) {
		return nil, false
	}
	return o.SuperFollowEligible, true
}

// HasSuperFollowEligible returns a boolean if a field has been set.
func (o *User) HasSuperFollowEligible() bool {
	if o != nil && !IsNil(o.SuperFollowEligible) {
		return true
	}

	return false
}

// SetSuperFollowEligible gets a reference to the given bool and assigns it to the SuperFollowEligible field.
func (o *User) SetSuperFollowEligible(v bool) {
	o.SuperFollowEligible = &v
}

// GetSuperFollowedBy returns the SuperFollowedBy field value if set, zero value otherwise.
func (o *User) GetSuperFollowedBy() bool {
	if o == nil || IsNil(o.SuperFollowedBy) {
		var ret bool
		return ret
	}
	return *o.SuperFollowedBy
}

// GetSuperFollowedByOk returns a tuple with the SuperFollowedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSuperFollowedByOk() (*bool, bool) {
	if o == nil || IsNil(o.SuperFollowedBy) {
		return nil, false
	}
	return o.SuperFollowedBy, true
}

// HasSuperFollowedBy returns a boolean if a field has been set.
func (o *User) HasSuperFollowedBy() bool {
	if o != nil && !IsNil(o.SuperFollowedBy) {
		return true
	}

	return false
}

// SetSuperFollowedBy gets a reference to the given bool and assigns it to the SuperFollowedBy field.
func (o *User) SetSuperFollowedBy(v bool) {
	o.SuperFollowedBy = &v
}

// GetSuperFollowing returns the SuperFollowing field value if set, zero value otherwise.
func (o *User) GetSuperFollowing() bool {
	if o == nil || IsNil(o.SuperFollowing) {
		var ret bool
		return ret
	}
	return *o.SuperFollowing
}

// GetSuperFollowingOk returns a tuple with the SuperFollowing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSuperFollowingOk() (*bool, bool) {
	if o == nil || IsNil(o.SuperFollowing) {
		return nil, false
	}
	return o.SuperFollowing, true
}

// HasSuperFollowing returns a boolean if a field has been set.
func (o *User) HasSuperFollowing() bool {
	if o != nil && !IsNil(o.SuperFollowing) {
		return true
	}

	return false
}

// SetSuperFollowing gets a reference to the given bool and assigns it to the SuperFollowing field.
func (o *User) SetSuperFollowing(v bool) {
	o.SuperFollowing = &v
}

// GetTipjarSettings returns the TipjarSettings field value if set, zero value otherwise.
func (o *User) GetTipjarSettings() UserTipJarSettings {
	if o == nil || IsNil(o.TipjarSettings) {
		var ret UserTipJarSettings
		return ret
	}
	return *o.TipjarSettings
}

// GetTipjarSettingsOk returns a tuple with the TipjarSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetTipjarSettingsOk() (*UserTipJarSettings, bool) {
	if o == nil || IsNil(o.TipjarSettings) {
		return nil, false
	}
	return o.TipjarSettings, true
}

// HasTipjarSettings returns a boolean if a field has been set.
func (o *User) HasTipjarSettings() bool {
	if o != nil && !IsNil(o.TipjarSettings) {
		return true
	}

	return false
}

// SetTipjarSettings gets a reference to the given UserTipJarSettings and assigns it to the TipjarSettings field.
func (o *User) SetTipjarSettings(v UserTipJarSettings) {
	o.TipjarSettings = &v
}

// GetUserSeedTweetCount returns the UserSeedTweetCount field value if set, zero value otherwise.
func (o *User) GetUserSeedTweetCount() int32 {
	if o == nil || IsNil(o.UserSeedTweetCount) {
		var ret int32
		return ret
	}
	return *o.UserSeedTweetCount
}

// GetUserSeedTweetCountOk returns a tuple with the UserSeedTweetCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserSeedTweetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.UserSeedTweetCount) {
		return nil, false
	}
	return o.UserSeedTweetCount, true
}

// HasUserSeedTweetCount returns a boolean if a field has been set.
func (o *User) HasUserSeedTweetCount() bool {
	if o != nil && !IsNil(o.UserSeedTweetCount) {
		return true
	}

	return false
}

// SetUserSeedTweetCount gets a reference to the given int32 and assigns it to the UserSeedTweetCount field.
func (o *User) SetUserSeedTweetCount(v int32) {
	o.UserSeedTweetCount = &v
}

// GetVerificationInfo returns the VerificationInfo field value if set, zero value otherwise.
func (o *User) GetVerificationInfo() UserVerificationInfo {
	if o == nil || IsNil(o.VerificationInfo) {
		var ret UserVerificationInfo
		return ret
	}
	return *o.VerificationInfo
}

// GetVerificationInfoOk returns a tuple with the VerificationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetVerificationInfoOk() (*UserVerificationInfo, bool) {
	if o == nil || IsNil(o.VerificationInfo) {
		return nil, false
	}
	return o.VerificationInfo, true
}

// HasVerificationInfo returns a boolean if a field has been set.
func (o *User) HasVerificationInfo() bool {
	if o != nil && !IsNil(o.VerificationInfo) {
		return true
	}

	return false
}

// SetVerificationInfo gets a reference to the given UserVerificationInfo and assigns it to the VerificationInfo field.
func (o *User) SetVerificationInfo(v UserVerificationInfo) {
	o.VerificationInfo = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["__typename"] = o.Typename
	toSerialize["affiliates_highlighted_label"] = o.AffiliatesHighlightedLabel
	if !IsNil(o.BusinessAccount) {
		toSerialize["business_account"] = o.BusinessAccount
	}
	if !IsNil(o.CreatorSubscriptionsCount) {
		toSerialize["creator_subscriptions_count"] = o.CreatorSubscriptionsCount
	}
	if !IsNil(o.HasGraduatedAccess) {
		toSerialize["has_graduated_access"] = o.HasGraduatedAccess
	}
	if !IsNil(o.HasHiddenLikesOnProfile) {
		toSerialize["has_hidden_likes_on_profile"] = o.HasHiddenLikesOnProfile
	}
	if !IsNil(o.HasNftAvatar) {
		toSerialize["has_nft_avatar"] = o.HasNftAvatar
	}
	if !IsNil(o.HighlightsInfo) {
		toSerialize["highlights_info"] = o.HighlightsInfo
	}
	toSerialize["id"] = o.Id
	toSerialize["is_blue_verified"] = o.IsBlueVerified
	if !IsNil(o.IsProfileTranslatable) {
		toSerialize["is_profile_translatable"] = o.IsProfileTranslatable
	}
	toSerialize["legacy"] = o.Legacy
	if !IsNil(o.LegacyExtendedProfile) {
		toSerialize["legacy_extended_profile"] = o.LegacyExtendedProfile
	}
	if !IsNil(o.PremiumGiftingEligible) {
		toSerialize["premium_gifting_eligible"] = o.PremiumGiftingEligible
	}
	if !IsNil(o.Professional) {
		toSerialize["professional"] = o.Professional
	}
	toSerialize["profile_image_shape"] = o.ProfileImageShape
	toSerialize["rest_id"] = o.RestId
	if !IsNil(o.SuperFollowEligible) {
		toSerialize["super_follow_eligible"] = o.SuperFollowEligible
	}
	if !IsNil(o.SuperFollowedBy) {
		toSerialize["super_followed_by"] = o.SuperFollowedBy
	}
	if !IsNil(o.SuperFollowing) {
		toSerialize["super_following"] = o.SuperFollowing
	}
	if !IsNil(o.TipjarSettings) {
		toSerialize["tipjar_settings"] = o.TipjarSettings
	}
	if !IsNil(o.UserSeedTweetCount) {
		toSerialize["user_seed_tweet_count"] = o.UserSeedTweetCount
	}
	if !IsNil(o.VerificationInfo) {
		toSerialize["verification_info"] = o.VerificationInfo
	}
	return toSerialize, nil
}

func (o *User) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"__typename",
		"affiliates_highlighted_label",
		"id",
		"is_blue_verified",
		"legacy",
		"profile_image_shape",
		"rest_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUser := _User{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUser)

	if err != nil {
		return err
	}

	*o = User(varUser)

	return err
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


