/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserResultByScreenNameResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserResultByScreenNameResult{}

// UserResultByScreenNameResult struct for UserResultByScreenNameResult
type UserResultByScreenNameResult struct {
	Typename       TypeName                     `json:"__typename"`
	Id             string                       `json:"id" validate:"regexp=^[0-9a-zA-Z=]+$"`
	Legacy         UserResultByScreenNameLegacy `json:"legacy"`
	Profilemodules map[string]interface{}       `json:"profilemodules"`
	RestId         string                       `json:"rest_id" validate:"regexp=^[0-9]+$"`
}

type _UserResultByScreenNameResult UserResultByScreenNameResult

// NewUserResultByScreenNameResult instantiates a new UserResultByScreenNameResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserResultByScreenNameResult(typename TypeName, id string, legacy UserResultByScreenNameLegacy, profilemodules map[string]interface{}, restId string) *UserResultByScreenNameResult {
	this := UserResultByScreenNameResult{}
	this.Typename = typename
	this.Id = id
	this.Legacy = legacy
	this.Profilemodules = profilemodules
	this.RestId = restId
	return &this
}

// NewUserResultByScreenNameResultWithDefaults instantiates a new UserResultByScreenNameResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserResultByScreenNameResultWithDefaults() *UserResultByScreenNameResult {
	this := UserResultByScreenNameResult{}
	return &this
}

// GetTypename returns the Typename field value
func (o *UserResultByScreenNameResult) GetTypename() TypeName {
	if o == nil {
		var ret TypeName
		return ret
	}

	return o.Typename
}

// GetTypenameOk returns a tuple with the Typename field value
// and a boolean to check if the value has been set.
func (o *UserResultByScreenNameResult) GetTypenameOk() (*TypeName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Typename, true
}

// SetTypename sets field value
func (o *UserResultByScreenNameResult) SetTypename(v TypeName) {
	o.Typename = v
}

// GetId returns the Id field value
func (o *UserResultByScreenNameResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserResultByScreenNameResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserResultByScreenNameResult) SetId(v string) {
	o.Id = v
}

// GetLegacy returns the Legacy field value
func (o *UserResultByScreenNameResult) GetLegacy() UserResultByScreenNameLegacy {
	if o == nil {
		var ret UserResultByScreenNameLegacy
		return ret
	}

	return o.Legacy
}

// GetLegacyOk returns a tuple with the Legacy field value
// and a boolean to check if the value has been set.
func (o *UserResultByScreenNameResult) GetLegacyOk() (*UserResultByScreenNameLegacy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Legacy, true
}

// SetLegacy sets field value
func (o *UserResultByScreenNameResult) SetLegacy(v UserResultByScreenNameLegacy) {
	o.Legacy = v
}

// GetProfilemodules returns the Profilemodules field value
func (o *UserResultByScreenNameResult) GetProfilemodules() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Profilemodules
}

// GetProfilemodulesOk returns a tuple with the Profilemodules field value
// and a boolean to check if the value has been set.
func (o *UserResultByScreenNameResult) GetProfilemodulesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Profilemodules, true
}

// SetProfilemodules sets field value
func (o *UserResultByScreenNameResult) SetProfilemodules(v map[string]interface{}) {
	o.Profilemodules = v
}

// GetRestId returns the RestId field value
func (o *UserResultByScreenNameResult) GetRestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RestId
}

// GetRestIdOk returns a tuple with the RestId field value
// and a boolean to check if the value has been set.
func (o *UserResultByScreenNameResult) GetRestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestId, true
}

// SetRestId sets field value
func (o *UserResultByScreenNameResult) SetRestId(v string) {
	o.RestId = v
}

func (o UserResultByScreenNameResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserResultByScreenNameResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["__typename"] = o.Typename
	toSerialize["id"] = o.Id
	toSerialize["legacy"] = o.Legacy
	toSerialize["profilemodules"] = o.Profilemodules
	toSerialize["rest_id"] = o.RestId
	return toSerialize, nil
}

func (o *UserResultByScreenNameResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"__typename",
		"id",
		"legacy",
		"profilemodules",
		"rest_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserResultByScreenNameResult := _UserResultByScreenNameResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserResultByScreenNameResult)

	if err != nil {
		return err
	}

	*o = UserResultByScreenNameResult(varUserResultByScreenNameResult)

	return err
}

type NullableUserResultByScreenNameResult struct {
	value *UserResultByScreenNameResult
	isSet bool
}

func (v NullableUserResultByScreenNameResult) Get() *UserResultByScreenNameResult {
	return v.value
}

func (v *NullableUserResultByScreenNameResult) Set(val *UserResultByScreenNameResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUserResultByScreenNameResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUserResultByScreenNameResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserResultByScreenNameResult(val *UserResultByScreenNameResult) *NullableUserResultByScreenNameResult {
	return &NullableUserResultByScreenNameResult{value: val, isSet: true}
}

func (v NullableUserResultByScreenNameResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserResultByScreenNameResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
