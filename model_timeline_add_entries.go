/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TimelineAddEntries type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimelineAddEntries{}

// TimelineAddEntries struct for TimelineAddEntries
type TimelineAddEntries struct {
	Entries []TimelineAddEntry `json:"entries"`
	Type    InstructionType    `json:"type"`
}

type _TimelineAddEntries TimelineAddEntries

// NewTimelineAddEntries instantiates a new TimelineAddEntries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelineAddEntries(entries []TimelineAddEntry, type_ InstructionType) *TimelineAddEntries {
	this := TimelineAddEntries{}
	this.Entries = entries
	this.Type = type_
	return &this
}

// NewTimelineAddEntriesWithDefaults instantiates a new TimelineAddEntries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineAddEntriesWithDefaults() *TimelineAddEntries {
	this := TimelineAddEntries{}
	return &this
}

// GetEntries returns the Entries field value
func (o *TimelineAddEntries) GetEntries() []TimelineAddEntry {
	if o == nil {
		var ret []TimelineAddEntry
		return ret
	}

	return o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value
// and a boolean to check if the value has been set.
func (o *TimelineAddEntries) GetEntriesOk() ([]TimelineAddEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entries, true
}

// SetEntries sets field value
func (o *TimelineAddEntries) SetEntries(v []TimelineAddEntry) {
	o.Entries = v
}

// GetType returns the Type field value
func (o *TimelineAddEntries) GetType() InstructionType {
	if o == nil {
		var ret InstructionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TimelineAddEntries) GetTypeOk() (*InstructionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TimelineAddEntries) SetType(v InstructionType) {
	o.Type = v
}

func (o TimelineAddEntries) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimelineAddEntries) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entries"] = o.Entries
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *TimelineAddEntries) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entries",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimelineAddEntries := _TimelineAddEntries{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimelineAddEntries)

	if err != nil {
		return err
	}

	*o = TimelineAddEntries(varTimelineAddEntries)

	return err
}

type NullableTimelineAddEntries struct {
	value *TimelineAddEntries
	isSet bool
}

func (v NullableTimelineAddEntries) Get() *TimelineAddEntries {
	return v.value
}

func (v *NullableTimelineAddEntries) Set(val *TimelineAddEntries) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineAddEntries) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineAddEntries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineAddEntries(val *TimelineAddEntries) *NullableTimelineAddEntries {
	return &NullableTimelineAddEntries{value: val, isSet: true}
}

func (v NullableTimelineAddEntries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineAddEntries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
