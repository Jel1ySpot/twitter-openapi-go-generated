/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchTimelineData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchTimelineData{}

// SearchTimelineData struct for SearchTimelineData
type SearchTimelineData struct {
	SearchByRawQuery SearchByRawQuery `json:"search_by_raw_query"`
}

type _SearchTimelineData SearchTimelineData

// NewSearchTimelineData instantiates a new SearchTimelineData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchTimelineData(searchByRawQuery SearchByRawQuery) *SearchTimelineData {
	this := SearchTimelineData{}
	this.SearchByRawQuery = searchByRawQuery
	return &this
}

// NewSearchTimelineDataWithDefaults instantiates a new SearchTimelineData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchTimelineDataWithDefaults() *SearchTimelineData {
	this := SearchTimelineData{}
	return &this
}

// GetSearchByRawQuery returns the SearchByRawQuery field value
func (o *SearchTimelineData) GetSearchByRawQuery() SearchByRawQuery {
	if o == nil {
		var ret SearchByRawQuery
		return ret
	}

	return o.SearchByRawQuery
}

// GetSearchByRawQueryOk returns a tuple with the SearchByRawQuery field value
// and a boolean to check if the value has been set.
func (o *SearchTimelineData) GetSearchByRawQueryOk() (*SearchByRawQuery, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchByRawQuery, true
}

// SetSearchByRawQuery sets field value
func (o *SearchTimelineData) SetSearchByRawQuery(v SearchByRawQuery) {
	o.SearchByRawQuery = v
}

func (o SearchTimelineData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchTimelineData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["search_by_raw_query"] = o.SearchByRawQuery
	return toSerialize, nil
}

func (o *SearchTimelineData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"search_by_raw_query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchTimelineData := _SearchTimelineData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchTimelineData)

	if err != nil {
		return err
	}

	*o = SearchTimelineData(varSearchTimelineData)

	return err
}

type NullableSearchTimelineData struct {
	value *SearchTimelineData
	isSet bool
}

func (v NullableSearchTimelineData) Get() *SearchTimelineData {
	return v.value
}

func (v *NullableSearchTimelineData) Set(val *SearchTimelineData) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchTimelineData) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchTimelineData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchTimelineData(val *SearchTimelineData) *NullableSearchTimelineData {
	return &NullableSearchTimelineData{value: val, isSet: true}
}

func (v NullableSearchTimelineData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchTimelineData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


