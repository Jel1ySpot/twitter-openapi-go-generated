/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Highlight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Highlight{}

// Highlight struct for Highlight
type Highlight struct {
	TextHighlights []TextHighlight `json:"textHighlights"`
}

type _Highlight Highlight

// NewHighlight instantiates a new Highlight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHighlight(textHighlights []TextHighlight) *Highlight {
	this := Highlight{}
	this.TextHighlights = textHighlights
	return &this
}

// NewHighlightWithDefaults instantiates a new Highlight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHighlightWithDefaults() *Highlight {
	this := Highlight{}
	return &this
}

// GetTextHighlights returns the TextHighlights field value
func (o *Highlight) GetTextHighlights() []TextHighlight {
	if o == nil {
		var ret []TextHighlight
		return ret
	}

	return o.TextHighlights
}

// GetTextHighlightsOk returns a tuple with the TextHighlights field value
// and a boolean to check if the value has been set.
func (o *Highlight) GetTextHighlightsOk() ([]TextHighlight, bool) {
	if o == nil {
		return nil, false
	}
	return o.TextHighlights, true
}

// SetTextHighlights sets field value
func (o *Highlight) SetTextHighlights(v []TextHighlight) {
	o.TextHighlights = v
}

func (o Highlight) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Highlight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["textHighlights"] = o.TextHighlights
	return toSerialize, nil
}

func (o *Highlight) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"textHighlights",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHighlight := _Highlight{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHighlight)

	if err != nil {
		return err
	}

	*o = Highlight(varHighlight)

	return err
}

type NullableHighlight struct {
	value *Highlight
	isSet bool
}

func (v NullableHighlight) Get() *Highlight {
	return v.value
}

func (v *NullableHighlight) Set(val *Highlight) {
	v.value = val
	v.isSet = true
}

func (v NullableHighlight) IsSet() bool {
	return v.isSet
}

func (v *NullableHighlight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighlight(val *Highlight) *NullableHighlight {
	return &NullableHighlight{value: val, isSet: true}
}

func (v NullableHighlight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighlight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
