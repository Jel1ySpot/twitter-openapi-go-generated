/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MediaStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaStats{}

// MediaStats struct for MediaStats
type MediaStats struct {
	ViewCount int32 `json:"viewCount"`
}

type _MediaStats MediaStats

// NewMediaStats instantiates a new MediaStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaStats(viewCount int32) *MediaStats {
	this := MediaStats{}
	this.ViewCount = viewCount
	return &this
}

// NewMediaStatsWithDefaults instantiates a new MediaStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaStatsWithDefaults() *MediaStats {
	this := MediaStats{}
	return &this
}

// GetViewCount returns the ViewCount field value
func (o *MediaStats) GetViewCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ViewCount
}

// GetViewCountOk returns a tuple with the ViewCount field value
// and a boolean to check if the value has been set.
func (o *MediaStats) GetViewCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViewCount, true
}

// SetViewCount sets field value
func (o *MediaStats) SetViewCount(v int32) {
	o.ViewCount = v
}

func (o MediaStats) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["viewCount"] = o.ViewCount
	return toSerialize, nil
}

func (o *MediaStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"viewCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMediaStats := _MediaStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMediaStats)

	if err != nil {
		return err
	}

	*o = MediaStats(varMediaStats)

	return err
}

type NullableMediaStats struct {
	value *MediaStats
	isSet bool
}

func (v NullableMediaStats) Get() *MediaStats {
	return v.value
}

func (v *NullableMediaStats) Set(val *MediaStats) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaStats) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaStats(val *MediaStats) *NullableMediaStats {
	return &NullableMediaStats{value: val, isSet: true}
}

func (v NullableMediaStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
