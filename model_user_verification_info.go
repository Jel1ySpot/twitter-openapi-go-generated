/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserVerificationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserVerificationInfo{}

// UserVerificationInfo struct for UserVerificationInfo
type UserVerificationInfo struct {
	IsIdentityVerified bool                        `json:"is_identity_verified"`
	Reason             *UserVerificationInfoReason `json:"reason,omitempty"`
}

type _UserVerificationInfo UserVerificationInfo

// NewUserVerificationInfo instantiates a new UserVerificationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserVerificationInfo(isIdentityVerified bool) *UserVerificationInfo {
	this := UserVerificationInfo{}
	this.IsIdentityVerified = isIdentityVerified
	return &this
}

// NewUserVerificationInfoWithDefaults instantiates a new UserVerificationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserVerificationInfoWithDefaults() *UserVerificationInfo {
	this := UserVerificationInfo{}
	return &this
}

// GetIsIdentityVerified returns the IsIdentityVerified field value
func (o *UserVerificationInfo) GetIsIdentityVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsIdentityVerified
}

// GetIsIdentityVerifiedOk returns a tuple with the IsIdentityVerified field value
// and a boolean to check if the value has been set.
func (o *UserVerificationInfo) GetIsIdentityVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsIdentityVerified, true
}

// SetIsIdentityVerified sets field value
func (o *UserVerificationInfo) SetIsIdentityVerified(v bool) {
	o.IsIdentityVerified = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *UserVerificationInfo) GetReason() UserVerificationInfoReason {
	if o == nil || IsNil(o.Reason) {
		var ret UserVerificationInfoReason
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserVerificationInfo) GetReasonOk() (*UserVerificationInfoReason, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *UserVerificationInfo) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given UserVerificationInfoReason and assigns it to the Reason field.
func (o *UserVerificationInfo) SetReason(v UserVerificationInfoReason) {
	o.Reason = &v
}

func (o UserVerificationInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserVerificationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_identity_verified"] = o.IsIdentityVerified
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

func (o *UserVerificationInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_identity_verified",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserVerificationInfo := _UserVerificationInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserVerificationInfo)

	if err != nil {
		return err
	}

	*o = UserVerificationInfo(varUserVerificationInfo)

	return err
}

type NullableUserVerificationInfo struct {
	value *UserVerificationInfo
	isSet bool
}

func (v NullableUserVerificationInfo) Get() *UserVerificationInfo {
	return v.value
}

func (v *NullableUserVerificationInfo) Set(val *UserVerificationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUserVerificationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUserVerificationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserVerificationInfo(val *UserVerificationInfo) *NullableUserVerificationInfo {
	return &NullableUserVerificationInfo{value: val, isSet: true}
}

func (v NullableUserVerificationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserVerificationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
