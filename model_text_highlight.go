/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TextHighlight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextHighlight{}

// TextHighlight struct for TextHighlight
type TextHighlight struct {
	EndIndex   int32 `json:"endIndex"`
	StartIndex int32 `json:"startIndex"`
}

type _TextHighlight TextHighlight

// NewTextHighlight instantiates a new TextHighlight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextHighlight(endIndex int32, startIndex int32) *TextHighlight {
	this := TextHighlight{}
	this.EndIndex = endIndex
	this.StartIndex = startIndex
	return &this
}

// NewTextHighlightWithDefaults instantiates a new TextHighlight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextHighlightWithDefaults() *TextHighlight {
	this := TextHighlight{}
	return &this
}

// GetEndIndex returns the EndIndex field value
func (o *TextHighlight) GetEndIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EndIndex
}

// GetEndIndexOk returns a tuple with the EndIndex field value
// and a boolean to check if the value has been set.
func (o *TextHighlight) GetEndIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndIndex, true
}

// SetEndIndex sets field value
func (o *TextHighlight) SetEndIndex(v int32) {
	o.EndIndex = v
}

// GetStartIndex returns the StartIndex field value
func (o *TextHighlight) GetStartIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StartIndex
}

// GetStartIndexOk returns a tuple with the StartIndex field value
// and a boolean to check if the value has been set.
func (o *TextHighlight) GetStartIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartIndex, true
}

// SetStartIndex sets field value
func (o *TextHighlight) SetStartIndex(v int32) {
	o.StartIndex = v
}

func (o TextHighlight) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextHighlight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endIndex"] = o.EndIndex
	toSerialize["startIndex"] = o.StartIndex
	return toSerialize, nil
}

func (o *TextHighlight) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endIndex",
		"startIndex",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTextHighlight := _TextHighlight{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTextHighlight)

	if err != nil {
		return err
	}

	*o = TextHighlight(varTextHighlight)

	return err
}

type NullableTextHighlight struct {
	value *TextHighlight
	isSet bool
}

func (v NullableTextHighlight) Get() *TextHighlight {
	return v.value
}

func (v *NullableTextHighlight) Set(val *TextHighlight) {
	v.value = val
	v.isSet = true
}

func (v NullableTextHighlight) IsSet() bool {
	return v.isSet
}

func (v *NullableTextHighlight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextHighlight(val *TextHighlight) *NullableTextHighlight {
	return &NullableTextHighlight{value: val, isSet: true}
}

func (v NullableTextHighlight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextHighlight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
