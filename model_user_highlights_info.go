/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UserHighlightsInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserHighlightsInfo{}

// UserHighlightsInfo struct for UserHighlightsInfo
type UserHighlightsInfo struct {
	CanHighlightTweets bool   `json:"can_highlight_tweets"`
	HighlightedTweets  string `json:"highlighted_tweets"`
}

type _UserHighlightsInfo UserHighlightsInfo

// NewUserHighlightsInfo instantiates a new UserHighlightsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserHighlightsInfo(canHighlightTweets bool, highlightedTweets string) *UserHighlightsInfo {
	this := UserHighlightsInfo{}
	this.CanHighlightTweets = canHighlightTweets
	this.HighlightedTweets = highlightedTweets
	return &this
}

// NewUserHighlightsInfoWithDefaults instantiates a new UserHighlightsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserHighlightsInfoWithDefaults() *UserHighlightsInfo {
	this := UserHighlightsInfo{}
	return &this
}

// GetCanHighlightTweets returns the CanHighlightTweets field value
func (o *UserHighlightsInfo) GetCanHighlightTweets() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanHighlightTweets
}

// GetCanHighlightTweetsOk returns a tuple with the CanHighlightTweets field value
// and a boolean to check if the value has been set.
func (o *UserHighlightsInfo) GetCanHighlightTweetsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanHighlightTweets, true
}

// SetCanHighlightTweets sets field value
func (o *UserHighlightsInfo) SetCanHighlightTweets(v bool) {
	o.CanHighlightTweets = v
}

// GetHighlightedTweets returns the HighlightedTweets field value
func (o *UserHighlightsInfo) GetHighlightedTweets() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HighlightedTweets
}

// GetHighlightedTweetsOk returns a tuple with the HighlightedTweets field value
// and a boolean to check if the value has been set.
func (o *UserHighlightsInfo) GetHighlightedTweetsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HighlightedTweets, true
}

// SetHighlightedTweets sets field value
func (o *UserHighlightsInfo) SetHighlightedTweets(v string) {
	o.HighlightedTweets = v
}

func (o UserHighlightsInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserHighlightsInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["can_highlight_tweets"] = o.CanHighlightTweets
	toSerialize["highlighted_tweets"] = o.HighlightedTweets
	return toSerialize, nil
}

func (o *UserHighlightsInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"can_highlight_tweets",
		"highlighted_tweets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserHighlightsInfo := _UserHighlightsInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserHighlightsInfo)

	if err != nil {
		return err
	}

	*o = UserHighlightsInfo(varUserHighlightsInfo)

	return err
}

type NullableUserHighlightsInfo struct {
	value *UserHighlightsInfo
	isSet bool
}

func (v NullableUserHighlightsInfo) Get() *UserHighlightsInfo {
	return v.value
}

func (v *NullableUserHighlightsInfo) Set(val *UserHighlightsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUserHighlightsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUserHighlightsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserHighlightsInfo(val *UserHighlightsInfo) *NullableUserHighlightsInfo {
	return &NullableUserHighlightsInfo{value: val, isSet: true}
}

func (v NullableUserHighlightsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserHighlightsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
