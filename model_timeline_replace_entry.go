/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TimelineReplaceEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimelineReplaceEntry{}

// TimelineReplaceEntry struct for TimelineReplaceEntry
type TimelineReplaceEntry struct {
	Entry            TimelineAddEntry `json:"entry"`
	EntryIdToReplace string           `json:"entry_id_to_replace"`
	Type             InstructionType  `json:"type"`
}

type _TimelineReplaceEntry TimelineReplaceEntry

// NewTimelineReplaceEntry instantiates a new TimelineReplaceEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelineReplaceEntry(entry TimelineAddEntry, entryIdToReplace string, type_ InstructionType) *TimelineReplaceEntry {
	this := TimelineReplaceEntry{}
	this.Entry = entry
	this.EntryIdToReplace = entryIdToReplace
	this.Type = type_
	return &this
}

// NewTimelineReplaceEntryWithDefaults instantiates a new TimelineReplaceEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineReplaceEntryWithDefaults() *TimelineReplaceEntry {
	this := TimelineReplaceEntry{}
	return &this
}

// GetEntry returns the Entry field value
func (o *TimelineReplaceEntry) GetEntry() TimelineAddEntry {
	if o == nil {
		var ret TimelineAddEntry
		return ret
	}

	return o.Entry
}

// GetEntryOk returns a tuple with the Entry field value
// and a boolean to check if the value has been set.
func (o *TimelineReplaceEntry) GetEntryOk() (*TimelineAddEntry, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entry, true
}

// SetEntry sets field value
func (o *TimelineReplaceEntry) SetEntry(v TimelineAddEntry) {
	o.Entry = v
}

// GetEntryIdToReplace returns the EntryIdToReplace field value
func (o *TimelineReplaceEntry) GetEntryIdToReplace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntryIdToReplace
}

// GetEntryIdToReplaceOk returns a tuple with the EntryIdToReplace field value
// and a boolean to check if the value has been set.
func (o *TimelineReplaceEntry) GetEntryIdToReplaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntryIdToReplace, true
}

// SetEntryIdToReplace sets field value
func (o *TimelineReplaceEntry) SetEntryIdToReplace(v string) {
	o.EntryIdToReplace = v
}

// GetType returns the Type field value
func (o *TimelineReplaceEntry) GetType() InstructionType {
	if o == nil {
		var ret InstructionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TimelineReplaceEntry) GetTypeOk() (*InstructionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TimelineReplaceEntry) SetType(v InstructionType) {
	o.Type = v
}

func (o TimelineReplaceEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimelineReplaceEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entry"] = o.Entry
	toSerialize["entry_id_to_replace"] = o.EntryIdToReplace
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *TimelineReplaceEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entry",
		"entry_id_to_replace",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimelineReplaceEntry := _TimelineReplaceEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimelineReplaceEntry)

	if err != nil {
		return err
	}

	*o = TimelineReplaceEntry(varTimelineReplaceEntry)

	return err
}

type NullableTimelineReplaceEntry struct {
	value *TimelineReplaceEntry
	isSet bool
}

func (v NullableTimelineReplaceEntry) Get() *TimelineReplaceEntry {
	return v.value
}

func (v *NullableTimelineReplaceEntry) Set(val *TimelineReplaceEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineReplaceEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineReplaceEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineReplaceEntry(val *TimelineReplaceEntry) *NullableTimelineReplaceEntry {
	return &NullableTimelineReplaceEntry{value: val, isSet: true}
}

func (v NullableTimelineReplaceEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineReplaceEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
