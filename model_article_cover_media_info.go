/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ArticleCoverMediaInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArticleCoverMediaInfo{}

// ArticleCoverMediaInfo struct for ArticleCoverMediaInfo
type ArticleCoverMediaInfo struct {
	Typename          *TypeName                  `json:"__typename,omitempty"`
	ColorInfo         ArticleCoverMediaColorInfo `json:"color_info"`
	OriginalImgHeight int32                      `json:"original_img_height"`
	OriginalImgUrl    string                     `json:"original_img_url"`
	OriginalImgWidth  int32                      `json:"original_img_width"`
}

type _ArticleCoverMediaInfo ArticleCoverMediaInfo

// NewArticleCoverMediaInfo instantiates a new ArticleCoverMediaInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArticleCoverMediaInfo(colorInfo ArticleCoverMediaColorInfo, originalImgHeight int32, originalImgUrl string, originalImgWidth int32) *ArticleCoverMediaInfo {
	this := ArticleCoverMediaInfo{}
	this.ColorInfo = colorInfo
	this.OriginalImgHeight = originalImgHeight
	this.OriginalImgUrl = originalImgUrl
	this.OriginalImgWidth = originalImgWidth
	return &this
}

// NewArticleCoverMediaInfoWithDefaults instantiates a new ArticleCoverMediaInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArticleCoverMediaInfoWithDefaults() *ArticleCoverMediaInfo {
	this := ArticleCoverMediaInfo{}
	return &this
}

// GetTypename returns the Typename field value if set, zero value otherwise.
func (o *ArticleCoverMediaInfo) GetTypename() TypeName {
	if o == nil || IsNil(o.Typename) {
		var ret TypeName
		return ret
	}
	return *o.Typename
}

// GetTypenameOk returns a tuple with the Typename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArticleCoverMediaInfo) GetTypenameOk() (*TypeName, bool) {
	if o == nil || IsNil(o.Typename) {
		return nil, false
	}
	return o.Typename, true
}

// HasTypename returns a boolean if a field has been set.
func (o *ArticleCoverMediaInfo) HasTypename() bool {
	if o != nil && !IsNil(o.Typename) {
		return true
	}

	return false
}

// SetTypename gets a reference to the given TypeName and assigns it to the Typename field.
func (o *ArticleCoverMediaInfo) SetTypename(v TypeName) {
	o.Typename = &v
}

// GetColorInfo returns the ColorInfo field value
func (o *ArticleCoverMediaInfo) GetColorInfo() ArticleCoverMediaColorInfo {
	if o == nil {
		var ret ArticleCoverMediaColorInfo
		return ret
	}

	return o.ColorInfo
}

// GetColorInfoOk returns a tuple with the ColorInfo field value
// and a boolean to check if the value has been set.
func (o *ArticleCoverMediaInfo) GetColorInfoOk() (*ArticleCoverMediaColorInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ColorInfo, true
}

// SetColorInfo sets field value
func (o *ArticleCoverMediaInfo) SetColorInfo(v ArticleCoverMediaColorInfo) {
	o.ColorInfo = v
}

// GetOriginalImgHeight returns the OriginalImgHeight field value
func (o *ArticleCoverMediaInfo) GetOriginalImgHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OriginalImgHeight
}

// GetOriginalImgHeightOk returns a tuple with the OriginalImgHeight field value
// and a boolean to check if the value has been set.
func (o *ArticleCoverMediaInfo) GetOriginalImgHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalImgHeight, true
}

// SetOriginalImgHeight sets field value
func (o *ArticleCoverMediaInfo) SetOriginalImgHeight(v int32) {
	o.OriginalImgHeight = v
}

// GetOriginalImgUrl returns the OriginalImgUrl field value
func (o *ArticleCoverMediaInfo) GetOriginalImgUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalImgUrl
}

// GetOriginalImgUrlOk returns a tuple with the OriginalImgUrl field value
// and a boolean to check if the value has been set.
func (o *ArticleCoverMediaInfo) GetOriginalImgUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalImgUrl, true
}

// SetOriginalImgUrl sets field value
func (o *ArticleCoverMediaInfo) SetOriginalImgUrl(v string) {
	o.OriginalImgUrl = v
}

// GetOriginalImgWidth returns the OriginalImgWidth field value
func (o *ArticleCoverMediaInfo) GetOriginalImgWidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OriginalImgWidth
}

// GetOriginalImgWidthOk returns a tuple with the OriginalImgWidth field value
// and a boolean to check if the value has been set.
func (o *ArticleCoverMediaInfo) GetOriginalImgWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalImgWidth, true
}

// SetOriginalImgWidth sets field value
func (o *ArticleCoverMediaInfo) SetOriginalImgWidth(v int32) {
	o.OriginalImgWidth = v
}

func (o ArticleCoverMediaInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArticleCoverMediaInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Typename) {
		toSerialize["__typename"] = o.Typename
	}
	toSerialize["color_info"] = o.ColorInfo
	toSerialize["original_img_height"] = o.OriginalImgHeight
	toSerialize["original_img_url"] = o.OriginalImgUrl
	toSerialize["original_img_width"] = o.OriginalImgWidth
	return toSerialize, nil
}

func (o *ArticleCoverMediaInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"color_info",
		"original_img_height",
		"original_img_url",
		"original_img_width",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArticleCoverMediaInfo := _ArticleCoverMediaInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArticleCoverMediaInfo)

	if err != nil {
		return err
	}

	*o = ArticleCoverMediaInfo(varArticleCoverMediaInfo)

	return err
}

type NullableArticleCoverMediaInfo struct {
	value *ArticleCoverMediaInfo
	isSet bool
}

func (v NullableArticleCoverMediaInfo) Get() *ArticleCoverMediaInfo {
	return v.value
}

func (v *NullableArticleCoverMediaInfo) Set(val *ArticleCoverMediaInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableArticleCoverMediaInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableArticleCoverMediaInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArticleCoverMediaInfo(val *ArticleCoverMediaInfo) *NullableArticleCoverMediaInfo {
	return &NullableArticleCoverMediaInfo{value: val, isSet: true}
}

func (v NullableArticleCoverMediaInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArticleCoverMediaInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
