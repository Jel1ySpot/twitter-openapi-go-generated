/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorExtensions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorExtensions{}

// ErrorExtensions struct for ErrorExtensions
type ErrorExtensions struct {
	Code int32 `json:"code"`
	Kind string `json:"kind"`
	Name string `json:"name"`
	RetryAfter *int32 `json:"retry_after,omitempty"`
	Source string `json:"source"`
	Tracing Tracing `json:"tracing"`
}

type _ErrorExtensions ErrorExtensions

// NewErrorExtensions instantiates a new ErrorExtensions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorExtensions(code int32, kind string, name string, source string, tracing Tracing) *ErrorExtensions {
	this := ErrorExtensions{}
	this.Code = code
	this.Kind = kind
	this.Name = name
	this.Source = source
	this.Tracing = tracing
	return &this
}

// NewErrorExtensionsWithDefaults instantiates a new ErrorExtensions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorExtensionsWithDefaults() *ErrorExtensions {
	this := ErrorExtensions{}
	return &this
}

// GetCode returns the Code field value
func (o *ErrorExtensions) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ErrorExtensions) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ErrorExtensions) SetCode(v int32) {
	o.Code = v
}

// GetKind returns the Kind field value
func (o *ErrorExtensions) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ErrorExtensions) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ErrorExtensions) SetKind(v string) {
	o.Kind = v
}

// GetName returns the Name field value
func (o *ErrorExtensions) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ErrorExtensions) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ErrorExtensions) SetName(v string) {
	o.Name = v
}

// GetRetryAfter returns the RetryAfter field value if set, zero value otherwise.
func (o *ErrorExtensions) GetRetryAfter() int32 {
	if o == nil || IsNil(o.RetryAfter) {
		var ret int32
		return ret
	}
	return *o.RetryAfter
}

// GetRetryAfterOk returns a tuple with the RetryAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorExtensions) GetRetryAfterOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryAfter) {
		return nil, false
	}
	return o.RetryAfter, true
}

// HasRetryAfter returns a boolean if a field has been set.
func (o *ErrorExtensions) HasRetryAfter() bool {
	if o != nil && !IsNil(o.RetryAfter) {
		return true
	}

	return false
}

// SetRetryAfter gets a reference to the given int32 and assigns it to the RetryAfter field.
func (o *ErrorExtensions) SetRetryAfter(v int32) {
	o.RetryAfter = &v
}

// GetSource returns the Source field value
func (o *ErrorExtensions) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ErrorExtensions) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ErrorExtensions) SetSource(v string) {
	o.Source = v
}

// GetTracing returns the Tracing field value
func (o *ErrorExtensions) GetTracing() Tracing {
	if o == nil {
		var ret Tracing
		return ret
	}

	return o.Tracing
}

// GetTracingOk returns a tuple with the Tracing field value
// and a boolean to check if the value has been set.
func (o *ErrorExtensions) GetTracingOk() (*Tracing, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tracing, true
}

// SetTracing sets field value
func (o *ErrorExtensions) SetTracing(v Tracing) {
	o.Tracing = v
}

func (o ErrorExtensions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorExtensions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["kind"] = o.Kind
	toSerialize["name"] = o.Name
	if !IsNil(o.RetryAfter) {
		toSerialize["retry_after"] = o.RetryAfter
	}
	toSerialize["source"] = o.Source
	toSerialize["tracing"] = o.Tracing
	return toSerialize, nil
}

func (o *ErrorExtensions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"kind",
		"name",
		"source",
		"tracing",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorExtensions := _ErrorExtensions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorExtensions)

	if err != nil {
		return err
	}

	*o = ErrorExtensions(varErrorExtensions)

	return err
}

type NullableErrorExtensions struct {
	value *ErrorExtensions
	isSet bool
}

func (v NullableErrorExtensions) Get() *ErrorExtensions {
	return v.value
}

func (v *NullableErrorExtensions) Set(val *ErrorExtensions) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorExtensions) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorExtensions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorExtensions(val *ErrorExtensions) *NullableErrorExtensions {
	return &NullableErrorExtensions{value: val, isSet: true}
}

func (v NullableErrorExtensions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorExtensions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


