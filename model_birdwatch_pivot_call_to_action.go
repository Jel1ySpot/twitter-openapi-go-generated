/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BirdwatchPivotCallToAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BirdwatchPivotCallToAction{}

// BirdwatchPivotCallToAction struct for BirdwatchPivotCallToAction
type BirdwatchPivotCallToAction struct {
	DestinationUrl string `json:"destinationUrl"`
	Prompt string `json:"prompt"`
	Title string `json:"title"`
}

type _BirdwatchPivotCallToAction BirdwatchPivotCallToAction

// NewBirdwatchPivotCallToAction instantiates a new BirdwatchPivotCallToAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBirdwatchPivotCallToAction(destinationUrl string, prompt string, title string) *BirdwatchPivotCallToAction {
	this := BirdwatchPivotCallToAction{}
	this.DestinationUrl = destinationUrl
	this.Prompt = prompt
	this.Title = title
	return &this
}

// NewBirdwatchPivotCallToActionWithDefaults instantiates a new BirdwatchPivotCallToAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBirdwatchPivotCallToActionWithDefaults() *BirdwatchPivotCallToAction {
	this := BirdwatchPivotCallToAction{}
	return &this
}

// GetDestinationUrl returns the DestinationUrl field value
func (o *BirdwatchPivotCallToAction) GetDestinationUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationUrl
}

// GetDestinationUrlOk returns a tuple with the DestinationUrl field value
// and a boolean to check if the value has been set.
func (o *BirdwatchPivotCallToAction) GetDestinationUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationUrl, true
}

// SetDestinationUrl sets field value
func (o *BirdwatchPivotCallToAction) SetDestinationUrl(v string) {
	o.DestinationUrl = v
}

// GetPrompt returns the Prompt field value
func (o *BirdwatchPivotCallToAction) GetPrompt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value
// and a boolean to check if the value has been set.
func (o *BirdwatchPivotCallToAction) GetPromptOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prompt, true
}

// SetPrompt sets field value
func (o *BirdwatchPivotCallToAction) SetPrompt(v string) {
	o.Prompt = v
}

// GetTitle returns the Title field value
func (o *BirdwatchPivotCallToAction) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *BirdwatchPivotCallToAction) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *BirdwatchPivotCallToAction) SetTitle(v string) {
	o.Title = v
}

func (o BirdwatchPivotCallToAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BirdwatchPivotCallToAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destinationUrl"] = o.DestinationUrl
	toSerialize["prompt"] = o.Prompt
	toSerialize["title"] = o.Title
	return toSerialize, nil
}

func (o *BirdwatchPivotCallToAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destinationUrl",
		"prompt",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBirdwatchPivotCallToAction := _BirdwatchPivotCallToAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBirdwatchPivotCallToAction)

	if err != nil {
		return err
	}

	*o = BirdwatchPivotCallToAction(varBirdwatchPivotCallToAction)

	return err
}

type NullableBirdwatchPivotCallToAction struct {
	value *BirdwatchPivotCallToAction
	isSet bool
}

func (v NullableBirdwatchPivotCallToAction) Get() *BirdwatchPivotCallToAction {
	return v.value
}

func (v *NullableBirdwatchPivotCallToAction) Set(val *BirdwatchPivotCallToAction) {
	v.value = val
	v.isSet = true
}

func (v NullableBirdwatchPivotCallToAction) IsSet() bool {
	return v.isSet
}

func (v *NullableBirdwatchPivotCallToAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBirdwatchPivotCallToAction(val *BirdwatchPivotCallToAction) *NullableBirdwatchPivotCallToAction {
	return &NullableBirdwatchPivotCallToAction{value: val, isSet: true}
}

func (v NullableBirdwatchPivotCallToAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBirdwatchPivotCallToAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


