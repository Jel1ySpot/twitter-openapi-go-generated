/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TimelineTimelineModule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimelineTimelineModule{}

// TimelineTimelineModule struct for TimelineTimelineModule
type TimelineTimelineModule struct {
	Typename        TypeName               `json:"__typename"`
	ClientEventInfo map[string]interface{} `json:"clientEventInfo"`
	DisplayType     DisplayType            `json:"displayType"`
	EntryType       ContentEntryType       `json:"entryType"`
	FeedbackInfo    *FeedbackInfo          `json:"feedbackInfo,omitempty"`
	Footer          map[string]interface{} `json:"footer,omitempty"`
	Header          map[string]interface{} `json:"header,omitempty"`
	Items           []ModuleItem           `json:"items,omitempty"`
	Metadata        map[string]interface{} `json:"metadata,omitempty"`
}

type _TimelineTimelineModule TimelineTimelineModule

// NewTimelineTimelineModule instantiates a new TimelineTimelineModule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimelineTimelineModule(typename TypeName, clientEventInfo map[string]interface{}, displayType DisplayType, entryType ContentEntryType) *TimelineTimelineModule {
	this := TimelineTimelineModule{}
	this.Typename = typename
	this.ClientEventInfo = clientEventInfo
	this.DisplayType = displayType
	this.EntryType = entryType
	return &this
}

// NewTimelineTimelineModuleWithDefaults instantiates a new TimelineTimelineModule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimelineTimelineModuleWithDefaults() *TimelineTimelineModule {
	this := TimelineTimelineModule{}
	return &this
}

// GetTypename returns the Typename field value
func (o *TimelineTimelineModule) GetTypename() TypeName {
	if o == nil {
		var ret TypeName
		return ret
	}

	return o.Typename
}

// GetTypenameOk returns a tuple with the Typename field value
// and a boolean to check if the value has been set.
func (o *TimelineTimelineModule) GetTypenameOk() (*TypeName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Typename, true
}

// SetTypename sets field value
func (o *TimelineTimelineModule) SetTypename(v TypeName) {
	o.Typename = v
}

// GetClientEventInfo returns the ClientEventInfo field value
func (o *TimelineTimelineModule) GetClientEventInfo() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ClientEventInfo
}

// GetClientEventInfoOk returns a tuple with the ClientEventInfo field value
// and a boolean to check if the value has been set.
func (o *TimelineTimelineModule) GetClientEventInfoOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.ClientEventInfo, true
}

// SetClientEventInfo sets field value
func (o *TimelineTimelineModule) SetClientEventInfo(v map[string]interface{}) {
	o.ClientEventInfo = v
}

// GetDisplayType returns the DisplayType field value
func (o *TimelineTimelineModule) GetDisplayType() DisplayType {
	if o == nil {
		var ret DisplayType
		return ret
	}

	return o.DisplayType
}

// GetDisplayTypeOk returns a tuple with the DisplayType field value
// and a boolean to check if the value has been set.
func (o *TimelineTimelineModule) GetDisplayTypeOk() (*DisplayType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayType, true
}

// SetDisplayType sets field value
func (o *TimelineTimelineModule) SetDisplayType(v DisplayType) {
	o.DisplayType = v
}

// GetEntryType returns the EntryType field value
func (o *TimelineTimelineModule) GetEntryType() ContentEntryType {
	if o == nil {
		var ret ContentEntryType
		return ret
	}

	return o.EntryType
}

// GetEntryTypeOk returns a tuple with the EntryType field value
// and a boolean to check if the value has been set.
func (o *TimelineTimelineModule) GetEntryTypeOk() (*ContentEntryType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntryType, true
}

// SetEntryType sets field value
func (o *TimelineTimelineModule) SetEntryType(v ContentEntryType) {
	o.EntryType = v
}

// GetFeedbackInfo returns the FeedbackInfo field value if set, zero value otherwise.
func (o *TimelineTimelineModule) GetFeedbackInfo() FeedbackInfo {
	if o == nil || IsNil(o.FeedbackInfo) {
		var ret FeedbackInfo
		return ret
	}
	return *o.FeedbackInfo
}

// GetFeedbackInfoOk returns a tuple with the FeedbackInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineTimelineModule) GetFeedbackInfoOk() (*FeedbackInfo, bool) {
	if o == nil || IsNil(o.FeedbackInfo) {
		return nil, false
	}
	return o.FeedbackInfo, true
}

// HasFeedbackInfo returns a boolean if a field has been set.
func (o *TimelineTimelineModule) HasFeedbackInfo() bool {
	if o != nil && !IsNil(o.FeedbackInfo) {
		return true
	}

	return false
}

// SetFeedbackInfo gets a reference to the given FeedbackInfo and assigns it to the FeedbackInfo field.
func (o *TimelineTimelineModule) SetFeedbackInfo(v FeedbackInfo) {
	o.FeedbackInfo = &v
}

// GetFooter returns the Footer field value if set, zero value otherwise.
func (o *TimelineTimelineModule) GetFooter() map[string]interface{} {
	if o == nil || IsNil(o.Footer) {
		var ret map[string]interface{}
		return ret
	}
	return o.Footer
}

// GetFooterOk returns a tuple with the Footer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineTimelineModule) GetFooterOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Footer) {
		return map[string]interface{}{}, false
	}
	return o.Footer, true
}

// HasFooter returns a boolean if a field has been set.
func (o *TimelineTimelineModule) HasFooter() bool {
	if o != nil && !IsNil(o.Footer) {
		return true
	}

	return false
}

// SetFooter gets a reference to the given map[string]interface{} and assigns it to the Footer field.
func (o *TimelineTimelineModule) SetFooter(v map[string]interface{}) {
	o.Footer = v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *TimelineTimelineModule) GetHeader() map[string]interface{} {
	if o == nil || IsNil(o.Header) {
		var ret map[string]interface{}
		return ret
	}
	return o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineTimelineModule) GetHeaderOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Header) {
		return map[string]interface{}{}, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *TimelineTimelineModule) HasHeader() bool {
	if o != nil && !IsNil(o.Header) {
		return true
	}

	return false
}

// SetHeader gets a reference to the given map[string]interface{} and assigns it to the Header field.
func (o *TimelineTimelineModule) SetHeader(v map[string]interface{}) {
	o.Header = v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *TimelineTimelineModule) GetItems() []ModuleItem {
	if o == nil || IsNil(o.Items) {
		var ret []ModuleItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineTimelineModule) GetItemsOk() ([]ModuleItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *TimelineTimelineModule) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ModuleItem and assigns it to the Items field.
func (o *TimelineTimelineModule) SetItems(v []ModuleItem) {
	o.Items = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *TimelineTimelineModule) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimelineTimelineModule) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TimelineTimelineModule) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *TimelineTimelineModule) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o TimelineTimelineModule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimelineTimelineModule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["__typename"] = o.Typename
	toSerialize["clientEventInfo"] = o.ClientEventInfo
	toSerialize["displayType"] = o.DisplayType
	toSerialize["entryType"] = o.EntryType
	if !IsNil(o.FeedbackInfo) {
		toSerialize["feedbackInfo"] = o.FeedbackInfo
	}
	if !IsNil(o.Footer) {
		toSerialize["footer"] = o.Footer
	}
	if !IsNil(o.Header) {
		toSerialize["header"] = o.Header
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *TimelineTimelineModule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"__typename",
		"clientEventInfo",
		"displayType",
		"entryType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimelineTimelineModule := _TimelineTimelineModule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimelineTimelineModule)

	if err != nil {
		return err
	}

	*o = TimelineTimelineModule(varTimelineTimelineModule)

	return err
}

type NullableTimelineTimelineModule struct {
	value *TimelineTimelineModule
	isSet bool
}

func (v NullableTimelineTimelineModule) Get() *TimelineTimelineModule {
	return v.value
}

func (v *NullableTimelineTimelineModule) Set(val *TimelineTimelineModule) {
	v.value = val
	v.isSet = true
}

func (v NullableTimelineTimelineModule) IsSet() bool {
	return v.isSet
}

func (v *NullableTimelineTimelineModule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimelineTimelineModule(val *TimelineTimelineModule) *NullableTimelineTimelineModule {
	return &NullableTimelineTimelineModule{value: val, isSet: true}
}

func (v NullableTimelineTimelineModule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimelineTimelineModule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
