/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PrimaryCommunityTopic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrimaryCommunityTopic{}

// PrimaryCommunityTopic struct for PrimaryCommunityTopic
type PrimaryCommunityTopic struct {
	TopicId string `json:"topic_id" validate:"regexp=^[0-9]+$"`
	TopicName string `json:"topic_name"`
}

type _PrimaryCommunityTopic PrimaryCommunityTopic

// NewPrimaryCommunityTopic instantiates a new PrimaryCommunityTopic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrimaryCommunityTopic(topicId string, topicName string) *PrimaryCommunityTopic {
	this := PrimaryCommunityTopic{}
	this.TopicId = topicId
	this.TopicName = topicName
	return &this
}

// NewPrimaryCommunityTopicWithDefaults instantiates a new PrimaryCommunityTopic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrimaryCommunityTopicWithDefaults() *PrimaryCommunityTopic {
	this := PrimaryCommunityTopic{}
	return &this
}

// GetTopicId returns the TopicId field value
func (o *PrimaryCommunityTopic) GetTopicId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopicId
}

// GetTopicIdOk returns a tuple with the TopicId field value
// and a boolean to check if the value has been set.
func (o *PrimaryCommunityTopic) GetTopicIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopicId, true
}

// SetTopicId sets field value
func (o *PrimaryCommunityTopic) SetTopicId(v string) {
	o.TopicId = v
}

// GetTopicName returns the TopicName field value
func (o *PrimaryCommunityTopic) GetTopicName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopicName
}

// GetTopicNameOk returns a tuple with the TopicName field value
// and a boolean to check if the value has been set.
func (o *PrimaryCommunityTopic) GetTopicNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopicName, true
}

// SetTopicName sets field value
func (o *PrimaryCommunityTopic) SetTopicName(v string) {
	o.TopicName = v
}

func (o PrimaryCommunityTopic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrimaryCommunityTopic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["topic_id"] = o.TopicId
	toSerialize["topic_name"] = o.TopicName
	return toSerialize, nil
}

func (o *PrimaryCommunityTopic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"topic_id",
		"topic_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrimaryCommunityTopic := _PrimaryCommunityTopic{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrimaryCommunityTopic)

	if err != nil {
		return err
	}

	*o = PrimaryCommunityTopic(varPrimaryCommunityTopic)

	return err
}

type NullablePrimaryCommunityTopic struct {
	value *PrimaryCommunityTopic
	isSet bool
}

func (v NullablePrimaryCommunityTopic) Get() *PrimaryCommunityTopic {
	return v.value
}

func (v *NullablePrimaryCommunityTopic) Set(val *PrimaryCommunityTopic) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimaryCommunityTopic) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimaryCommunityTopic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimaryCommunityTopic(val *PrimaryCommunityTopic) *NullablePrimaryCommunityTopic {
	return &NullablePrimaryCommunityTopic{value: val, isSet: true}
}

func (v NullablePrimaryCommunityTopic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimaryCommunityTopic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


