/*
Twitter OpenAPI

Twitter OpenAPI(Swagger) specification

API version: 0.0.1
Contact: yuki@yuki0311.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CursorType the model 'CursorType'
type CursorType string

// List of CursorType
const (
	TOP CursorType = "Top"
	BOTTOM CursorType = "Bottom"
	SHOW_MORE CursorType = "ShowMore"
	SHOW_MORE_THREADS CursorType = "ShowMoreThreads"
	GAP CursorType = "Gap"
	SHOW_MORE_THREADS_PROMPT CursorType = "ShowMoreThreadsPrompt"
)

// All allowed values of CursorType enum
var AllowedCursorTypeEnumValues = []CursorType{
	"Top",
	"Bottom",
	"ShowMore",
	"ShowMoreThreads",
	"Gap",
	"ShowMoreThreadsPrompt",
}

func (v *CursorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CursorType(value)
	for _, existing := range AllowedCursorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CursorType", value)
}

// NewCursorTypeFromValue returns a pointer to a valid CursorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCursorTypeFromValue(v string) (*CursorType, error) {
	ev := CursorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CursorType: valid values are %v", v, AllowedCursorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CursorType) IsValid() bool {
	for _, existing := range AllowedCursorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CursorType value
func (v CursorType) Ptr() *CursorType {
	return &v
}

type NullableCursorType struct {
	value *CursorType
	isSet bool
}

func (v NullableCursorType) Get() *CursorType {
	return v.value
}

func (v *NullableCursorType) Set(val *CursorType) {
	v.value = val
	v.isSet = true
}

func (v NullableCursorType) IsSet() bool {
	return v.isSet
}

func (v *NullableCursorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCursorType(val *CursorType) *NullableCursorType {
	return &NullableCursorType{value: val, isSet: true}
}

func (v NullableCursorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCursorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

